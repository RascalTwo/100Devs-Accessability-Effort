00:00:00
spread out throughout our time together has been little things that help you get a job. So what I have done is combined all of those snippets into one class. So I don't care if you are on class one catch up crew, I don't care if you're deep in the hunt or if you're already on the job, this class is for you. Now, we're gonna cover a lot of stuff. We're gonna cover everything from your online presence to how to interview all the way through data structures and algorithms just to get that refresher and we didn't get a lot of space repetition in yet, right? And so we're gonna pull it all together in one class. And my goal is that as you are going throughout the hunt, this is the class you come back to. When you need to remember your

00:01:00
wonderful time in the hallowed halls of 100 devs, this is the class you come back to. When somebody says, hey Leon, or hey your name, I've been trying to get a job for a long time, I haven't been able to do it, this is the class you show them. All right, so that's the goal. We're gonna walk through kind of all these little bits, Bob's do hickeys, bring it all together and then you are ready to go along the hunt. Now, this isn't this isn't the end, folks. This isn't the end. As you know, tomorrow we have our tea spill six o'clock on Discord. These tea spills have been wild, folks. Absolutely wild. The information that gets shared in these real boots on the ground experience of what it's like to get a job coming out of the 100 devs experience, what it's like to get a job right now, right? Then all day next

00:02:00
week, not just Tuesday when we have class, but Monday, Tuesday, Wednesday, Thursday, Friday, you have stand up, right? Come on over to stand up. We got 500 plus people, sometimes peaking over 600 people walking through a coding challenge each day, learning progressively harder and harder methods than harder and harder data structures and algorithms, answering real questions of what folks are running into on the hunt. So this isn't the end. This is a beautiful new beginning. All right, so let's get into it. I want to go back. I want to start at the beginning. I want to bring in all the things that I think are going to make you successful on the hunt. If you're new around here, you got referred from a friend. What an amazing friend they are. I'm Leon. We're running a free software engineering bootcamp for folks

00:03:00
that are trying to go from zero to employed, right? And we've been doing this for months. So we are condensing all of that knowledge into one class. but there are definitely areas where we go into more detail and previous classes on YouTube where you can go back and watch those classes. So if you feel like we go a little too fast through something that you really want to dive into a little bit more, you can definitely check out those previous videos on YouTube. And I really think it's important no matter what stage you're at that you really take this stuff to heart and that you keep it up to date. It's wild out in these streets folks and I'm a realist I always tell my students yes you got the job but the first three months are the most important of that job and maybe even of your career those first three months are hard those first three months don't always work out so

00:04:00
while you're getting paid to learn how to code keep all of this stuff up to date, right? We're seeing some layoffs come around, right? If you're at a company that did layoffs and you're the first person in the door, well, guess what? You're the first person out. Never, exactly, never stop looking for a job. Always keep this stuff primed. Always make sure this stuff, right? It's a FIFO data structure. Oh, you didn't do them like that. That would be, that's a fire tweet right there. Somebody tweet that I'll, I'll retweet it. Um, and so I think it's important to keep that in mind, whether you're, you're just starting the hunt and you need this stuff for your current process, whether you're on class 11 of the ketchup crew, this is something you should start working on now anyway, and if you're on the job, make sure all this stuff is buttoned up, I know it's a lot. I know you're learning a lot. I know you're putting in a lot of

00:05:00
work, but you got to stay on top of this stuff too. All right, we're going to discuss. Are you ready? Come to the boardroom. You're ready. You're ready to interview no matter how prepared you think you are. If you've been keeping up with pace of class, you are ready. Easy dunk. We're going to talk about how to get an interview, how to do all the little things to make sure that you're attractive to interviewers to all the things that you need to do to kind of get past that first round to pass the sniff test right and then how you can get past the further rounds like the technical challenges and things like that so lots to cover we're going to go through it at a fast clip at this point in program it is the hardest For a lot of folks,

00:06:00
there is a mental block that happens where they legitimately don't want to start the hunt. Let me get bigger. Let me go space. There's a moment exactly where imposter syndrome hits. You doubt all the work that you put in and you talk to yourself and say, maybe I'm not ready. you are ready now are things gonna go perfect out the gate absolutely not you have 60 companies that you have to network your way into and people are gonna ghost you interviews are gonna go poorly things are not gonna go your way but that is ok.

00:07:00
You are ready. You have amazing projects. You have skills that no one can take from you you have put in the work to start the hunt so please please start the hunt this is your sign right this is your sign This is your sign, please start the hunt. You, that has not started, this is your chance to start. I'm asking you, start! Because once you start, you start to realize that it's not as bad as you thought it might be. one

00:08:00
of the things that so many folks have said, right? So many folks have said on Discord, especially during the tea spills, is that I thought these interviews were gonna be one thing and they were completely different than what they had built up in their head, right? You will be surprised about how some of your interviews go, where it feels like you're talking to a friend, where everything kind of vibes, it just works out, right? get to that point where you get to those interviews where you feel the weight come off your shoulders because you are ready now the hunt is a hunt you don't go out and get your kill every single time you go out the hunt you have to be ready for it to take a while you have to be ready for it to be something that can take you to your breaking point, I loved Jeff's

00:09:00
story from the tea spill on Friday. Jeff time and time again had to take breaks, but just didn't give up and found a phenomenal job that fits them perfectly all because they decided to not give up and that's easier said than done, but that's the only thing that's standing between you and a job, is you deciding to either not start the hunt or to not complete it, because the hunt does not stop until you get a job. Hundreds of folks with the same skillset and experiences as you have gone out and gotten a job. You can do this. You have a whole community behind you that will support you in doing this. You are ready.

00:10:00
Just had a CTO of a major Canadian tech company respond to me on LinkedIn with a meeting date. Don't be afraid to reach out. Once you start doing it, magic starts to happen. The more you start to open these doors, the more opportunity that can come a knocking. That's it, folks. That's it. So tonight, I'm gonna help you button up everything that you need to open all those doors, to start the hunt, to continue the hunt, or to refresh your hunt so you can actually get the job. But before we get into that, you are ready. All right, now how do we not run into this situation where they, they, they

00:11:00
had 400 plus applications with no luck, right? They had 400 plus applications with no luck. It's because they were a dirty, dirty clicker, right? They they they just clicked apply never ever ever ever click apply Just doesn't work Now can you can you get lucky? Yeah, you can get lucky and when I say never ever click apply What what I really mean is you network your ass off You try every avenue to get into that company, to talk to a real living, breathing human being, to get your work in front of people that can actually see it. If you've given it the good old 100 devs try, you've really networked, you know in your heart of hearts, you've done everything to get in front of a real human being, and for some reason it's not working

00:12:00
out, then you click apply. But if you just click apply on 400 plus applications, don't be surprised when nothing happens. Yep, cool. Applying is your last resort, exactly. All right, so what do you need before you start kind of networking your way and you start applying? You need the checklist. And so you can do exclamation point checklist here in chat or you can click the link that's in the slides. Remember this originally came from Stephanie who came for two Mondays. They helped us build out our template replies list. You can do exclamation point templates if you need those templates. So thank you Stephanie for helping us put this together. It's everything that you need to pass the initial sniff test, right? Your about you, your portfolio, your resume, your GitHub, your Twitter, your LinkedIn, your AngelList, your cover letter, your cover email. It's all here with

00:13:00
check boxes so you can follow along with examples that you can follow and it's everything that you need to be ready for the hunt. Now, I have a slide later on. One of our folks that went on to get a job when they were doing their coffee chats, one of the coffee chatters said, I've had dozens of folks apply that did not have this stuff. Right? They legitimately didn't have their GitHub set up. They didn't have their Twitter set up. They didn't have a portfolio. They didn't have a resume. So when you see on LinkedIn, 300 applications to a job, you know, 280 of them are just clickers. Right? They're just clickers. All right, they're just clickers.

00:14:00
Who applies without a resume? This person. This person applies without a resume, but here's what they think. They think they have a resume, but their resume is hot garbage. Hot garbage, right? they talk down about themselves, they don't highlight their skills or experiences appropriately. And so even though they might have a resume, there's grammatical errors, it's a dumpster fire. Right? And they're not following an appropriate template for a resume. They just kind of grabbed something off of Canva and ran with it. That's not how this works, folks. ATS is looking for very specific things like the automatic automatic systems that are looking through it. Recruiters are looking for very specific things. So who's not applying? It's not that they're not applying with it. They just didn't put any thought into

00:15:00
it. They didn't put any, they didn't put any logic into it. Right. Right. So grab the checklist, has everything that you need, right. Has everything that you need to make sure that your hunt is set up appropriately. Now, before you go off the deep end, before you even start working through the checklist, the most important thing you need to think about is crafting your story, right? Crafting your story is a very simple concept, but it's hard in execution. You're trying to answer the question, why are you here? when you show up for an interview why are you showing up for this interview what is the plausible reason that got you from where you were

00:16:00
to where you are now you don't want to show up to an interview be like well I need money so that's why I'm here You need a story that helps you pass the sniff test. Why are you the most amazing engineer? How have your background, your skills and experience made you the best engineer for this job? I don't care what you did before. you can craft that into a plausible reason as to why you're the best engineer for the job. Somebody put a job in chat for me, please. Just throw a job in chat. Like a non-coding job, bartender. All right, bartender was the first one I saw in chat. Somebody give me a company, like a random tech company.

00:17:00
Oh, y'all went, it went too fast. The second time. Twitter. I saw Twitter. All right. But it was the first one I saw bartender and Twitter. So off the dome, how I'd craft my story. Over the years, I've had the privilege of working with great software and horrible software. In my last opportunity, I had to use a point of sale system that continuously did not work. I would enter in orders, I would enter in drinks and it would never work for myself. It would irate me and it would upset my customers. I decided then and there to learn how to write better code to fix these point of sale systems so that individuals could

00:18:00
have the best experience. Right now, I know that Twitter is on the precipice of designing new experiences for their users. You're testing things like the edit button and things that will fundamentally change discourse on the internet. I wanna be at a company where I can put together my past experiences, building wonderful UIs that delight users, that make people happy and bring that same skillset and experience to Twitter. Why are you here? Why are you here? You need that story. You need the ability to talk highly about your past experience. I don't care what you did before. There is a way to craft that

00:19:00
in a way that makes you a better engineer today. Cause I'm telling you the folks that you're going up against, the folks that are coming out of these four year degree programs that don't have a hundred dollars project that haven't worked with real clients that don't have real professional experience, you should be dancing circles around them, your past experience, right? that your past experience is the difference maker. It's the thing that's gonna set you apart, not hold you back. So crafting your story is the first thing that you need to invest some time in doing. Stephanie did say that they're gonna come back and help us craft a story. So we'll get that scheduled for one of our Mondays. But that's the first thing you need to spend your time on. Why are you here? because that story, that's the first sniff test. Anyone coming out of this program has a smell. You have the boot

00:20:00
camper smell, right? Right? You have a boot camper smell. So how do you get rid of that boot camper smell? smell while having a well-crafted story that doesn't highlight that you just learn how to code that doesn't highlight that you just learned javascript four months ago like none of that gets highlighted your skill set your experience the things that you're able to do time does not matter what can you do what have you done and what could you do for that company that's what matters and that's what you need to highlight. And that's why crafting your story becomes so important. How do you adjust your story for different companies and different sectors? That's the hard part. You should have a different story for every company you apply to. Now you can mold

00:21:00
that UI example to be a bunch of different companies, but when you're talking to a recruiter, when you're talking to that first gatekeeper for that company that you're trying to apply to, you want a well crafted story that explains why you showed up. Why are you here? It's not because you just completed a boot camp and you want a job. It's because your past skill set and experiences align with the opportunity in front of you. Right? You have to be doing these things that reduce your smell. Do not put junior anywhere in your title. Do not put aspiring on your Twitter. If you write code, you're a fucking software engineer and your online presence should reflect that. Don't snitch on yourself. Don't undersell

00:22:00
yourself. You all have amazing projects. You've worked with real clients, committed real codes, real open source projects. You've built some amazing stuff. Do not sell yourself short. The hunt is not the time to be humble. The hunt is the time to put your best foot forward to do everything you can to reduce the smell and to get a job. Leave humble at home. Exactly. Cool. And something important to remember that first sniff test is really to get you to the nerds, right? A lot of times in the process, there's a recruiter that's in your way. There's an HR person that's in your way. There's somebody that's trying to qualify whether or not you

00:23:00
are worthy enough to interview. Those first persons really have no ability to evaluate whether or not you go to the next round. Right? I mean, sorry, whether or not you get hired. They're kind of just there to make sure that they're not putting too much of a burden on the nerds that actually will do the evaluation as to whether or not you're a good fit. And so there are a lot of things you can do that pass the sniff test, right? No person ever got in trouble referring someone to the engineers that graduated from MIT, right? That just passes the sniff test for you, right? And so what you have to think about are what are the things that are gonna help me pass that initial sniff test so that the person that says they were worthy to go talk to the engineers, knew how to code, right? That they were a good software engineer. What are those

00:24:00
things that you show up as, that you talk about yourself as, that they say, you know what, you should go on to the technical portion of this interview. Things like a well-manicured GitHub with your green squares. Does it work for everyone? No, but does it work for some? Yes, they see that you're pushing code every day. Pass the test. They see that you have amazing projects in your portfolio. Pass the test. Will everyone look at your portfolio? No, but some might. Do you have real clients? Yes, you pass the test. Do you have real people that could talk about your engineering skills? Yes, you pass the test. There are all these things that you could be doing that help reduce that smell. And that's what we're talking about tonight. The goal is to get to the nerds. Once you get to the nerds, It really comes down to two questions. Can this person code and do I want to work with them for the next two years? Can this person code and do I want to work with them for the next

00:25:00
two years? That's it. That's what they're trying to surmise. Once you get past that original person, once you get to the nerds, once you get to the technical folks, can you code and then we'll work for the next two years. And the beautiful thing is you can game either one of these. You could be really great at coding and get the job. You could be really great at the person wanting to work with you for the next two years and also get the job. The reason why we talk through prep, the reason why we talk through the ways that you go about these interviews that we're going to get to in a little bit is because each person that you're interviewing with typically has a vote. They get to say whether or not you go to the next round, right? Whether or not you get hired, whether or not they would want to be your coworker. And so when you're in these interviews, it comes down to, can you code? Do I want to work with you for the next two years? And you can play both of those games. Mine was that I got my job

00:26:00
being good at the second one, not the first, but it worked. Hell yes. Yeah, and it's very true the definition of can code varies hugely between different groups of nerds. Exactly. One group of nerds might look at your 100 hours project and go, damn, this person knows how to code. Another group of nerds might look at your GitHub and go, damn, they push code every day. They know how to code. We don't know what each company is going to use as the metric of success. That's why all this is about is opening as many doors as possible. Some people will come to me and say, Leon, no one's looked at my portfolio. Great. You haven't run into the people that care about your portfolio. Leon, nobody's looked at my resume. Great. You haven't run into the people that look at your resume. We're talking about 60 companies. Give it some time. I'm talking about 180 people at those 60 companies. Give yourself some

00:27:00
time and find your group of nerds. Some interviews go horrible, some interviews go well. We had, well Blob mentioned it during the tea spill, but we've had engineers that one day they completely, they cried in an interview, were made to cry in an interview and then the next day got a six figure offer. That person did not change from Wednesday to Thursday. Why was one interview hell and the other interview heaven? They did not change in less than 24 hours. It's because different companies test different things. Different people work at different companies. You're going to find a fit. The reasons I say you apply to 60 companies and not apply network your way into 60 companies is because there are 60 different cultures there are 60 different groups of

00:28:00
people you find your fit and that's when this stuff goes well it's a numbers game you're playing a numbers game do not get upset at yourself because the first 10 don't go your way you just haven't found your people yet just takes one it just takes one out of the 60. Some folks get lucky. It's the first one they ever do. Some folks do 55 and that's when they find it. Cool. Now, one of the first things you need to do, one of the first few doors you're going to open that reduce the smell and make it likely for you to make it into the initial rounds of interviewing or your portfolio, your Twitter and your LinkedIn. in. Now, Telescope Thieves, who went on to get an amazing job, they had something to say. And I kind of mentioned it a little bit earlier. Just had a coffee chat,

00:29:00
was told they see so many applicants with empty GitHubs, no portfolios, and no projects under their belts. We're on the right track, y'all, and definitely giving us the cheat codes. I agree with this. wholeheartedly, you know, how I know that this is true. You want to know how I know that this is true without a shadow of a doubt. It's because I've been asking the 1300 people that are here for, for months to push to get hub every day to have a good portfolio and to build a hundred hours project and um some of you don't have it done. So when you've been in a program that asks you week after week,

00:30:00
month after month to do this stuff and you're not doing it, how is some poor sucker off the street getting it done? It just ain't. It just ain't happening. So that means when you do it, when you have the portfolio that's popping, you have the Twitter that's looking good, you have the Lincoln that's standing out, Right You're putting yourself ahead of the pack Not all the way to the front, but you're running it with a different group of people You ever watch like a ever watch like a competitive race Right. There's two packs Right. You have the folks that are actually trying to win the race and everyone else You at least want to be in the group of folks that are trying to win the race Don't be in that group of folks that don't have their

00:31:00
portfolio their Twitter their LinkedIn their github all that crap. You're still running But you ain't gonna get anywhere. You're not gonna win nothing. Why put in all the effort? Why put in the work? Why are you still running if you're not gonna do the stuff that's gonna literally help you win the race It makes no sense. Just stop. I don't hope you stop I hope you do the things that you know, we're gonna open the doors I hope you do the things that you know are going to be the difference in getting the job Run with the front of the pack All right Run with the front of the pack run with the folks that actually want to win All right run with the folks that are gonna get the job done Get this stuff done. It helps you open the doors and I'm gonna say it and I'll be the first person to say it You don't need to open every door But the more you open, the more you open,

00:32:00
the more likely you are to get a job. Yeah, Dr. Thomas, exactly. Winners win, losers lose. It's a really rough saying. Some people really take this saying to heart and I wish I hope you understand what they're trying to say. Winners find a way to win. Did Jeff lose? I'm gonna I'm gonna fucking cry. Did Jeff lose? No. Because winners win and losers lose. Jeff had every log thrown their way. Every log thrown their way, months in

00:33:00
between interviewing, but winners win and losers lose because losers give up. That's it. That's it. Winners find a way to win. That's it. That's it. There's this can't say it no better winners win losers lose winners find a way to win Jeff was our last tea spill For folks that missed the tea spill Jeff had some things come up in life. They they stopped the first cohort. They joined the ketchup crew They they they they had a lot of things that got in their way but winners win and losers lose. Jeff found a way. Did Jeff open all the doors I'm asking you to open? No, they found the ones that made it possible for them to win.

00:34:00
So I'm showing you all the frickin' doors that I can. It's up to you to figure out which ones you wanna open. Well, it starts off with your portfolio, your Twitter, your LinkedIn. Uh, blah, sorry. Here's blah's portfolio. Beautiful portfolio, full stack software engineer, uh, beautiful website, a good about me. Why are they here? What are they doing? Projects that they've worked on the things they could do for you. Right, uh, and at the end, uh, you can see that it was a template. Right? No need. If you're not a designer, use a fucking template. That's it. You don't need to, you don't need a big brain. It, you don't need to overthink it. Yeah. Yeah. Tell them about themselves. May May sunflower.

00:35:00
Uh, it should be saying senior software engineer, blah. Come on now. Senior software engineer. Right completely free You just grab it plug in your stuff You got yourself a portfolio and I love this portfolio because not only did it help them get a senior Software engineering job for their first engineering job, but it also helped them land a thousand dollar client off the rip Not not anything wild free template beautiful portfolio Great client, amazing job. Don't overthink it. Twitter. Twitter is a powerful tool to help you find a job. I love Jeff's Twitter. I think it's pretty simple. And kind of just has a nice photo.

00:36:00
Jeff, developer, photographer, animal lover, cheese guy. It says what they are, what they do, what they're into, what they do with their free time. I love it. I love that it says cheese enthusiast. That's gonna, I'm gonna be interested in that. What is a cheese enthusiast, right? That's something we're gonna talk about. You don't have to overthink it. Simple, to the point. Fill it out. Say what you do, what you're into. Make it look good. Don't have just like a blank background, right? A little bit of effort. Yep. And don't waste time redoing perfectly good portfolios, good call blah, get it done and move on with the hunt. Is Twitter really needed? Yes. It is a door that you can open. Does everyone open it? No. But it's a really important door because a lot of developers, a lot of developers hang out on Twitter. It's

00:37:00
an easy way to network with individuals. The trick that I've taught, or I showed you what I do, is I have private Twitter lists. I put every person that I'm trying to network my way into, like to get a job, on that private Twitter list. I start liking their posts. Retweet them every once in a while. Leave a comment. You do that for a couple of weeks, you went from a nobody to an acquaintance and acquaintances get their DMs read. So is Twitter necessary? It's a door that you can open. I think it's a really important door. It's the easiest way I know to turn a massive amount of developers into folks that will actually give you time of day.

00:38:00
Twitter has helped me meet and connect with lots of devs. Yes. It's just the, it's just the easiest. It's just the easiest way I know to interact with a lot of folks quickly and build up that rapport with individuals, especially in tech. So is it necessary? It's a door. I think you should open it. I think you should take it seriously. I think you should build private list of all the folks that are on your hit list, which we'll get to in a little bit, um, that you want to reach out to, that you want to engage with and start engaging with them, just like leave some comments. Get on their radar. And when the time is right, you can reach out via DM. Say, Hey, I saw you have an open position. I would love to chat about the role. Boom. Coffee chats. Amazing Twitter. So easy to find folks and talk to folks and get coffee chats to build up that network. Twitter feels more social compared to LinkedIn. It is. It's, it's way more relaxed, right? It's way more relaxed. It's a little bit easier to interact

00:39:00
with folks. Um, Sam I think is a masterclass on this. I know Sam is stepping away from Twitter now. Um, but if you just go to their Twitter and like, start from the beginning, like I'm dead serious. If you want a masterclass on how to do Twitter right on how to like grow a network, uh, to meet other developers, Sam is the best I've ever seen in the whole wide world. And they, they started with a hundred devs and really took the Twitter very quickly. Go to their profile, start at the beginning and look at the tweets they sent. Look how they interacted with people. Uh, it's just, it just really is worthwhile to spend that time. Yeah, hey profits. And then last but not least is LinkedIn. You want a decent LinkedIn. I just don't wanna pop up somebody's message. I'm gonna open this over here real quick.

00:40:00
So Nick was one of our other T Spillers. I think they have a pretty solid LinkedIn as well. And so it's all linked here in the slides. I love that they put software engineer right in the, right in the title. Um, they're connected with a lot of folks. Um, they put their, what they do, where they're based, all the stuff that we actually do, like the stuff that's in the, uh, resume template they put into the LinkedIn. Uh, they shared some important stuff. Uh, they list a hundred devs. They list some of this other stuff they've done in the past. And then what I also love is that they've joined the 100 devs, right? They joined the 100 devs group on LinkedIn and they asked folks for endorsements. So did a recruiter ever get in trouble recommending someone that had 60 endorsements for JavaScript and

00:41:00
59 endorsements for React and 59 endorsements for Node.js? Nah. What up, Nick? Hey, hey, Zeus. Nah. So get on the LinkedIn group and say, hey, I would love to be endorsed for JavaScript React Node. And we see somebody They post it, boom, hit it up, that's it. If they're in the 100 devs group, do they know JavaScript? Yes. Do they know React, the basics? Yes. Do they know JS? Yes. So is it hard to recommend somebody for those three things when you know they went through this program and did all three of them? No. Boom. So go through and do it. And they got 20 other skills too, which is pretty dope. So I think this LinkedIn is a pretty good LinkedIn. Definitely go through it, make sure yours mimics this.

00:42:00
I also shared Danny Thompson's LinkedIn course. I really do recommend it, it's completely free. It'll walk you through all the things you need to be thinking about when setting up your LinkedIn. I need a, I need a, like a nightbot command for that course. But it's on Discord, I've shared it before. Make sure, you can just go through Um, the follow on materials channel search for LinkedIn and it'll pop up How many linkedin endorsements is too many? There is no such thing as too many Yeah Is that a youtube course yeah, he has it on youtube it's like four videos Where he shares like all the most? um all the most important stuff to think about when going through linkedin, so Yeah Oh, we checked under every LinkedIn group for folks who are waiting. Yeah. I added everyone last week. Uh, so if you just recently, um, signed it up, I'll check after class to get most folks in. I do not accept you if you do

00:43:00
not have a profile, like if you don't have a name and a photo, I don't accept you, Hey, reviving Julia. That's awesome. First time chatter. Thought I'd share, I'm in the ketchup crew. Your info, especially stuff on passing the sniff test and getting socials in order, got me a $3,000 freelancing client. That's huge, congrats. First ever money I made from coding, boom. Packet Discord said, tons of people are adding me on LinkedIn without a message. Never, ever. Oh, those clickers. Don't ever add somebody on LinkedIn without a message. even if it's just, hey, we're both in a hundred devs, loved your profile, send a message, let them know why you're adding them on LinkedIn. Your LinkedIn, if you got anything, if you got anything from my

00:44:00
speed run classes, what was the one thing that you just kept seeing in my speed run classes? What did you see? Like every single time I was finding somebody a job, I was looking up a job, I was looking for people that worked at that company. what did you see every single fucking time? Yes, I was sending them personalized messages, but I was connected to them already. They were always second connections. Almost every single person I pulled up, random people from random companies I was connected to. I treat my LinkedIn like gold. I add folks that I know so that when I see that I'm connected to someone, I can ask for the connection, right? Treat your LinkedIn that way too, right? If you actually know somebody from 100 devs, then add them. Like if you worked on a project with them, if you've met them in voice chat, don't just randomly add them. Like having more people on LinkedIn

00:45:00
doesn't really do anything for you. But when you can use it as a real network to get intros, that's a whole different story. Cool. And last but not least, before we move on, we're going to take a break. We can take a break here. When we come back, I'll talk about kind of the things we just covered. So we're at the top of the hour. If you're new around these parts, we like to take a break at the top of Every hour be healthy if you are able Right, if you're able, please get up move around hydrate take care of yourself Taz express 2022 gave me a hydrate. Thank you Mid mule and player o 9x. Give me a posture check. I'm gonna get into that only JCS. Give me another hydrate. Thank you And and Governor gave us a two minute extension on the first timer. So this

00:46:00
will be a, not a five minute break, but a seven minute break, folks. Please, if you're able, go look out the window. Go tell somebody you love them. All right, so we talked about kind of portfolio, Twitter, LinkedIn. Now we have the portfolio piece. So here's my little bit of code for you. If designer equals true, then go ahead and design your portfolio. If not, use a template, right? Somebody says, you're a developer. Why did you use a template? Cause I'm not a designer. My designs look like garbage. Do you want somebody that makes garbage designs or somebody that can build amazing products. Cause I can build amazing products. My designs just look like hot garbage cause I'm not a designer. All right.

00:47:00
So templates, the place to start is HTML5up. They just have free templates. They're not shady. Like they don't have like weird stuff. Like, I don't know. There's a lot of places when you try to download templates you always wind up with like an extra buddy on your computer. And so I like this site, they're free. Once you get a paid client, I am definitely a fan of using better templates. Theme forest has a lot of them, depends what you want to use. There are a lot of like tailwind templates down, stuff like that. So there, these are like the only places to find them, but just kind of like once you get a client and if you have some of that money coming in from your client work and you want a better template, you can, but this is totally fine. People get amazing clients, amazing jobs with just HTML5 templates. So don't, don't stress it. Uh, hosting for your templates, uh, for your, for your basic portfolio and stuff, just use Netlify. Netlify.com slash drop is super easy. You literally drag

00:48:00
your folder onto netlify.drop and it hosted instantly. Um, you don't need to buy a domain. Uh, you can just use the netlify.app. Um, one of the examples I always give is Sean, um, RC alumni, and definitely helps a lot of folks here at a hundred devs. Uh, they famously got an offer at Amazon and an amazing client just using the Netlify domain. Like it was just the Sean, uh, like Sean Charles at netlify.app and that got them a job at Fang and an amazing client. So you don't need to buy a domain. You can use the netlify.app for whatever. are completely free to host and to use that domain. But if you do wanna buy a domain, name cheap and I want my name where I think you should get your domains from. But once again, this is a completely free program. Do not pay for anything. You do not need to buy a domain. You can

00:49:00
just use netlify.app and it works just as fine. Nobody cares. Cool. So next bit of things that we need to help us pass the sniff test is the resume. So the resume is pretty interesting. I've given you this example resume here, this Bob Coder. You'll notice that it's a doc X, never use doc X. Always, always export this as a PDF. I just use that so that it's easier for folks to edit however they wanna edit it. Um, this resume just fucking works. It just works. It just works. You don't need to use something else. It just works. Right. And so, uh, I think a lot of folks say, Leon, like my, um, my resume is holding me back because you're not using the template, just use this template. It resume, it just

00:50:00
works. Your resume should be one page and it should be this thing. This resume has tables. It does not if you save it as a PDF. It does not have tables I don't know where that came from It's not true If you can when you go to the PDF and you highlight over it if you see that happen Then you you know that it can be seen by ATS if when you highlight it you see it pop up That's that's ATS approved. I can also show it to you by going to the CV compiler which picks up everything. So CV compiler, they do have a free version and that free version, that free version will show you that it is ATS compliant. People think like ATS is like a fancy thing. All ATS is doing is like yoinking text. And so if you're able to yoink text from a PDF, then your resume is ATS compliant.

00:51:00
So here is the Bob Coder resume in CV compiler. You'll notice that all the normal stuff looks good. There are a few things that we could change though, right? There are a few things that we could change. So I'm actually probably gonna be, I'm gonna probably be updating this a little bit because there are two big things I think we should change. In-demand tech skills, this just changes over time. Um, so they analyzed a thousand vacancies at big tech companies and they found out that there are some technologies that are good to have, and, um, so we probably want to swap in some of these words just to, to, to, to, to make sure we're getting picked up by a company that doesn't actually look at your resume. Right. Some companies don't look at your resume. They just use a computer to say whether or not you're a good fit. So by having these in-demand skills, you can just screenshot this from the video I

00:52:00
would be good things to add whatever you feel like is a good fit or that you want to invest some time It could be a good fit And then the other thing that was a thing here is that these niche skills we have to add some of these And so we're probably gonna figure out how to add some of these we will probably have like an extra class Where we work through this but all the other stuff was was fine Uh, and so I think this is pretty good. Uh, you'll see some stuff that I don't recommend, like the certifications. Uh, I'm not a big fan of putting certifications on your resume. I think that smells. Um, so this is kind of where ATS versus what's going to actually work. And so, um, for me, this resume has been used by hundreds and hundreds of folks that have gotten jobs, right? Literally hundreds and hundreds and hundreds of folks that have gotten jobs. I really do believe that it works and I hope that you use it too Even 80 aws certs. Yeah. No, those are like professional certs. So like professional search you

00:53:00
can keep But things that are like Like things that are just show that you just learn how to code keep off your resume Yeah, like AWS Azure and Google Cloud certs are my exceptions Anything else I don't put on my resume. I think that somebody sees that and it might hold you back. Does it always hold you back? No, but I think for a lot of folks it can. Yeah, no Udemy certs or things like that. So yeah, we might have to change up some of these skills based off of what the CV compiler is saying. The link to CV compiler is here in chat. So once you fill out your resume, you definitely wanna run it through CV compiler. It's free, like you don't pay, like don't pay. Like there is more stuff that you can see, right? Right, there's more stuff that you can see if you pay, but you don't need that. Just make sure that it passes the basic checks that they give you. If you're

00:54:00
wondering what CV compiler would say you need help with, it's this stuff. Pause the video. It's this stuff. Pause the video. This stuff This stuff This stuff This stuff This stuff There you go, that's everything y'all cool So If you use this resume template you pass the CV compiler after you're done editing it You'll know everything that works and that you are picked up on it. Cool. See you compilers get a hug of death Yeah, I think we sent a lot of people that way

00:55:00
go All right cover letter. There's another example. It's in the template. Sorry. It's in the checklist So in the checklist, it gives you an example of it But if you need an example of a cover letter, I got you here you go Cover letter that you can you can work through It's all there for you Let's real quick before we go on to the cover letter. I do want to take a second to talk about the resume I kind of just showed it to you, but I do want to talk about it real quick You'll notice that How long we talked about this a lot? How long does a recruiter or or the initial gatekeeper spend reading your resume? On average. Six seconds. Six seconds. All right.

00:56:00
Hmm? Timer. All right, you tell me when we hit six seconds. All right, creative detail oriented software engineer with a deep interest in AI, proven track record. You

00:57:00
Brah oh you get That's all you get. And it's all you need to know. I'm a creative detail oriented software engineer with a deep interest in AI and a proven track record. Boom. That's it. That's it. If you have something like I'm an aspiring junior engineer. Bruh. Bruh. Nah, get that shit out of here. They got six seconds to figure out who you are, what you do, right? Let's try it again. Ready, I'm gonna, you tell me when six seconds are over, chat. I'm gonna start at software engineer and work my way through. I'm gonna skip the summary. Software engineer, software engineer 100 devs. They built a

00:58:00
company for some coffee company. They're a full stack developer at some consulting agency. So in those six seconds, I saw that you're a software engineer. You worked as a software engineer. You did some consulting. Do you go on to the next round or not? Right? Like you got to think about this. It's not just the computer that you're playing, right? It's not just the computer that you're playing, right? It's not just the computer you're playing. There's also the way that you structure your resume, you're, you're, you're, you're going up against the recruiter as well, right? You're going up against a recruiter as well. And so you got to think about what they're going to see. You're going to notice that I

00:59:00
have very quickly, My experience is at a hundred devs. I have my projects that look like real companies, right? Right that like when people when you put your projects don't be like Uh an app I worked on during class time. No Frame it as though as a real company, right? Just like it just just give it a name hip coffee co Happy notes, we did a to-do list happy notes Right, give it a name. Right, give it a name. Even like in other projects too, like a lot of stuff that we did, right? It's the way you talk about it. We built a slot machine. Don't call it a slot machine. Call it a small lakes casino virtual slot machine. We built a NASA API. Don't say, don't say NASA API project. No, it's the Los Angeles Stargazer Society, a picture of the day web app with NASA

01:00:00
API integration. If you were here for the very first JavaScript class, you built a background picker for a YouTuber. That YouTuber was me. So you made an on-demand background color picker, pick changer for a partner Twitch streamer and many more. Don't snitch on yourself. Don't underplay the real shit that you've done. Give it a name, talk your talk. I'm a big fan of having your projects in line with 100 devs because we saw what six seconds gives you. In those six seconds, the reason I skipped from software engineer to full stack web developer is because I saw that there were some real looking projects on here, so I didn't have to actually read them. I just jumped to the next thing. And in those six seconds, I saw two

01:01:00
experiences as an engineer that enabled me to be like, Oh, okay. This person's probably an engineer. Passes the sniff test. Yep. And then you put the other stuff you went here. I'm a big fan of having a volunteer section. And then the big thing people always stress about is their education. Um, you don't have to put the dates of your education. if you don't want to, right? And then if you're just spending six seconds on this, what are you noticing about this right away? I purposely let something off here. I didn't snitch on Bob here. Does this say Bob has a degree? No, Bob does not have a degree from UMass Boston, but their major was business administration. No degree, no graduation date, but if you're only spending six fucking seconds looking at this, would you ever hyper-focus on that? Nah, you wouldn't even

01:02:00
notice it. Right? Would never even notice it. And you don't have to put dates. Dates can be snitching on yourself for a lot of folks. A lot of folks, if you complete your degree 20 years ago, good, don't put dates on there. Will the technical interviewer notice? Probably not. Most technical interviewers do the exact same thing. If they even read your resume, if they even read your resume, they spend six seconds on it. So if you're stressed about what to do for education, boom, that's it. You don't have, you don't have to have a graduation date. You don't have to have your degree, right? That's it. Beautiful.

01:03:00
Cool. All right. So that's the, the, the resume there. I'm a big fan of having a hundred devs and then you're freelancing separate. And then any other job that you think is worthwhile to put on there, have real targeted goals, like things that you actually did. Numbers are better. Yeah. All right. Cool. Cool. Cool. And I love having at least one like tech-related volunteering in there. So many conferences are coming up, just volunteer for a conference and throw that on there. It's just good to have a little bit of something tech-related that's not job-related on there. It just gives you something to talk about. A lot of times when I'm in interviews with folks, they're like, oh, you went to the free software, like you went to LibrePlanet, which is their conference. I'm like, yeah, I was there like, oh, and that just gives you something to talk about. Cool resume. We talked about cover letter, get hub, get hub, please

01:04:00
use the profile generator, make your get hub look good. Your get hub should have nowadays with get hub. You can have a beautiful read me file for your whole profile so that your get hub looks great. Right. If you ever saw somebody's GitHub and it's like, whoa, this GitHub looks dope. They were probably using some sort of generator. And so this generator will help you figure out like what to put, like what you want to do, right? So hi, you put your name in, you put the project that you're currently working on, you put a link to it, you check off the skills that you have, right? And you can put in all your social links if you want, and then you just generate it and it'll give you a file, right? it'll give you a file that you can add to your GitHub and that'll give you just like a nice, a nice GitHub profile that looks good. It looks good. It has been real

01:05:00
Lord. I appreciate that. And then the other thing that you wanna do is you wanna use this readme template for every single project, for every single project that you have on your GitHub there should be a beautiful readme for it and you have like what it does a link to it live you have a gif record a gif of your project so that it's like moving and looks good right put the technology that you use so you're getting picked up by the sweet sweet robots and then my favorite part is the optimizations you don't even have to code the hard parts just say the stuff that you would have done had you had more time right shows that you know what it is you just didn't do it yet. Cool. And then the last thing is like, give them other examples to click through to. Right? So, right. Give them some other stuff that you could click yet. Some other

01:06:00
stuff that they can click through to. So if they did land on this template, they can see the other stuff that you built. Right? What's the best thing you use to record for those screen GIFs? I use cloud app, which is free. I don't know if that's Mac only, but I use cloud app, it's just really easy. Just like you just grab a window, like you're taking a screenshot and it turns it into a GIF for you. But I'm sure there are plenty of other ones. Some people are saying ShareX is free, PicPic, OBS, yeah, if you just do like a screen recording if you wanted to, screen to GIF. There's like a couple of ones that people are recommending. I mean, I don't know any of those except for OBS, but I use CloudApp and I guess I've done it in OBS before too. TJ kinda saying, don't use GitHub Streak Generator though, if you've backdated your pushes on the generator, it'll tell on you. Yeah, so the other thing that we're trying to do with our GitHubs

01:07:00
is push every day. And the reason why we push every day on GitHub is because recruiters love those green squares. They do, they do, they do. And so you want a GitHub that has, every single day it looks like you push code, right? And on GitHub, every day you push code, you get a green square. But some days you miss a push, or some days you realize you haven't pushed in a month, and you want to backdate all those green squares, you can do it. Shout out Hello's Rufio. Hello, it's Rufio, an illustrious member of the stream team has a VOD on how to fill in your green squares if you don't know how to do that. Rufio, Rufio, Rufio. And so you can watch that VOD if you missed a few, but those green squares are really important because no recruiter, no recruiter ever got in trouble, no recruiter

01:08:00
ever got in trouble recommending somebody that pushed code every single day. Think about that. They recommend somebody to the next round and the person says, this person was horrible, like they didn't know how to code at all and the recruiter goes, oh, they pushed every single day to GitHub. That's it end of story. Oh, I guess well, that's weird. I don't know what's going on then, right? Like so it's one of those things that's one of the easiest way to Pass that sniff test Right Now does every single recruiter care about it? Obviously no, but the ones that do Oh boy Oh boy When they're looking at two candidates, one candidate has a dusty-ass Udemy tutorial from 10 years ago, and you

01:09:00
got pushes every single day, who's going to the next round? You are, my friend, you are. Had a coffee chat with a dev when they saw my green squares deal. He said, no, that's bad. It's because they feel bad that you're a better engineer, pushing more code, doing more work, getting more things done and it makes them feel bad about themselves because they can't keep up with your productivity. They got got. Now, the next thing. The next thing is you want 100 hours project. Your beautiful MVPs are due. Technically, the whole project is due, but what are deadlines anymore? This is the penultimate class. Who cares? Um, your a hundred hours project is the

01:10:00
culmination of what you're able to do. Right. Of what you're able to do, what you're able to build, the things you're able to accomplish. It can be something that ties your past into your present. and it is the thing that comes up the most, honestly, in your interviews. It is literally the thing that comes up the most. If you've come to any of the T Spills, most of the folks that were getting jobs didn't even have technical interviews. Because all this shit was in a row, lined up, button on top, ribbon tied. Do they have a portfolio? Pass the sniff test. Do they have a good GitHub? Pass the sniff test. Do they have real big projects? Pass the sniff

01:11:00
test. Do they have real people that they work with, real clients? Pass the sniff test, right? What you have to realize is that all these things are opening doors and when all the doors are open, you can fit an elephant through. And so that a hundred hours project you need to have done is the culmination of your work. It's taking a hundred hours to build something that's your own, that you can talk through from beginning to end, that you can show all of your knowledge off, right? And it comes up the most. So many interviews will say, Hey, show me projects that you've built. Oh, I saw on your GitHub, this was your pin project. Tell me about it, right? This is the thing that gets jobs. Don't be this person. Don't be this person. This person we know didn't have a good GitHub, didn't have a hundred hours project, didn't have real

01:12:00
clients, didn't have a well manicured portfolio, didn't have a beautiful resume. This is the person we're talking about. Thank you. Blah. Don't be this person. Right? All these things matter. Wasn't as dope of us. No, you're built different. I just, I just want to get into your brain. How fucking awesome you are. I don't know how to, to like, to, to get the, I just, I just want you to believe that because you are, you're going up against chumps that don't know what they're doing. That think that they spent four years fucking around to get a degree that don't have any real projects in their portfolio is enough. It's not enough. show me your projects,

01:13:00
show me who you worked with, show me the real clients you worked with, show me your pushes, you're going up against scrubs and on TLC, I don't want no scrubs in 100 devs because you're not, we're built different, we've done the work, we've done what we needed to do, We're not this person. All right, now, once you have all this stuff, your groundwork has been laid. You're gonna be able to get past that first person. You're gonna be able to get past that first sniff test. You need to start opening up doors into companies. And the most important thing that you will do

01:14:00
like outside of like once you have your professional stuff set up literally the most important thing you will do is your hit list. Hit list gets jobs. If you've done if you do nothing else other than get all your professional stuff all your projects done and then do a hit list, fuck coding challenges, screw leak code, code wars don't matter. If you just built up all the stuff we've talked about thus far and then dumped every last waking moment into your hit list, you would get a job. Because networking your way into an opportunity counts way more than anything else. getting your stuff in front of a real human being that can see your real projects, that can see your real experience, that can see the things that you can do, that's why we do the hit list. So the hit list is probably the most important thing you will

01:15:00
ever do for your career. And you start off by using the sheet. So you can do exclamation point sheet inside of chat here. You'll have your general networking, but there's also the hit list. We've done two classes where we've done the hit list live. I set the world record price. I still have the world record, folks. I haven't seen anybody break that world record yet. And guess what? In a couple weeks, probably I'm gonna do it again. I'm waiting for folks to break it. I want somebody to break it. I still owe somebody their hit list, so I'm gonna give y'all a week or two to break it, and then I'm coming for y'all. I gotta be the two-time world record holder, right? And so I threw down the challenge already nobody beat it. I mean, it's a hard let's be real. It's hard to beat that record But as soon as it's broken, I'm gonna do another one to show that I'm on that guy And I also owe somebody their hit list. So person I owe for your hit list. We're still gonna do it Just give me a little bit to dunk on someone

01:16:00
It's hard it is hard it is hard that's why we did it live I wanted to show you how I did it and we added all those companies in that short period we did add it 30 companies in one class session that's wild so the way that the hit list works is you find a company that has an open role and then you find the people that work at that company right your goal is to network your way in to 60 companies that have open roles right where you're not just clicking apply right where you're not just clicking apply right you're not just clicking apply you're networking your way into 60 companies you're going to find the hiring manager at that company if you can you're going to add them to your hit list you're going to follow them on twitter you're going to find their email on hunter.io

01:17:00
you're going to ask for a coffee chat you're going to send a thank you you're going to get the recommendation to that job. If you don't know how to ask for a coffee chat, you don't know how to send a thank you! Exclamation point template here in chat! Exclamation point template here in chat. It might be templates. Is it template or templates? Yes, templates. Here you go! Exclamation point templates in chat. Thank you. Stephanie. How do I send a coffee chat request? Boom. Look at these messages. You can be sending. How is that? A thank you note. Boom. Here's how you can send a thank you note. How do I ask for an introduction? Boom. How do I follow up? Boom. It's all here, folks. It's all here. What you waiting for?

01:18:00
It's all here. And if you want to see 40 messages that I sent, 40 messages to real people, the actual messages I would send, right? Go watch the previous two classes here that are VODs on Twitch, right? Both those classes have the 40 different people I reached out to, 40 different messages, exactly what I would send. Use that as your springboard. or figure out how you could tweak those messages to be the messages that you need to send. And then don't overthink it. Don't overthink it. It's 180 people. You're gonna get ghosted by most. You're gonna get ghosted by most. That's okay. Are those classes on YouTube? Not yet. They will make it on there eventually. YouTube always lags behind. It's just a lot of pain in the butt for me to edit stuff and put it up But all

01:19:00
the VODs are here on Twitch So you can always grab the VODs on Twitch. They may get over to YouTube because I don't monetize my YouTube So there's no ads on YouTube So yeah Twitch, I think Twitch runs ads in the VODs which kind of sucks. But yeah on YouTube I don't monetize any of my videos so you can watch all the videos ad free and they eventually make it up there It just takes me a little while to get them up Most will ghost you. You gotta keep that in mind. That's okay. We're playing the numbers game, folks. Numbers game. You find the hiring manager, you can't find them. You find an engineer on the team. You can't find an engineer on the team. You find the recruiter. You can't find the recruiter. You find their mama. And you set us up for a coffee chat, right? All right, you're trying to find these folks. So let's do a live, let's do one. I know we did two classes on, let's do one live. Somebody give me a location.

01:20:00
Kinetic, what was the first one? The first one was actually Denver. Let's go to Denver. Let's go to AngelList. AngelList or angelco.jobs. There we go boom. I have like an unreasonable fear of typing in AngelList because of AngelFire. Anybody remember AngelFire? AngelFire was like a competitor to Geocities. Anybody remember what happens if you misspelled AngelFire? Did anybody have this memory or is it just me? Yeah it just took you to a porn site. It just took you to a porn site. So I remember being

01:21:00
like on the library computer trying to go to Angelfire, mistyping it. I'm trying to go to my Harry Potter Dragon Ball Z fan site and some stuff popped up and That memory is just forever emblazed in my mind because I think I spelled angel angle or something like that. It was a typo. Yeah. Memories. All right, let's change this to Denver, Colorado. We're gonna make sure that there's no, we're gonna turn off the remote job. We're just gonna look for local. I have, if we look at my filters, I am filtering out senior lead staff principal manager director just like I don't want to see those I'm looking for entry-level roles so I filter those out looking for a JavaScript node no JS you don't have to hold yourself to that it's gonna filter out a lot right now

01:22:00
we see a back-end developer role full stack engineer, uh, Kevin Davey is listed as the, the contact. Uh, they don't have anything here, but maybe we can find them on LinkedIn. Kevin Davey on LinkedIn, or we can even say, what was the name of the site? Sticky leaf. They link it. If you leave co. All right. All right, so what I would do right off the rip is we could take Sticky Leaf Co. I don't think it'll probably come up in Hunter, but we can try. Dream job. Whoa, what's this? New domain search. Okay, come on, you're killing me live here. All right, they didn't have any results. I'm pretty sure that

01:23:00
it would probably just be Kevin. Kevin at sticky leaf co and so I would send an email to Kevin right at sticky leaf Co and I would say to Kevin This is my dream Dreams do come true would be my would be my headline I saw that you were looking for a full stack engineer on angel list. I Am in the Denver area. I feel like I could be a really good fit for this role So please respond, I'm desperately waiting for your response, please respond, I would love to connect about the open roles in the next coming days, right? Boom. That's it. It took us what? 30 seconds to find that it was Kevin, stickyleaf.co, send an email, right? And you shoot it off, 50 to 70K, but they're giving up 3% equity. If that means anything to you, it shouldn't. Equity almost never

01:24:00
matters. You shouldn't really you should like take it off the table when considering but I don't know what the Denver market is 70 might be low, but Who cares you don't you don't pre-qualify the leads get the offer and then negotiate Get the offer and maybe you don't wind up going the sticky leaf Maybe you wind up going to Josh AI But you have a 70k offer for sticky leaf and you go to Josh a hey already got an offer from the Denver area Is there any way that you can get me closer to that 120 that you listed on the job application, right? I already have an offer, but Josh AI is where I want to be. I can't see myself working anywhere else besides Josh AI. Is there any wiggle room to get me closer to the listed amount on your application? That's it. So don't ever pre-qualify based on how much money, the language, don't do any of that. get the offer, and then you can negotiate.

01:25:00
Right, that's it. If you wanna see the real examples, the real things I would send, the real letters, all that stuff, we did 40 of these in the previous two classes. They're either probably on YouTube right now, if you're watching this in the future, or you can check the VODs on Twitch. Boom. But don't take yourself out the game, let them take you out the game. That's it. Don't ever be a Oh, clicker. All right. Eventually, once you're in the throes of interviewing and you are starting to get, you're gonna be interviewing at 60, right? So those first few interviews are should be ones that you don't really care about, honestly, right? Uh, it should be ones that you, that you really don't, that if you got the job, great, if you don't, who cares, right?

01:26:00
Get your licks in, make sure that you get more comfortable interviewing. You kind of see what the process is really like. And um, once you're starting to interview, you want to start figuring out what are your premium companies, like where are the places where you really, where you really want to Apply and you're gonna do everything we've done so far Plus you're gonna start tweeting at them You're gonna write a blog post about something in their space and you're gonna build a small project Something that takes you an hour to a couple hours. You're gonna tweak one of our past products to be something That's that's kind of in the realm. That would be for that company So if it was sticky leaf, we might take our coffee app and turn that into something else we might take our um, not the coffee app might take like our, our binary upload boom. And turn it into something that enables you to pick your favorite strands and post your favorite strands, right? Like you

01:27:00
could, you could modify that to be something, um, that's more in line with that company so that when they say like, when you, when you reach out, Hey, like I already built an app in this space, would you take a look at it? Cool. Cool. Now, this is everything you need to do to like get interviews, right? To get folks coming, responding to your applications, to get your foot in the door. If you do these things, you will start to get interviews. Now, once you have interviews coming in, there are some things we got to start thinking about. I want to take a second, I want to see if there's any questions. This is like all all the groundwork you have to lay, all the doors I think are worthwhile to open before you actually start getting interviews. And once you start getting interviews, there's some other things we need to think about. Questions. Do you have any specific tips for the remote job hunt?

01:28:00
Well, if you look at our last VOD, we did 30 companies that were all remote. The harder thing about remote is that being local is a competitive advantage because you're going up against less people in a lot of cases. But when you're remote, the referral or the networking your way in is way more important because you're just going up against a lot of folks that probably don't have great applications, but it's still clogging up the works a little bit. But if you can get a referral in, you can meet a real person on the team that carries a lot of weight, even especially remotely. So I think for remote folks, it's really comes down to the networking your way in. What if people you know, what if you know people in companies that are next to CEOs, Can you meet them in person and they say they can help you? Do you need, all you need to do is like resume? I don't really understand that question. What are good questions to ask when they ask, do you have questions for us?

01:29:00
On the bank, you can do exclamation point the bank and in the bank there are questions to ask your interviewer. It even links to a GitHub repo called reverse interview questions that has a bunch more that you can ask during your interviews. What's your strategy against companies who staff recommend you contribute to their repo to be considered? Fuck off. Versal for the $100 project, it can be like the front end if you want it to be. Most people are hosting their full stack projects on either Railway, Render, or Cyclish right now. Cyclish right now, those are kind of like the big three. I

01:30:00
I got a recruiter that called me, offered me an interview. They just want to view a project in the interview. That's it. The tech stack is not MIRN. Would the $100 project be good? Yeah. Do the app that you're most comfortable with that you sunk $100 into. If you want to take the weekend to add a little bit that's closer to their stack, that's a good idea. Like I built this app mainly in node, but I added this piece that was in Python because that's what y'all use at the company Can I expect 30 an hour of part-time employment it depends we had somebody that had a full-time offer but part-time hours that was wild Would it be Lurf learning PyTorch

01:31:00
while going through 100 devs? Absolutely not. Have you ever decided on an alternative? I haven't given my official recommendation, but it's going to come down to Railway, Render or Cyclish. Whatever one works for you the best. Folks are having good experiences with all three of those. I'm just trying to pick one that I can use for the future and hopefully get a deal or two in place for y'all But those are the big three that it's coming down to Cool Any word on hundred maintainers we're gonna talk about that on on Tuesday. So Tuesday's our official last class. Lots of thank yous, and we're gonna talk about the future of 100 devs and how you can help if you wanna help. All right, we're at the top of the hour. So when we come back, we're gonna start talking about

01:32:00
what you need to do when you start interviewing. So everything that we just talked about is getting you to interview. How do you get through your interviews? What do you need to do to play the game well? How do you 360 slam dunk your interviews? leave them jaws agape ready to hire. Realistic timeframe when asking for a coffee chat to getting an offer is different for every company. Some companies, some companies you'll talk to them on a Monday, they got an offer for you Friday. Some people you'll talk to them on a Monday and three months later you're finally finishing up the process. It really does depend on the company and every company is completely different. Alright, so now you got interviews coming in, you're either networking your way in or your LinkedIn is popping and recruiters are reaching out to you. Next is what I like to call how you play the game. All of this stuff is

01:33:00
how I think you can play the game. It's up to you to determine how you want to play it. A lot of nerds get really mad with the stuff I share in this class about like, how dare you tell them to put 100 devs on their resume or there's some other weird stuff that they're just trying to gatekeep their four-year degree and the hundreds of thousands dollars that they spent for no damn apparent reason, because you get a better job than them after a bootcamp experience, right? And so all of this, I like to say, is how to play the game, but it is always up to you to figure out how you want to play it and the things that you want to do, right? The things that you want to do to play that game. It's all about the doors that you feel comfortable opening, cool. I think the most important thing after your hit list is the bank if you did nothing but hit list right if you did nothing but hit list and study the bank you could get a job if you've come to any of the tea spills 95%

01:34:00
of them got the job by answering questions that were on the bank it's kind of freakishly It's one of the best things I ever introduced to my students. The bank has gotten more jobs than learning anything else. Literally, I could probably take someone that doesn't know how to code, help them with all the stuff we talked about tonight, have them network and learn the bank, and I'm pretty sure I could get them a job. Like they don't know how to code at all. I'm pretty sure I could get them a job. The bank gets jobs. So you can do exclamation point bank here in the in the chat. That'll give you the link The bank just has a bunch of questions All right, the bank just has a bunch of questions Funny a I had to see you name change. Okay. I see you. Thank you for the tier 3

01:35:00
21 months at tier 3 that's wild. Thank you so much. Hope you're doing well All right, so the bank has a list of behavioral questions, a bunch of technical questions, and even has some like harder like CS theory stuff you should probably put into your repertoire. And then the questions that you could ask your interviewer that come from this reverse interview list. And most of these questions come from these resources here, right? It's just kind of combining all the questions into one file. But if you were to go through and answer all of these questions, you will be prepared for a significant, right, significant portion of your interviews. Realistically, your day should be spent hit listing and bank-ing. We call bank-ing, we put all these questions into our Anki. So if you're new around here, we like to use a tool called Anki that is a spaced repetition tool. Space repetition is one of the

01:36:00
best things you can do to learn. And so what it does is like flash cards with an algorithm. So you can take all these questions, put them into your Anki deck, and surface the questions that you need to see at that given time, so you don't forget stuff. Right? And so, and so, please, you do anything. Do your hit list. All right? And then do your bank. Hit list bank. All right, folks. It was a great stream tonight. Uh, really enjoyed talking to you all. Uh, I hope you have a great night, but I really could stop here. I really could stop here. Hit list and bank hit list and bank hit list and bank. What should you be doing? Leo, what should I be doing right now? as I'm going through the hunt, hit list and bank. All

01:37:00
right, put that in your bankie and do it every day. Now I'm a big fan of answering all these questions yourself in your own voice, in your own words, getting that active recall in, right? But if you don't have time, we've linked to it on Discord, but Curtis put together kind of like an open source answer list for all these questions That could give you a good start But seriously this if you come to any of the tea spills This is what has gotten most people jobs not code wars not leak code not their technical ability heck Not even their hundred hours project being able to have high-level Conversations with their interviewers that pretty much come off of this bank their behavioral questions Most of the questions are coming off of this bank Most of the questions come off of this bank. Now this behavioral list have all the questions, no, but it gives you, right, but it gives you,

01:38:00
it gives you enough things to think about so that when you do have a question that's not on this list, you at least have some things to use to answer it. Cool. Alrighty. Now, you'll notice that the bank has behavioral questions and those behavioral questions, you want to use a method of responding to them called a car star. I ain't about star. I'm about car stars, an extra thing you have to remember. And when you're in the throes of interviewing, remember an extra thing doesn't work. So I'm all about car cause action result. So, what happened, what action did you take, and why are you the best thing since sliced bread because of that action that you took?

01:39:00
Cause, action, result. You should have the cause, action, result, or CAR for all 21 of these questions. All right, cause, action, result. You should be, you should be, you should, somebody should be able to say this. When I was prepping this, you could say the number and I could answer my three sentences. This was a couple of years ago. I could, you could, you could give me the question. I, you, you give me the number and I'd be like, blah, blah, blah, blah, blah, blah, blah. That's how, that's how in this I was, right? I don't actually do stuff I haven't done myself, right? I showed you my daily code wars, right? And so you could go through these and have a cause action result for each one, right? I think,

01:40:00
give me a number, somebody throw a number in chat, let's see. Oh, y'all went fast. I gotta scroll up. Cool. I think number 14 was the first one that popped up. What's 14? No, 14 doesn't work. I can't tell you about my experience at 100 devs. The next one was 12. Oh, actually the first one was 12. Describe a situation when you worked effectively under pressure, how did it feel when working under pressure, what was going on and how did you get through? At my last opportunity, someone pushed to production on a Friday and it broke. We spent the weekend fixing the problem, getting production back in line and I, after that experience,

01:41:00
helped the team come up with New documentation and a new system that made sure that we never pushed to production on a Friday ever again So going forward we never had production break because we put better systems in place and we never had to spend the weekend fixing the problem Car what happened we push production on Friday something broke. What action did I take? We put a better system in place to never push on Friday and better systems to make sure that we don't break production I'm the best thing ever because we never had that problem again I swear this is almost verbatim from the last time we answered this yes because I have them fucking memorize you should too cause action result that's the point you know it but your interviewer won't you'll just be looking chill relax yeah so my last opportunity you know We, uh, we pushed a production

01:42:00
on a Friday, right? Like you, it'll come out smooth, right? It'll come out smooth because you have it memorized and you practice it. Here's, here's the devastating secret that you won't do. Record yourself answering these problems, right? Record yourself, see your quirks, right? See what you do that you shouldn't do in an interview. Record yourself talking through these. Code up a quick random number generator. As the numbers pop up, you answer them and then you watch it back. What did you do that was cringy? What did you do that you shouldn't do in the future? Right? But having these behavioral questions, CAR, cause, action, result, locked down, will get you a job. You did nothing else. Honestly, this is what has gotten people so many jobs. It's kind of ridiculous. The next thing is you have a lot of technical questions. The goal with these technical questions is not to

01:43:00
have a deep understanding. It's enough to say when somebody says, hey, have you heard of CSS sprites? You don't go, no. Right, it's just to have enough understanding so that you can have more technical conversations. you can talk with your interviewer, right? Next question. You can talk with your interviewer and it comes across as an engineer that's been doing this for years, right? For years, because you have a deep knowledge and a lot of stuff that comes up during interviews. So the bank has, what, 300 technical questions that I think are really important for you to go, not 300, but a lot, for you to go through that I think are really important for you to have a cursory understanding. and that cursory understanding is using a technique I like to call EU, explanation, use, example. You should have an explanation, use, and example for each

01:44:00
of these questions, right? CSS sprites are similar to doors. Well, let's say it, the CSS sprites ones on the list. Explain CSS sprites, right? So if you're ever trying to speed up your page, one of the things you can do to reduce the number of network requests is to use a CSS sprite. A CSS sprite is a way of putting all of your images into one image file and then using CSS or some other tool to move around that image so only what you care about is in view. So you can go from lots of network requests to a singular network request. And a good example of this is Amazon. If you go to Amazon's page, they really care about page load speed. They've actually said that for every one second, their page load speed increases, they lose a million dollars a day. So all the logos, the swoops, all that stuff is actually one image file that is a CSS sprite.

01:45:00
Explanation, what it was. Use, you use it to speed up your site by making only one network request instead of a lot. And an example, the Amazon example. You want to have EU for each of these questions. Explanation, use, example, and then you add them to your Anki so you don't forget them. This is a metric crap ton of work. 100 hours easily, but it's what gets jobs. Now you're starting to see the magic, right? You're starting to see the magic of this uh this random person sitting in space with their cats right it's not magic you're doing shit that other people won't do during the job hunt i can guarantee you those dirty clickers are not building out a beautiful portfolio a manicured github a a

01:46:00
perfect linkedin i guarantee you They're not networking their way. Oh no, it's too spicy. Even my computer can't handle it. They're, they're, they're not networking their way. My computer, my camera just got too hot. Um, they're not networking their way, right? They don't want you to know this. They don't want you to know this information. They literally don't want you to know this information. This is too, they, they, they're trying to shut me down. I'm not going to let it happen. The clickers will not get me. It's not gonna happen. It's not it can't They need to know this they're coming for me. I won't be silenced. I won't be silenced I refuse They're not building their githubs They're not networking their

01:47:00
way into applications. They're not spending a hundred hours building a project. They're not doing hundreds of hours of Banky. When they go into these interviews like scrubs, all their weakness shows. But we're 100 devs. We don't go into our interviews like an accident. We go in prepared, lean, mean, interviewing machines. We come, we eat their lunch, we take their money, we take their jobs. They tried to keep me down. They tried to keep me out. They said Leon was giving the secrets away. Not today. I'm back. Can't keep me off these airways, folks.

01:48:00
The clickers came, they got got, they got got. They got got, all right. Refresh, refresh, spam refresh in chat, please. The folks know that they, um. Indifferent, hey! Love you too, brother. All right, next. Technical coding challenge. You've, you've, you've done your hit list. You've networked your way in. You've prepared the bank, the last thing you need is to be prepared for a technical coding challenge as well, right? Okay,

01:49:00
this is live footage of my computer. My computer gets this, like I have like this sound dampening curtain I guess, but it just makes the room overheat and then my camera doesn't like it. All right. So the last part here, people realize that they could redeem channel point stuff again, cause the stream restarted. Y'all slick. I love it. Get yours, get in here. I love it. That's smart as hell. They big brained it. They big brained it, you smart. Love it. A bunch of people did it. That's smart. Well done. Well done. All right. So we have the prep. We've

01:50:00
we've done everything to get the interviews. We've made it through our behavioral interviews. We've gotten to the nerds. Once we get to the nerds, We have to have a system to get through our technical interviews and the system I like to implore is called prep parameters returns Examples pseudocode. It's something you step through with every technical challenge that you do If you want to practice prep, we are doing it every single day We have five, 600 people turning up every single day to practice through prep, uh, 6 PM. Eastern time. Come through. We put the, the question in the hunt Tober daily channel the day before, sometimes the same day, if I'm running a little behind and then we work through it together and then we ask a bass, a bunch of questions. So definitely come through. If you want to practice prep. Um, but I want to show quickly,

01:51:00
uh, prep real quick. Let's just open up a replit. This is the problem we worked on today during class. Let's do a different one. Let's just do, let's do, gonna do a node template here. Also, word of advice, whenever you show up to an interview, always know what you're going into. What type of interview should I expect? Is it behavioral? or is it technical? What questions am I going to be asked, right? And if you know that you're gonna be doing a technical challenge, have your replit pulled up or whatever you feel comfortable with. All right. So let's say the interviewer gives us a question that says, hey, I want you to take in a word and I want you to return whether or not that word

01:52:00
is a palindrome, right? Is that word a palindrome? And so once you've given that word, one of the things you might wanna do is like, oh, thank you for the question. Do you mind if I take notes? Yes, you may take notes, okay? So you're asking for, you're gonna be giving me a word and you're gonna tell me whether or not that word is a palindrome. All right, so I have a few questions. I'm gonna start working through my prep. The first thing I'm gonna work through is my parameters. Now, don't do this. Don't type out P. Well, don't let them know that you have a system that you are using, right? You keep that in your brain. All right. You said I'm taking in a word. Will I always be taking in a word? Will there ever be an instance where you don't give me the word? Wonderful. Now, will this word be only made up of actual letters? Like, will it always only be a string? Okay, it will only be a string, wonderful. So I know I'm taking

01:53:00
in a string. We know that it will only ever be letters. And will these letters ever have any special characters? Right? Will these letters ever have any special characters? Will they ever have any, anything that's not a traditional letter or word? Do I have to worry about spaces or anything like that? No, so no spaces, no special characters, no funny business, right? No funny business, no accents, that's a good one. Do I have to worry about capitalization? Could I just assume that all the words will be lowercase? Great, so it's regular letters, all lowercase, no special characters, and no funny business. Wonderful. Now, what I am returning to you is whether or not it's a palindrome. This is the returns, the R in our prep, we don't type R. All right, I'm going to return to you whether or not it's a palindrome. Would you like that as a string saying yes or

01:54:00
no? Would you like that as a boolean, as true or false? What would you like me to do to let you know that it is indeed or not a palindrome? Oh, you want a boolean to be returned, so we're going to return true or false, whether or not it's a palindrome. Wonderful. Do you mind if we work through some examples together? I'm just gonna set up a function here. I'm gonna call this isPalindrome. And real quick before we work through some examples, just to make sure we're both on the same page. When you say the word palindrome, you mean a word that is spelled the same forwards and backwards, is that correct? Right, what you're trying to do is make sure that you're on the same page. Don't leave anything up to guess. When you're working through your parameters and your returns, you want it all on the table. Make sure you understand exactly what they're asking. You're taking that time to really understand the problem. Really make sure you know what's coming in. Make sure what's going out. Cool. All right. So I know I'm taking in a word. We're going to put word in here as the parameter. And I was going to go ahead and set up some test cases

01:55:00
here. So I'm just going to go ahead and do a console log so that we can run this down the line. And I'm going to put the is palindrome in here. Wonderful. And let's do an example. I know that race car, right? race car is a palindrome right it is the same forwards as it is backwards r-a-c-e c-a-r r-a-c-e c-a-r so race car is a palindrome wonderful what i would do here is i would also want to say that this is true. So we should see true, true in the console. If the function that we wrote is palindrome, is a palindrome, we should see true, true in the console. I'll just go ahead and do another example. Let's go ahead and do my alleged

01:56:00
name. All right, Leon Noel, that should be true. and then we can do another name. Spongebob, cool. All right, so race car should be true. Leon Noel should be true. Spongebob should not be true. It should be false. Interviewer, if all of these are correct, would we be satisfied in knowing that we have solved the problem? Yes, now we're doing this, One, to make sure we understand the problem. A lot of times when I'm doing a technical interview, I. Don't really know what I'm going to do until I'm working through the examples. And then the other thing that's really important is that we exactly we have our receipts, right? We have our receipts. They can't change the game on us 30 minutes into the interview and be like, actually, this is what I want you to do. Not, not, ah, ah, ah, ah.

01:57:00
Slow your roll. You agreed that if these all worked, we solved the problem. So not only is it helping you figure out what you need to do, but it's giving you receipts for later on too, in case they try to switch things up. The last thing, the last P in prep is our pseudocode. So some things I know that I'm going to do is I'm taking in the word. I would love to reverse that word, but to reverse that word, I know I'm gonna need to use the, I'm gonna use the reverse method. I don't want to use like a for loop or anything like that. We have some methods built into JavaScript that would make this a little bit easier to solve, but I know reverse is an array. And so I need to take this string and turn it into an array with split. Then I can reverse it. And then I need to join it back together so that I can compare the reverse to the actual word. and that result of the reverse being equal to the other word would be true

01:58:00
or false. Cool. Wonderful. All right, so a lot of folks feel like, a lot of folks feel like this is taking a lot of time. It should take a lot of time. This prep process should take at least 15 minutes to work through, right? Should take at least 15 minutes. Because remember, I told you that when you're talking to the nerds, you're in a technical interview, it cares about, right? It cares about, can you code? Right, can you code? And do I wanna work with you for the next two years? So when you bring up, is a two-pointer approach more efficient? you may have solved the coding part, but I don't want to work with you for the next two years. So you still fail the interview, believe it or not. Right? And so eventually

01:59:00
you build up to more optimal solutions. And if you want to work up to more optimal solutions, you should join our standup. Cause every day we're working towards getting to more optimal solutions. But before we solve it with the methods, your methods and a brute force solution is all you need. Right? It's all you need. Your brute force and your methods is all you need to get a job. More optimal solutions are for the code weenies, the leak code sources. Does it open some more doors? Yes, but out of the hundreds of jobs that folks are getting at entry-level roles prep Methods and brute force was pretty much all they needed. Could you open up more doors with more leak code? Yeah, but you don't need it

02:00:00
cool Let's take a look at this at the end All right So we could go ahead and say all right, so Do you agree that this is on the right track? Is there anything here that you see but that might not get me to my solution? Okay, wonderful. So I can go ahead and split reverse join. I'm gonna set up a variable called reversed. We're just gonna say rev word just cause we're live and having some fun. Ah, we'll do real. Reversed word. And we're just gonna take in our word. We're gonna split it. Now splitter takes in a separator. We're gonna say empty quotes because we don't wanna have like spaces or anything like that. We're just splitting each word. Then we're gonna reverse it. And we're gonna join it back together. Beautiful. We have to put the separator in there as well. All right, so now we have this word that has been turned into an array, reversed, and then turned back into a string. And all we have to do now is return

02:01:00
whether or not reversed word equals word, right? This will give us the true or false that we're looking for. So let's go ahead and run our test cases and see what we got cooking here. All right. We see true, true, true, true, false, false. So it looks like our code is working. Bob, does this meet your, your status? Does it meet, does this meet your satisfaction? Did we solve the problem to your, your satisfaction here? Yes, we did. Wonderful. Thank you so much, Bob, for the interview. Now, before we wrap up, I'm curious, Bob, is this something that you would have in your code base on the job at company X. Would you prefer to like leave comments and have variables or do you lead or do you kind of like, like to have things maybe like on one line, do you use ES6? Which should this be an arrow function? Oh, it should be. So let's go ahead and, and, uh, comment this out and let's go

02:02:00
ahead and do const Next is palindrome, or palindrome. I said palindrome, not palindrome. Ripses. All right, is palindrome. And we're gonna go and set this equal. We know we're bringing in a word and we're gonna set this equal. And then we can just kind of use this implicit return. And we can just say, does word equal word.split reverse. Join. All right, Bob. So this looks like a nice one-liner using all the latest and greatest ES6 syntax. We see that still works, true, true, false, false. Wonderful. Now this whole process should have taken around 30 minutes, maybe more to prep, to work through the whole time. You notice I didn't shut up. I kept talking. Ideally,

02:03:00
I'm engaging the interviewer, right? We're engaging the interviewer, right? We're getting them talking. We're getting them answering the questions. We're getting them saying yes as early as possible because we're trying to win the game where they at the end like us and say that they recommend that we be hired. You have to build a rapport with your interviewers. A lot of times with questions that are way more difficult than this, you're going to get stuck. If you've been building this rapport, you've been talking this whole time, asking them questions, prep, return, parameters, returns, examples, pseudocode, you've been talking through this entire piece, they're going to give you hints. They're going to help you. But if you spent the whole time doing this, and then you get stuck, they're not going to help you. Miles, pack up your laptop and go home. They're not gonna help you. And so this idea of prep

02:04:00
gives you time to work through the problem. It gets you communicating with your interviewer. It helps you build that rapport so that they will actually help you. It also burns a lot of time. So in the end, you could say, you know what? I'm sorry so much. I have an interview immediately following this. I feel like we can get maybe a slightly more optimal solution to this problem. Maybe not this one, but in real life. I feel like we can get to a more optimal solution if we had more time. I might use this type of pattern. Do you mind if I follow up via email just with the optimal solution later today, right? Then as soon as they say, yeah, you go home, you immediately Google how to do the more optimal solution. You send them the more optimal solution via the email, thanking them for their time, telling them that you had a wonderful experience interviewing them, you provide some value that came picked up. You saw that they had a Pokemon on their desk. You say, I hope you're excited for Scarlet

02:05:00
and Violet that comes out in the 18th. Right. You throw that into the thank you. You send the optimal solution. Right. And you get the job. So this is a process that you should be doing for every single interview. Every single time you do a coding challenge, you should be prepping perimeters, returns, examples, pseudocode perimeters, returns, examples, pseudocode. You do a code warp, perimeters, returns, examples, pseudo code. You leak a problem to return, example, pseudo code. You do the Hunttober daily standup, perimeters, returns, examples, pseudocode. So by the time that you are on the job, Oh sorry, by the time you're in the interview. By the time you're in the interview, it comes out like butter. What did they say, actually, I'm not too busy, I have time, sorry, I actually have another interview with another company right now.

02:06:00
I really appreciate the time you gave me today, I will definitely follow up via email though. Have a great rest of your day. There's a game to be played, folks, it's up to you if you want to play it. I scratched the ones and zeros on the hard disk with the needle myself. Hell yeah. Oh, I like that Arasa. I don't want to be disrespectful to the other company I have an interview with. Cool. If you do prep, you know your methods cold. We've been spending like a past week or two just making sure we knew all of our methods. Today we saw sorting methods. We saw char code

02:07:00
at methods. We tried to see slice methods, but we ran out of time. We have seen split, reverse, and we've seen all these methods that I've asked you to practice, and we're seeing them live in stand-up. So if you need to practice with your methods, come to stand-up, we're getting that practice in. But if you know how to prep, you know your methods, you know how to brute force a solution, which is like the non-optimal solution, that's all you need. That's it. You get a job. You can stop right there. You don't need to know how to do the optimal solutions to leak codes, etc. Uh, does it help? Yes. Does it open more doors? Yes, but it's sprinkles. It's sprinkles. It's sprinkles on top of your interviewing Sunday. Don't listen to me. I'm just a random guy on the internet drinking some tea.

02:08:00
How about Sean? On discord, they wrote this, there was no technical assessment. I just told them about the projects I had worked on and made sure I was friendly. Remember number two and connected with them as people. I know there are lots of people here that are better coders than me. So it's absolutely possible. You can do this. Don't stop believing. Stay consistent. It will happen. Winners win, losers lose, stay consistent, find a way to win. No technical assessment, amazing job. Erica, the nerves got to them. Right, the nerves got to them. I was going to cancel the interview, but my friend convinced me in the last minute. They now work part time, but get paid full time. Part-time work for full-time pay the

02:09:00
nerves almost stopped them from going to an interview. You know enough you are ready. Daddy Yankee built a button with HTML and CSS and got an 83K job that's now they've gotten a raise and it's even worth even more now. A fucking button. And if you go in our celebrations channel, you will see that this is not a fluke. This is not something that they got lucky with. You will see 50 plus examples of folks that got amazing jobs without technical coding challenges. Hey Rose. Oh, that's cool. I hope they're doing well. a

02:10:00
fucking button you can code a button All right, so just do it. Do it! Just do it! So just do it! Make your dreams come true! Just do it! Maybe Shia LaBeouf will convince you to do it. You're ready, you're ready. You don't need anything else. But if you want some sprinkles. You want some sprinkles, I got some sprinkles for you folks. That's the data structures and algorithms. We did a very simple intro, a very simple introduction, right? A very simple introduction and that's really all you need. When you start talking about optimizations that you

02:11:00
would make, that's all it is. You might not be coming up with these really optimal solutions in your interviews, but if you play your prep right, you manage your time well, you can at least talk through why something might not be optimal and strategies you might take to make it more optimal without having to actually solve the optimal solution. Now if you're applying to, if you're one of those people that like want to work at fang or something, look, uh, those folks, this, they, they, they need all the sprinkles. They need the sprinkles. They need the whipped cream. They need the cherry. But for most of the jobs that we're going for, these sprinkles are meaningless. Knowing the optimizations, knowing how to evaluate your code in terms of space and time is enough. We had a full class on this, so you can go back actually to classes, right? You can go back to those two classes and

02:12:00
see all of this in detail, but very quickly, right, very quickly, when we talk about data structures and algorithms, I think it's just the last thing you need, the last sprinkle you need if you want to interview well. Right, the last thing you need if you want to interview well and that last thing is to understand what data structure and algorithms are. An algorithm is just the steps you take to solve a problem. All right, hold on, my little one's not doing too well. I'll be right back, one second. We're back. God family academics, always, always. It's close to little one's bedtime and I think they're trying to hit it a little early. All right. So these are sprinkles, right? The sprinkles that we're putting on our interview Sunday.

02:13:00
Right? Our interview Sunday. And so let's just run through these quickly, but know that we have two classes on all of this, right? Algorithms. I already hear somebody talk about algorithms. It's just the steps you take to solve a problem. and it's helpful to know how to evaluate the efficiency of those steps that you are taking and we say the efficiency we care about two things space and time how much time theoretically are we taking and how much space theoretically are we taking up in memory and space being how much memory is used time how many the operations are executed per input. Now, when I say about time, I don't really mean like the actual amount of seconds something takes. We're talking about rough estimates, right? Rough estimates. When I'm evaluating time of an algorithm

02:14:00
or the steps I took to solve a problem, why do I care about rough estimates and not about like the actual numbers or the number of seconds it took for my code or the solution that I've written to run? A recipe is an algorithm, exactly. Thank you, indifferent. It's just a step she took to solve the problem. Because it differs, exactly. The code that runs on my beast of a PC that's overheating my room will probably run my function faster than my Chromebook. Right, so I don't care about the actual second something takes. I talk about the rough theoretical overview. So how many operations are executed per input is what I really, really care about. And we have a way of talking about this rough estimate. And what

02:15:00
we use to talk about this rough estimate is something called big O notation. Big O notation, like why do we use it? It's just a way of mathematically describing how complex an algorithm or the steps you took to solve a problem is in terms of that time and space. But why, why do we use big O? Why do we use this mathematical notation? Well, it's like I said, the environment in which we run our code, whether it's a beast of a PC or Chromebook would actually make certain code run faster or slower. We don't care about that when we're trying to evaluate the steps that our algorithm taking. We're trying to get a rough estimate of how many operations per input we are taking. It's theoretical, not exact. Cool. So some common complexities you're gonna run into. You're gonna see our constant time, our logarithmic, our linear, and our quadratic, are ones you typically

02:16:00
start off with. Constant time means that for any number of inputs, there will only ever be one operation, right? No matter how many inputs there are, there will only ever be one operation. We can see this when accessing an element out of an array, right? So if I want the first element out of this array, no matter how many inputs I have in my array, accessing an element out of that input will happen in constant time. No matter how many the more values I add to my array, it will always just be one operation, right? Now, the inputs, if we had an equal number of inputs and an equal number of operations, right? So for each input, we also have one operation.

02:17:00
We would call that linear or O of N. And an example of a linear complexity is when we loop through that array, right? So here we're gonna loop through and sum all the numbers that are inside of this array. So for this for loop to run, we're gonna take each number and add it to our sum. So for each input, there is one operation, right? So this for loop would run, grabbing one, adding it to sum, two, adding it to sum, three, adding it to sum, four, adding it to sum, five, adding it to sum. So for each input, there was an equal operation. All right, now, the thing that blew my mind, the thing that absolutely blew my mind is this Gauss's sum. It should be an A here. Was this Gauss's sum. With Gauss's sum,

02:18:00
I was able to sum an array just by taking the last value. So here, I'm grabbing the last element out of my array and I'm doing this fancy, right? Right? We'll do this fancy math trick, right? We do this fancy math trick, right? We do this fancy math trick and we do this fancy math trick, we get the sum. So if you ever have a continuous array of numbers, meaning that they go from one to the number, they don't skip anything, they're in order, right? You can go ahead and just grab the last number. So no matter how many inputs, you're doing one operation and you get the sum. You don't need to loop through, right? You don't need to loop through you can do one operation and get the sum that turns something that

02:19:00
was a linear Complexity and the something that is constant time. This is why people study data structures in algorithms there will be Problems that come up often in computer science and in engineering that if you know the tricks You can do it way more efficiently Imagine we had a million numbers. We'd have to loop through each number to get the sum. But if you knew this trick, you do one operation, no loop, and you get the same value. Right? That is the power of data structures and algorithms. And that's why people study them. Do they come up in a normal engineer's day to day? No, maybe, depending on what you're working on. but when it does show up, oh boy, oh boy, right? Oh boy, does it, does it pop off? And so what we're doing during the daily standups,

02:20:00
right? What we're doing during the daily standups is slowly exposing you to the really common data structures and the really common algorithms that might show up in your interview. But none of this is necessary. This is all sprinkles on top. If you know your prep, you know how your methods, like your JavaScript methods, your sorts, your maps, your reduces, your filters, and you know how to brute force just like using regular functions, loops, right? That's good enough. Learning this stuff puts you over the edge. So I've shared so far two resources, the Scotch IOs introduction to algorithms, and then a free front end master's course on introductions to algorithms. You do those two courses, you know enough to blaze through your interviews at most companies That's like taking it to the next level putting all those sprinkles on top All right, so that's kind of the idea why these things are important.

02:21:00
There's two more Quadratic when you see like a loop inside of a loop for each input You're also doing an operation as you add more inputs you're doing X will not exponentially but close to exponentially more operations. That'd be quadratic. We have something called logarithmic, where we have special algorithms where we can break our inputs in half, throw away the ones we don't care about, and it's a little bit faster. And then we have a whole class on this, right? So if you know that you want to add the sprinkles on top, go check out our past VOD, our past class on data structures and algorithms. It'll cover all this stuff in detail. If you're watching this on how to interview, definitely go back and watch that class. This is just trying to give you a little taste as to why it might be important.
