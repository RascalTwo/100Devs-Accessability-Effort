Speaker 1: Thank you.  Welcome back to the Free Code Camp podcast.  I'm Quincy Larson teacher and founder of Free Code Camp.org.  Each week, we're bringing you insight from developers, founders and ambitious people that are getting into tech.  Today, we're talking with Leon Noelle, who, I don't know if you've heard of 100 devs, but it's amazing and it's a huge source of inspiration for me personally.  He is the founder of 100 devs and he is head of engineering at Resilient Co.  Leon, joining us from sunny Los Angeles.  How's it going with you?  It's a little early.  

Speaker 0: We'll see if this thing comes out.  Things are going well.  This is surreal experience.  Thank you so much for having me and we'll get weird with it real quick.  I always joke that like my wife knows how serious I am.  if your face is like the background of my like screens or I've had a picture of you on my desk for a little while so she knows if it's go time or not based off of like she's seeing you so well.  it's honor.  it's a huge privilege like this is a dream come true for me.  you're a huge hero of mine and had done so much to help so many folks and you're who I want to be when I grow up so I really appreciate it.  thanks for having me on.  

Speaker 1: Yeah, well, I just want to say that it's like very kind.  And I want to say that that goes both ways.  Like often when I'm feeling like a little bit low energy and I, you know, I don't know if I can get a lot done today.  Maybe I'll just, you know, go and answer a bunch of emails and not do like curriculum design or You know I'll go into like the.  I'm like what would Leon do?  he would dive in head first he would have so much energy overflowing and he would just go in there and get things done.  and so yeah like I do think about you a lot when I'm just feeling low energy because I've watched your streams, and I've seen the amount of energy, both like literal energy like bursting, forth, and the positive energy that you bring to the community.  So thank you for that.  And I'll make a little meme of Wolverine holding the picture.  

Speaker 0: And then there you go.  

Speaker 1: We leave out holding the picture of me.  I won't really do that, but like I just said, what did you said that?  That's just so hot to do in my mind.  Because I love X-Men.  

Speaker 0: So, um, Leon.  Did you see the new announcement?  97.  What's happening?  The redo in the old school cartoon.  Oh my goodness.  Like post professor.  Yeah, 90s Saturday morning.  All right, no more everybody.  Stop the podcast and go watch the trail.  It's really good.  It looks really good.  

Speaker 1: I will put a link to the trailer.  

Speaker 0: Here's my eyes when there's a specific catchphrase that is said, but yeah.  

Speaker 1: Okay, I'm going to link to that.  We should watch that immediately after you finish watching this podcast interview because we've got a ton of advice that's practical and not just, you know, something that you can do to escape from your day that they experienced but to build up your day-to-day experience and accomplish your goals.  So Leon, before we dive into 100 devs and resilient coders and all the work you've done, I like to always start these interviews with more autobiographical stuff, just so people can have context into who you are, your lived experience, where you're coming from, and where you're heading, and things like that.  So maybe you could take it back to where you grew up, and what your earliest ambitions were as a kid, Yeah, so I grew up in Philly, definitely 100% of product of Philly.  

Speaker 0: I was always kind of the very kind of tinkering, wanting to build type of kid.  I grew up with a huge household, a big family, all in one row home in South Philly, which was amazing.  And I was blessed to have amazing libraries where I had access to computers and kid.  Tinker and build and I was really blessed to even have a lot of even just computer science education early throughout my life.  I had a Q-basic class in middle school where I would get a sailboat to go from one side of the screen to the other.  I thought I had magical powers and yeah.  I was very lucky to have these skills so early.  We also infill have magnet schools, which are kind of like exams schools that you test into, and so I want to engineering in science, where I had two years of C++.  in high school, and this is like 20 years ago.  And so, yeah, I just, I'm very lucky to have grown up in an environment that supported my passions and interest, even when I didn't have access to those technologies or knowledge that there was a way for me to get access to it.  So, very, very thankful for that.  

Speaker 1: That's awesome.  Yeah, it sounds like a really kind of like a dillic upbringing in the sense that like, you've got access.  What about teachers?  Did you have any teachers as a kid who like really propelled you forward?  I always talked very passionately about my seventh grade teacher or eighth grade teacher, science teacher, Mr.  Krieger, whom I've failed to track down.  If you know Mr.  Krieger who taught at, you know, Hoover Middle School, which was like a now destroyed bulldozed school in Oklahoma City.  If anybody has heard of that person, let me know.  But did you have anybody like a Mr.  Krieger in your life who was eccentric and interesting, but kept giving you like interesting books about space and stuff like that?  

Speaker 0: Yeah, so I've have been lucky to have a few.  So Mr.  and Sheen was my fifth grade teacher that when I was done my coursework would not let me just sit there totally my thumbs but always had like puzzles and things to build and tinker with in the background and I like what.  I've tried to find them.  I haven't been able to find them, but they really kind of showed me that.  I could be in control of my learning that it wasn't a one way to positive of knowledge that I could have some sort of control or command over the things I was doing with my free time.  that would enable me to think creatively and to do things I wanted to do.  I had a lot of wonderful folks throughout high school that really helped guide me that pushed me that maybe saw something inside of me that I didn't see inside of myself and would try and pull that out.  my, we're talking about, like, code education, shout out Mr.  Schipper would push me to learn my, my C++.  and we had the old school like matrix printers where you'd print out, yeah, hold on them and, and I'd look through it and take it to them and try to point out bugs or errors.  and you talk about folks in your life that do like the small things right.  and mr.  shipper every every birthday for years and years would just send me like a happy birthday message.  so talking about folks that just support you long term uh... that was there and then in university it was doctor bps guess the person that showed me that I could be what I wanted to be, and supported my ability to learn, and supported what I wanted to do, made sure that I had funding over the summer, to live, made sure that I got to do the research I wanted to do, and ultimately gave me the skills that I thought I needed to.  Either person I wanted to be in life, and so yeah, definitely the product of amazing teachers throughout my entire life.  That's something that I try to think of with resilient coders and 100 devs.  What was about those folks that inspired me to do more to learn to feel comfortable and trying to bring that into the classroom as well?  

Speaker 1: yeah yeah it's so cool to talk with another teacher because obviously your software engineer but you're also a teacher to many many people not necessarily in the conventional way maybe in the conventional way too.  maybe you actually give lectures occasionally in person but like through 100 devs you're essentially like the classroom teacher that people need.  you know like yeah You know, the VAT signals up in the air, the 100-dev signal and you're answering that call and you're helping people with the not just practical challenges of learning the code, but the motivational challenges as well.  And that's a huge thing I take away from your stream.  Sounds like you went on to do really well academically.  I presume because you went to university in the world.  Maybe you could talk a little bit about what that process was like, what is it like getting into a relatively elite school?  And was that?  how long did you have that plan?  What age did you kind of like?  snap to awareness?  I always like to tell people like I kind of snap to awareness much later in life.  I was maybe like 20 21 and that's when I got really into like journalism and studying foreign languages and stuff like themes that would kind of run throughout the rest of life living abroad.  and ultimately like much later I had kind of like.  second thing where I learned like technologies really really gosh darn useful like and that's when I learned to code and like automated stuff from my school and stuff.  but like did you have like an early kind of awakening at some point you remember a distinct period of your life where you're like hey you know I can do a lot more than other people around me are doing my peers.  what was there such an awakening?  

Speaker 0: yeah I think I want it to be comfortable.  I want it to have a good life.  And I think early on, especially as a kid of color, you're going to talk this very, it's just a doctor learned that this.  It comes up over and over and over again.  And it comes from maybe our families and the folks in our community not knowing kind of all of the opportunities that are available, but those are the safe pathways, the doctor learned dentists and so.  Yeah.  Yeah, it's proven.  So that's kind of the path that I got put on at someone that who was successful pretty early academically.  I did well in elementary school.  I got, I used to have to go from my school to another school every week to do like other programs.  And I saw how hard my grandparents had to work.  I saw how hard my grandfather works specifically in a boiler room every day.  It was hot.  They were pulling vows and I saw what hardware could do, and I wanted to do something that would enable me to have a good life, but maybe not be so sweaty.  And so the idea, let me look into Dr.  Leridentis, Dr.  Leridentis, As I went through middle school, I was very focused on getting into one of our magnet schools.  So Philly has some amazing schools that you kind of test in and it's more of like a lottery now too as well.  And I went to engineering and science.  And engineering and science was geared around getting folks into engineering and science and had tracks that you could follow and a really good placement rate into universities.  For a while my sophomore junior senior year, pretty much every lunch period was spent with Miss Brown, who's my guidance counselor, and would make sure that I was getting access to everything I needed to do well academically and to get into really good schools.  And coming from a low income family, it's really expensive.  So Miss Brown would make sure that I had vouchers for everything that I could take the SAT for free that I could apply to schools for free.  that would get me into all the best summer programs that could help me academically.  I was a did up or bound for a while.  Make sure I had access to things that I'd get in the calculators and things like that.  And so my school, I owe a lot to in terms of getting me prepared for eventually, which I would go to as Yale.  And so for me, I think I've just been really blessed to be the product of a school system that if I wanted it, if I wanted to work hard, if I wanted to put in the hours and I played through sports, I did every club imaginable, but I had really amazing people that guided me through that process, and then I was able to make it from in us into Yale and then went into hard sciences and was on this track to be a doctor, right?  Dr.  Larry Dentist, I chose Dr.  My mom was an LPN and I got to grow up in doctors offices and see and talk to folks and that was kind of the path that was on.  and it's kind of funny because I was doing computer science, I was in an engineering high school and I just didn't allow myself to see that as my path or my career even though that's where I eventually I should have been or eventually did make it to.  and so that's kind of the long-wine path.  

Speaker 1: and to Awesome, and LPN is licensed practitioner, licensed practicing nurse?  

Speaker 0: Yeah, it's like a vocational nurse, basically.  So instead of doing, now I guess the track is like your bachelor's and you get like your RN, this was a vocational pathway to being a nurse.  

Speaker 1: Yeah, yeah, I just want to make sure I got that right, and I have like this policy that like no matter how common the acronym is, I always try to like spell it out for especially for our listeners abroad, not even being the speaker of listeners as well.  So okay, so just recapitulate some of that.  I've been telling you to tell this as you talk just because this is so interesting and I'll email these to myself.  These are not properly, but it's basically the contents of this conversation.  It's public now.  it sounds like you didn't.  it just didn't even click.  it didn't even really occur to you that software engineering was a field you could go into because like so many people coming from underprivileged backgrounds so many you know second generation and we're going to start even first generation and we're going so many people growing up who are kind of still in the shadow of inequality like racial inequality.  that's systemic.  that is the reason.  one of the reasons why you know wealth among black families is like Something like one tenth of like white families that have been in the U.S.  the same duration of time.  I mean, it's like ridiculous.  But because of these circumstances, uh, you were pushed to do Dr.  lawyer dentist, and again, like most of my doctors dentists  

Speaker 0: that  

Speaker 1: I haven't had any lawyers lately, like over the years have been people who came from a different country, like their parents came from a different country, or in many cases, as doctors, they literally came from India past the USMLE, which is this incredibly stringent test, essentially re-certified as doctors, a very lengthy costly process, just so they could practice in the US, because the US is like a great place to live, and it's a great place to work as a physician.  generally I guess I shouldn't speak for all.  there may be some positions in the audience who take issue with that because of regulatory issues and like all this other stuff.  but My point is you were so focused on that because that is what success sounded like.  That was like the family's perception of success and software engineers like a relatively new thing.  that is not well understood and it's not a surprise because software engineers only existed a few decades.  Maybe you could talk about like What that awakening to software engineering was like, and how you went about, okay, I'm gonna go much deeper on coding and learning about computer science and math, like all these things that you need to be a successful software engineer.  Now now I you may take issue with me saying like you need a whole lot of math for example or something like that.  I don't think that's necessary true for a lot of jobs but I always tell people like there is no knowledge that is not power.  like you should definitely learn math if you have the time.  it's probably not the highest priority if you just want to go get a job as a developer.  Sorry, but my question for you.  Leon.  All right, complete introduction.  Right on.  Okay, so I'm glad to hear that like, yeah, because a lot of times I hear like, I think one of the pieces of misinformation that's going around is like, oh, you don't need math to be a developer.  Like, I don't know any math.  Like, I just took high school math and I'm a developer.  And like, That is true to an extent, but there is kind of like a ceiling that you're going to hit in your engineering career.  Yeah.  If you don't like at least take some time to learn some mathematics and you can learn mathematics right here on free code camps, YouTube channel.  We have courses on pretty much every engineering math topic that you would learn at like an undergraduate engineering program.  So, you know, it's just investment of time.  And that's a big thing we'll talk about in a little bit is like, is it really free in the sense that you have to invest your time and energy.  And not everybody has equal time and energy.  Some people have all kinds of different circumstances that inform their availability of the learning to code.  So, we'll talk about that in a minute.  But like, how did you, a person, and like, maybe how old were you, were you still in school when you realized that you wanted to do CS?  

Speaker 0: Yeah, so I, was always building.  So when I started in sixth grade, I learned Q-basic and I would go to the libraries and tinker and build.  When I was in high school, upper bound got me a TI-83 plus calculator, which I still have.  It's like in my drawer over here somewhere.  You could write code for that calculator.  And I remember swapping.  I felt like it was like old school.  You know, like how you people used to swap flopbies.  I would swap the games and programs from the calculator and go to the library.  And like I remember the thing I wanted for one Christmas was like the cable that connected the calculator to the computer so that I could like put my code on it.  And so I remember very early working on calculator games and other fun stuff that I just went to bring into the world or modify and hack God and so that was always really fun.  And then I had that kind of formal C++ in high school and then when I got to university, it all went out the window.  I was doing hard biology.  I was doing eventually biological anthropology.  I was looking at hormones, testosterone, and stuff like that.  But this entire time I'd always been building, tinkering, I really liked entrepreneurship.  I was always trying to start ideas, small companies, things like that.  And I had started one simple project that went pretty viral in New Haven, New York area.  And that kind of really showed me some of the power of these skills that I had been kind of accumulating, but the real kind of awakening for me for computer science was every summer I was doing lab work.  And I had figured out how to survive when you're low income going into an Ivy League school, basically they give you a full ride right out the rip.  And so I had figured out that if I didn't live on campus, they would give me like whatever the amount of money was to stay on campus they would give me and I was able to use that to like do stuff.  I would pay rent and food but I was happy eating pasta and pasta sauce and I actually hadn't money to like live and and do all the things that all my my fellow students were doing.  because I figured out this like way of doing it but I ran out of money whatsoever and it was getting pretty dicey pretty quickly.  I really didn't have any money for food left and I was literally hungry and I realized that I could do things like.  I was looking up like put jobs and then I was like wait a minute let me let me see if I can build somebody at website.  I know how to do it.  I've been building all these like landing pages and in small things with code before.  so I put on Craigslist.  hey I'll build GSA.  I can get it done today.  and somebody responded and they paid a deposit.  and My life changed from that moment.  I skipped all the way to the grocery store.  I bought my pasta, bought my pasta sauce for the month.  I built them this site and in that moment something very clear happened in my brain that I had a real skill.  A skill that can provide, that can put food on the table, a skill that would.  make it so I was never fucking hungry again.  Sorry, oops, sorry, Chris.  

Speaker 1: It's cool.  

Speaker 0: I get it again.  

Speaker 1: Yeah.  If anybody like, like, we don't edit this podcast at all.  So I'm like, that's where it was.  That's like a, unless there's like something really bad that happens like I had a coughing film once.  

Speaker 0: And so that that changed everything until this day I stole freelance.  And I, that's the reason why a lot of the things I do today, the, the resilient coders, the 100 does is like, I want anybody that has ever felt that way to know that there is this option, this ability to develop skills that no one can take away from you, that can put legitimate food on the table.  And so that's when I kind of went all in on more of the engineering piece.  

Speaker 1: awesome yeah.  well um that sounds like an amazing discovery of like powers that you just had latent within you that necessity brought forth.  you know necessity is the mother of invention right?  uh you were forced to basically buy your circumstance to like.  think outside the proverbial box come up with a way to to get money to buy your pasta.  Um, I, you know, I definitely remember the lean cause.  you're subsisting off pasta.  We got the smack ramen.  If anybody, like, not the good, like, hit ramen, like, Korean ramen, but like, it was just called smack.  We don't always joke about it.  Like, when you're hungry, you know, it's almost like, you know, like a drug because it's just like, you feel so sated afterward.  Um, it's like terrible for you.  But what kind of pasta did you always do?  Like, did you have a particular like build of pasta that you liked?  

Speaker 0: Uh, this is like way back, whatever the cheapest was.  I was, I was, I was, I'm gonna survive.  I didn't care.  Nowadays, I have some preferences, but back then, whatever, whatever it was on sale, whatever it was the cheapest, there was the supermarket nearest had like this like clearance aisle.  And in that clearance aisle, they would put like this stuff they couldn't sell.  And so whatever it was on that rack is what I had.  Yeah,  

Speaker 1: and to this day by the way, like a lot of grocery stores like Walmart, like they'll take their baked goods and they'll put them on a rack like right by the exit like the staff only place where they have like the garbage compactor where they compact the boxes like I worked in grocery stores for a few years.  so basically back where they keep all the mobs and they keep all the you know inventory helps that there will be like a little rack and sometimes they'll have big good that like  

Speaker 0: it's still  

Speaker 1: good but we can't really sell it because it's gonna expire like a day or two.  so like I still snag some buttons from there.  but yeah just pro tip if you're going to a US grocery store you can often find like food that's about to expire that you can get like at a discount.  So that's really cool.  So how do things unfold from there?  So how did you go from that first contract work, essentially, that client that you landed through Craigslist, which is how I landed.  I think I landed some early clients through Craigslist.  Craigslist, amazing tool.  I'm not sure if it's still amazing today, like 12 years since I last used it.  But yeah, like a lot of early gigs were found on Craigslist.  How did you go from that to the deciding?  I am a death like taking that identity if you will and going deeper with it.  

Speaker 0: Yeah, sure.  So my junior year at Yale, I started a small website called Listful of Hope.  It was kind of like a reverse Craigslist where if you needed something, you could say what you needed.  So if you needed a jacket and someone in the area had a jacket, you would meet up and they would give you a jacket.  So it was kind of like a gift economy.  It was a very simple site that was just enabling folks to help others in their community.  And it really kind of popped off in New Haven.  And so there is the one winter where it was like really popular.  I remember people getting Christmas present, jackets, gloves, anything you needed.  And I could really see that transition from something that was like just a raw skill to like me having to build an actual application and having really users.  I was like I could I saw the power I saw that it could help so many people and I knew that these skills would be really advantageous to keep going.  and so my junior year I kind of slowly stopped.  kind of really wanting to do coursework.  Senior year, it became even bigger problem and I was trying to finish my thesis to graduate and I had to get like 300 men to spit in a tube, tell me about their sexual histories, I could correlate it to their testosterone levels.  I was trying to like show that or find something about BPA in relation to the costumes and we drank a lot of, like, it's the classic models.  Yeah.  And so I was trying to do that before it, before it became really popular, like, something people would actually think about.  

Speaker 1: Yeah, for you, plastic, which for the kids, like just in case, it does have, like, deleterious effects.  We don't want our kids to be drinking.  

Speaker 0: And so, really hard time running that that experiment and apparently people didn't want to, you know, spit into tube and tell me about their sexual history for a like a bottle of gatoria and like a package on or something.  And so I wasn't able to recruit enough people for that experiment and I decided to use my coding skills to set up just like a landing page where a lot of students were always trying to find studies or experiments to participate in because when they were a lot of fun sometimes and you actually got paid pretty well to do the experiments and so There is one really famous one that people loved where you basically went to a lab, they got you drunk and you played poker and they're just like watching you like how you make risky decisions and things like that and you got paid a couple of dollars to do it.  So I made a landing page that had all the studies from Yale, Harvard, Princeton that we're like trying to get people to come and I just slipped mine in there.  And it took off because we had all these professors that were promoting it.  We had all these students that got real value.  They went to the site.  They found something fun to do.  They got money and I dropped out my senior year to turn that into a business.  which became social science.  We wound up building academic surveying tools.  They have over 4,000 different universities that used our tools to power their academic research.  And even though that company has been wrapped up for a long time now, we still have research that gets published based off of the data that they collect it.  I need it to know more.  My engineers had these like magical powers and I needed to learn that skill for myself and so I took my cutting education more seriously.  Eventually I was building other products, other striaps as well and started teaching at General Assembly, helping others kind of acquire these skills too.  So that was kind of the journey.  

Speaker 1: And it's interesting.  So first of all, congratulations on building something that 4000 universities.  Yeah.  It's not easy to get universities to use your stuff.  There's like this notorious like sales cycle adoption cycle among universities.  They're very like slow to adopt new tools.  

Speaker 0: Yeah, I mean, that's that's phenomenal.  

Speaker 1: To go from basically like mechanical torque for being a human test subject to having like an actual project that is getting wide usage.  Like, that's really amazing.  

Speaker 0: Bring up mechanical Turk.  Those are the reason why we were able to raise like VC funding was because M Turk was becoming more popular.  And what social size.  soft was not just the survey creation, but the participants taking the surveys.  And so part of my pitch deck and I'll know if I get it was I decided to get my mom a Christmas card.  And I had people on M Turk like just like hold up the Merry Christmas sign and what we had was this one person with a hundred different like not a hundred but like a lot of different accounts.  that was just like changing their hat putting on a different shirt but it was like clearly the same person and so at this point the kind of took had it solved the like identity online and like how do you stop?  like false participants?  and that was kind of why we were able to be able to raise money and why we were able to have so many universities trust and use our service because we were solving that problem specifically.  

Speaker 1: So what's your mom like, who is this person and where is this?  So, you know, passionate about like, we should be happy with it.  It was cool.  

Speaker 0: There's like a hundred people from all over the world with like different backgrounds, different cities, different places, and they all were saying Merry Christmas.  Merry Christmas.  I like to facilitate that, but back when we did it, it was pretty cool.  

Speaker 1: yeah and make mechanical turk just for people that are unfamiliar with it is like they call it artificial artificial intelligence.  it obviously nowadays like a lot of things you would pay someone on mechanical the turk to do.  you just like format to like an all-embers something but it was like um... like.  hey I need you like early on.  it was like hey I need you to solve a capture for me.  or yeah I need you to create a Facebook account and like like this this Facebook group or something like that.  it was like basically getting around the restrictions, the different platforms might have in place.  But, you know, in the good, like, as designed use would be, for example, getting people to do precisely what they had said.  So it was everybody would get, like, maybe just a few pennies.  for doing a hit, I think, or a job or something, I can't remember what they were called, but yeah, you would do those.  Is that accurate?  Like, I haven't actually used it.  

Speaker 0: No, that's that's pretty close.  There was, it's this whole subfield called human computation, right?  So there's there's Some things that computers can't yet do, that humans can still do, but figuring out how to do them at scale, is really important.  And so, mechanical Turk, you can take a task, break it down into a very small sub-task and have thousands of thousands of people do it.  Need for human competition is like labeling data, think of AI training, and it's like that.  There had to be real.  people that said that was a a fire hose or that was a part that was a bicycle and you know what and not a muffin.  that's like a famous like you always look a lot like muffins to a computer and so figuring out all of that was necessary for a lot of the advanceers that we're seeing now.  And there are still things that humans can do very quickly that machines just can't do yet.  And so M.Turk still has a place.  There are other companies that do similar things nowadays, of course, but that labeling and small tasks done at scale.  And there are other cool things you can do too, so where it's like It's that giving it to just one person you give it to five and a four out of the five do one thing.  You know that you can probably trust that thing is opposed to the one person that did it as opposed to the minority report.  

Speaker 1: Yeah dissenting dissenting opinion.  Yeah, that that's a good kind of consensus mechanism.  So um, okay cool.  So you built this project.  We could talk about that a lot more, but we have so much more to talk about.  Yeah.  Like where do you go from there?  You you basically had a successful project, right?  Like everybody's dream, especially at this point.  Sounds like you were pretty strong.  Like yeah.  Like, like, had you finished college at this point?  

Speaker 0: Like I, so I dropped out and never finished.  

Speaker 1: Oh, wow.  

Speaker 0: and my senior year at Yale.  I had this idea for social side.  I dropped out.  I did tech stars.  

Speaker 1: Tech stars and accelerator.  

Speaker 0: Yeah, popular.  

Speaker 1: Like they give you some some seed money and then you're in like a program where they kind of coach you.  

Speaker 0: Exactly.  

Speaker 1: Exactly.  They help you.  

Speaker 0: Yeah, exactly.  They help you.  Lay the foundation for a company and all the skills you might need to know to do that effectively.  Textaries really changed my life.  It really gave me a lot of the skills that I was missing.  Give me my initial network outside of university and yeah, the initial seed funding and then help me go on to raise more funds for for social science.  Yeah, while I was running social-side, I started teaching at General Assembly, and so General Assembly was one of the first really big coding bootcamp programs, and I was doing their part-time courses for a very long time.  I'm a distinguished faculty with GA, even till today, and I was having just hundreds, if not thousands of people.  be successful, like learning these new skills, learning how to code, getting great jobs, and at one point it kind of just got overwhelming that I didn't notice anyone that looked like me taking advantage of this program, one because it cost a lot of money, that also cost a lot of time.  So I started looking for orgs near me in Boston that I could help or support.  And I came across resilient coders, which at that time, our founder David Delmar, I was really trying to work with court-involved youth and show them, hey, like, there are these things you can be doing like coding or things like that that might help you long-term in life.  I started just going to, we had what are called community hours where it was just myself, a few other mentors and a bunch of young folks that particularly court involved or returning citizen and just trying to like give them these skills.  and then we had the idea of starting a boot camp.  and our founder Dave Delmar said hey like you've been running these other boot camp programs could you do it for our sea?  said yes.  and then for the past six years we've built a program that can help folks traditionally of color that have particularly not completed a degree, though from zero to employable as a software engineer and we've been pretty successful at it.  We've helped hundreds of folks get jobs and with starting salaries around $92,000 and for us that's huge because For each person, we can get from those communities.  We're talking about millions and millions of dollars back into those communities over the lifespan of their career.  So it's not even doing resilient colors.  that adventure led me to a hundred devs and that's kind of the.  

Speaker 1: Yeah, yeah.  I want to dive a little more into because we're going to talk a lot about 100 devs.  But like, uh, resulting in coders, you said, uh, court involved youth.  Uh, I'm not familiar with firm, but like, you know, I have lots of friends who are like convicted felons and you're not sure if that if that is essentially like people who early on in life get into trouble maybe because they actually did something wrong or maybe they were profiled and like the the very unequal justice system in the United States didn't do it's job very well and and you know gave them much hardship penalty that kids should probably have in many cases.  but Is that like accurately like yeah,  

Speaker 0: so we had a lot of individuals that we say court involved because exactly the things that you brought up a lot of the folks that we were working with they didn't do anything  

Speaker 1: wrong  

Speaker 0: and they were just the wrong place the  

Speaker 1: wrong time.  

Speaker 0: we did have folks that Had gone down a different path in life to do the things they need to do provide for themselves and their families and so we wanted to give them a clear path forward to do the the thing that I love ones and so we're trying to get them skills.  It's just skills that they can put into practice to get to a point where they had a strong stable high-growth career and then that's that's kind of the birth of RC.  And our dirty little secret that I guess some folks know is that the first dollars we ever took in were from the Boston Police Department, because they saw our program as, hey, we're going to spend all this money on incarceration, rehabilitation, why not get ahead of it?  And they have some funding to help one of our first bootcamp.  

Speaker 1: Yeah, that's awesome.  Well, it sounds like there's money well spent given the impact you all have had over the past six years, I think he said.  So you've got resilient coders going.  You're teaching there.  And it sounds like you're having a big impact.  But was there a moment where you're like, I can have an even bigger impact by leveraging the power of the internet?  Like, what was the process that, and maybe I can back up a second to just say, what is 100 devs?  

Speaker 0: Yeah, sure.  So 100 devs is a collection of engineers that help build a completely free live software engineering training program for anyone anywhere.  That was kind of our Genesis.  Now we're also building and we're going to be piloting this year a full service digital agency where real clients come to us to build products.  and get to tap into our amazing alumni that have gone on to work at some of the best tech companies in the world.  we're talking Amazon, LinkedIn, Slack, you name it, we have an alumni there.  They come back to work on these projects.  Each project is getting broken down into the individual tasks.  And then as you're learning, you're also building real code for real companies and getting paid actual money to do it.  We mentioned early on that free isn't always free because it required you to have an extreme privilege of time to work through all this material to give up your nights and weekends and we wanted to do something that helps soften the blow for folks that are going through our program.  Our program is entirely free.  Every resource I have ever given out is always free.  I don't work with anybody.  It doesn't have a free version or something that we can have access to.  But we did a poll not too long ago that said, hey, we realized a lot of you can't commit the time or the take the time away from putting food on the table.  What would it take?  for you to be able to focus.  And it was $200 a week.  It was the average.  We can make that happen.  We can figure out a way to get folks those funds that they can focus and get through a program like a hundred doves.  And yeah, so now we're at the opportunity of discord is 60,000 plus strong.  We have alumni all around the world.  And we're just trying to figure out a way for folks to be able to unlock a stable high-growth career put food on the table, support themselves, and their family, and their loved ones.  Luckily we found a lot of folks that believe in that idea, and mission two, we felt a wonderful community around it.  

Speaker 1: Yeah.  And so the mechanics of the community, like.  first of all, it goes with that thing that I'm in awe of what you all are accomplishing with hunter devs.  I've had so many positive interactions with people who are both using like the free cocaine curriculum and in the hundred devs.  I guess you call it like a cohort or an intake group.  Yeah.  Like basically a bunch of people working together through a set kind of like week to week program.  And I, you know, for your co camp, we have experimented with like cohorted programs and like, let's see if we can get all these people.  But what we found is like, it's, it's a lot of work to organize.  very aware of and like frecocians philosophy is like let's just build the resources at scale put them out there.  Yes, lots of kids who are the you know the son or daughter of like software engineers in Palo Alto are going to use frecocamp and they're going to use them or free and they you know probably could have paid a bunch of money to have computer science student like tutor them or sling right.  but also a lot of kids who are in like a village in rural India or in like kind of like a failed state which a lot of people have smartphones and can get on the internet even in places like Somalia.  right North Korea right people in North Korea use free code camp sometimes and essentially they can.  they can learn Even though it would be normally prohibitively expensive for them to buy a 20 dollar course on a course website, for example.  Our philosophy is we need to make sure that there is a baseline that everybody has access to comprehensive math programming computer science and English education.  So that everybody, regardless of their circumstances, if they have time, which not everybody does, but if they have time, or they can figure out techniques to make  

Speaker 0: time,  

Speaker 1: to learn even a little each day, then they can make steady forward progress toward the eventual goal of working as a software engineer.  right so so that is kind of like.  our philosophy is like let's just make tons of really high quality free stuff that's essentially subsidized by the community like the people who are able to give the alumni sometime like we got a gift for $250,000 the other day from companies.  Yeah, the CEO of Comtea is a fan of free co-camp and uses free co-camp to expand his JavaScript knowledge.  super chill dude.  You know we Darrell Silver founder of Thinkful kicked in $150,000.  And then, of course, we're getting grants from like, you know, Linux foundation and MongoDB and Google and a lot of other organizations.  But a vast majority of our support comes directly from the community from people who donate.  So free code gives it already slash donate.  

Speaker 0: All right.  But my point is, yeah.  

Speaker 1: And thank you for supporting our charity.  I didn't even realize I apologize.  But maybe you're getting my periodic donor email, like I said, donor email.  Yeah.  my point in all all this little tangent is to say that like free co camp like we don't have the bandwidth to do things that don't scale and you are doing things that don't scale at all really like.  maybe you figured out some techniques to get like cohort to scale and get like because I mean you mentioned your discord has 60 thousand people in it but like actually getting on stream and like teaching for like a marathon on three five hours like how long you go.  it's really inspiring.  definitely catch some of the livestreams you can or I've watched.  I watch everything at double speed so I watched like the video on demand but like I guess you saw it from coming from the like intensive program where you're teaching folks like you saw the merit of quality not just quantity or like.  I guess like content like.  I'm not like doing things that don't scale really And helping in people individually, it doesn't really scale, but that's not necessarily the idea.  The idea is to give a whole lot of attention to a smaller number of people and to really make sure that those people can ramp up to an impressive.  He said, like, what was the figure you said was like the median income of people who graduated?  

Speaker 0: 90,000 per person.  

Speaker 1: That's a lot more than I made in my first developer job, a given.  if this is embossed in like the cost living might be higher, but I mean, that's a lot of freaking money for people that like.  I imagine some of these people don't have university degrees.  I didn't even know that you hadn't completed your degree, although dropping out of Yale is probably very different from dropping out of like, you know, that's all right.  University, right?  Yeah, but sorry I've been talking for the last three minutes.  I'm just very excited about how you approach this and I want to make sure our audience appreciates the I guess counterintuitiveness of what you've done and how you've been able to like people weren't doing this because it was perhaps counterintuitive to do so.  It was like, for all of you, very dumb.  

Speaker 0: That idea, don't you?  Yeah.  

Speaker 1: So maybe you can talk about that.  Like, how do you have to do stuff that doesn't scale?  And like, ways that it doesn't scale.  And then ways, like, techniques you figured out to scale in a little bit.  

Speaker 0: Sure, yeah, happy to.  I think the first thing that was just like shout out for your code camp.  Like, you all laid the foundation for so many folks to learn.  And one of the things I am always, I've been, especially, and I think that was on our discord as I think a lot of folks that go into this space don't put in the work to do the things that really matter the most.  And so one of the things I've always admired about free code camp is this commitment to filling the gaps.  And so realizing that most people don't have the privilege of speaking English.  So we're going to build a full, like how do you speak English?  course, right?  That's huge.  It's like very progressively thinking about what do our folks going through our program absolutely need and so that's why I'm so happy that Free Code Camp exists.  It's why it's one of the first things I always recommend to new folks getting into tech and why I think you all continue to be so successful because it's just like this relentless pursuit of making tech more equitable to everyone and so That's why I said really early on in this conversation.  I look up to you so much and it's a lot of that ethos that I've tried to bring to a hundred devs for 400 devs.  we got started during the pandemic and the pandemic hit.  things got really bad really quickly.  so people always like to talk and boss and about like a 2% unemployment rate.  but I knew just from looking at the actual data we looked in our communities of color is already at 12%.  this is pre-pandemic.  He looked during the pandemic, it jumped from 12 to like 33% in some communities.  And so it got real bad, real quick.  And I just, if you are already in tech, or if you already come from a privileged background, I don't think people really understand what that means.  when right now, like if you look at the most recent like labor data, like the median income, median, median is 56,000 in the US.  And so if we have that percent of folks under it and we're seeing 33% unemployment and then labor data actually includes like eligible workers it just got real bad real quick and it continues to be a really rough situation from folks.  and so I'm not a doctor.  I didn't have like a skill that I thought that could be helpful to folks that were being affected by the pandemic but I had been teaching for a while and I knew that I could get folks skills to make them more employable.  and so a hundred dev started as a way of getting a hundred folks into software engineering.  jobs were way beyond that now and I wanted to make a live cohort where we would meet twice a week on the internet and I really thought it would be like you said just a handful of folks maybe five ten people.  we did a pilot that was really successful.  our first cohort was about three hundred people every single class.  That was successful.  with another cohort that was like 30,000 people every single live, every single class.  And so we kind of just built slowly where we were able to kind of jump from zero to 300, 300, 300,000.  And we always joke that we're baddies.  We're baddies writing bad code.  Like it doesn't matter.  It's about getting the skills that we need.  It's about figuring out things on the fly.  And we just live up to being kind always to ourselves to others.  And as long as you're willing to say, you know what?  We got to figure this out.  We got to figure out how do we do this at scale?  How do we have 3,000 people live in a class getting help and not feeling lost?  We had to figure systems and ways of doing that and building community that wanted to support that number of folks.  

Speaker 1: Awesome.  Well, what you said there first, like I just want to call it that, that particular insight, we're baddies, writing back, it doesn't matter.  So when I was a teenager, like really interested in writing and reading lots of fiction and literary journalism and stuff like that, I would always hang out at Denny's like till 2 a.m.  just talking to random people and learning from them and just writing and stuff and one time like our server he he was kind of a drizzle looking dude like he would.  he would not look at a place in like a bullpen in a newspaper newsroom if such thing exists in 2024.  But he's advice me, I'll never forget what he said.  He said, throw away your first million words.  

Speaker 0: And I love that.  

Speaker 1: Damn, a million words.  That's like years of writing.  but just accept that it's gonna suck.  and the same thing with your code projects.  and really the same with any endeavor you take.  like.  I've been trying to get better at base for the past three or four years and like takes me forever to record the base intros for like.  

Speaker 0: I thought you like the one of the videos I watched.  you did it and then sat down.  so that's what I was.  I'm telling you that's what I was expecting for for today.  so yeah that I'd think of the base intro live just for me.  

Speaker 1: but I didn't want to bother you with, like, watching me screw it up with several times.  

Speaker 0: Yeah, I love it.  

Speaker 1: But yeah, like, you just have to accept that the first few thousand hours you spend with an instrument or with like a programming language or with anything is going to be not ready for prime time.  You know, my wife, she grew up in China.  We met in grad school and she's now a U.S.  citizen.  We brought her over in naturalized or after grad school.  If we got married, we've been married 19 years.  She loved, like, piano, right?  And one of the things that she says in China, like, people take piano extremely seriously.  And they have this saying in Chinese, which is basically, like, these spent thousands of hours behind the stage practicing for, you know, five minutes on the stage.  You know, like, that's just the nature of the game.  And with code, like, if you're writing some serious system that's gonna, like, code that can be run millions of times, right like if you're making an open source contribution to free code camps code base and it's in the platform itself and this component is going to be rendered 50,000 times a day or something like that.  like.  it's okay that it took you a whole lot of work to get that like code into the shape and it's okay that it took a lot of practice and trial and error before you got the skills to be able to create that code that code just going to keep going right like when Elvis goes up on the stage and he's being filmed and he's playing.  I use Elvis because I love Elvis.  He's the man so I mean like that guy practice like crazy.  that's definitely the same with for example like James Jamerson the greatest basis of all time.  basically or You know, like pretty much any musician, they're going to practice like crazy.  They're going to rehearse obsessively, and they're not going to be satisfied.  But once that recording is made, once that record is cut.  If you, uh, there's a great, um, documentary about Lonious Monk, uh, the Jazz pianist, right?  And he would only do like two takes.  And he's just like after two takes.  whatever I do is going to be garbage.  I'm done like use one of those takes, but how we got how he got so good that he could actually nail it in one or two takes.  was he practiced like a maniac and he spent so much time in the piano where a lot of you know I guess amateurs would.  it would just be like good enough.  he was not with that and so I feel the same way about.  like any undertaking, but like certainly with coding, it may seem like coding is not like a synchronous, performative event, like where you're having to sit down and perform in that regard.  You can go in, you can edit your code.  You can iterate on it.  The tools have gotten so much better.  Like free cooking up every millisecond or two, you're going to get the tests, like telling you whether you've met all the test conditions or what you need to keep tweaking your code, right?  So you have all these tools to iterate, but at the end of the day, like you should still try to approach it like a performance.  You'll get a lot better if you don't rely so much on the tools catching what you're doing.  Anyway, I'm kind of going on a tangent, but I just wanted to riff on like the insight that it is.  We're all baddies.  We've been writing badgoat.  It doesn't matter because you throw away your first million words.  You spent thousands of hours at the piano before you're playing anything that's worth anybody listening to, right?  Like you just have to accept that this is the nature of reality.  This is the nature of doing anything.  that's hard is it's going to be hard?  you're going to have to work hard and you have to just have that mental fortitude and that's something that comes through in your.  your video is like it's so supportive like I love the way that you're just like it's all good like just this happens to.  everybody has to go through this you know, I always like to say like.  there's some people maybe like slightly better at programming like aptitude-wise or like they may have some intrinsic like cork.  that makes them marginally better at programming.  but those people were probably just forgotten how much time they spent at the keyboard when they were kid if they were publishing enough to grow up with computers.  right like you know when you hear like Bill Gates talk about how like oh I don't actually like write out the code until I figured everything out in my head and then I said that's nonsense.  Bill Gates did not just sit down and like right basic from memory because he'd like been moving everything around his head.  people can't do that.  I don't believe that.  maybe there are some people that have like some extreme form of like like extreme brains that you do something like that.  but I don't believe that Bill Gates could do that sort of stuff.  I think he's just talking up the mythos You know, he's trying to build up hype for himself and like it's this old kind of like old school elitism that a lot of the early devs the old guard have and just don't buy.  that hype is all I want to say and I want to thank you for like dispelling a lot of that whether you're intentionally dispelling or not.  

Speaker 0: just telling people like coding is hard right like not not sugar coding it we call it the trough the sorrow which actually comes from like startup worlds one of the things.  there's this very classic graph of like um this like really big hill that you go up when you're really excited about something like yeah I'm going to wear the coat on you buy a thousand demi courses because buying stuff feels good even though you're not going to do them and get the very top and then you start like day one of any actual coding program and then you just plumb it once you realize how long it's going to take and then you spend all that time going through the trough of sorrow.  and then the most like sick thing about this is that the most twisted thing about this is at the very end there's even further dip.  they have to go through where you it's the and then you get into what they call the wiggles of false hope.  so even after you've gone through you've learned everything needed to learn.  You start actually interviewing you and you get the job and you just get rejected, rejected, rejected.  And so there's just this huge curve, long-trough of sorrow that for a lot of folks takes years to get through.  Then once you get to the end where you're like trying to actually get something out of it, it gets even worse and then slowly, slowly gets better.  So the thing that big thing for what we do like you mentioned at a hundred devs is just helping folks manage that frustration.  We have like three key things that we just say every class almost, imagine frustration, be consistent and take care of yourself.  When you look at how adults learn, the reason why adults kind of probably don't learn as well as they think they could is because they don't manage that frustration piece.  When they look that, language fluency in like language acquisition.  They thought that we probably lost the ability to be fluent in our teenage years, but they found that that probably isn't true.  It's just once you get out of those years, your time is entirely your own.  And so what you rather do is think that sucks for two years or would you actually sit down and do it.  And so it folks that can manage that frustration to actually be get through the things they want to do.  And so that's a big part.  And it's also why we're live.  When you look at of their programs.  I love Dr.  Malen out of Harvard.  Yeah, 50.  Usually the CS50 is now on free cooking.  Every single article they've ever put out and one of the ones that are really interesting is they actually published all of their data for CS50 in the beginning, which is really cool to read through and you notice that They had like 150,000 people that signed up for like the first one of the course.  They said like 100,000 people that engaged, but only like 1% completed it, right?  And so that was something that really kind of stuck in my brain because when you look at that, you like in-person program, like the live in-person program, it was like 99% completion.  So there's something there and I think the being lied, being with the cohort of other individuals, being with real people, being with community, can help you ease that frustration, get help when you need it and be a little bit more consistent and actually get to the end.  

Speaker 1: Yeah, absolutely.  Like there's positive peer pressure, essentially you have like having your peers going through it with you.  Like that's the beauty of cohort of models that is difficult to reproduce.  But if you can reproduce it, like Leon Noel has, then man, you've got like lighting in a bottle.  like you've got people who are going to have each other's backs and like when you're down they're up and they'll help you get back up right.  so you help each other.  so that's kind of the genes of 100 devs.  maybe you can talk a little bit about the mechanics of it.  obviously you've got the discord.  you've got the twice weekly streams when classes in session so to speak and they are high energy streams.  man, I just had to comment.  like you go like the boom boom boom, like you're like the cool astronaut back around.  It's like watching like a gamer on twitch like like watching somebody play and like you know CSGO at a high level or something a little bit of education right like into in my mind like you're pioneering kind of a new approach to education that is based off of like people already familiar with like games and anime and all the other cultural kind of touchstones and you're just like hey let's let's relate this to software engineering.  right and is so you're doing a great job of that.  but if you can talk about an addition to the stream in addition to the discord what are the other aspects of 100 devs?  what are the other instruments?  

Speaker 0: Sure, so we do a live cohort model.  We basically do a cohort a year.  And when that cohort is live, we're live on Twitch twice a week for about three hours for a class.  We take about an hour to do review, space repetition, active recall is super important.  So we start that first hour just like reviewing and then about two hours is something new.  We do that twice a week.  and then we have office hours on Sunday, which is another stream typically on Twitch or on Discord but it's just people asking questions and getting things answered.  Outside of that, there are so many other expectations and things that you're working on.  that's about 10 to 20 hours outside of that twice a week class.  Networking, all the things that are going to actually move the needle for you to get a job.  Our joke is that we're not really a coding program, we're a getting a job program and so all the things that you can be doing to get a job have to be happening when we're not live.  Then for folks that can't participate in a live experience, we have our lustrous ketchup crew, which is a group of folks that are working through the classes at maybe a little bit more of their own pace.  We have a lot of folks that are around the world that can't make that live time work for them.  So they get together, they're on our discord, working through the classes together.  You'll often see like 20 people just in a voice channel watching a class together.  They've just, they've come together to do.  So you can move through the material at your own pace.  When we're outside of the cohort right now, we have our huddles twice a week.  And the huddles are just like a traditional stand-up, we're just trying to move away from the back.  I think it's a slightly ableist term, so we're, we introduce them as huddles.  

Speaker 1: And yeah, that makes sense.  I never thought about stand-up as an ableist term.  But yeah, a lot of people can't stand up.  

Speaker 0: And so we We'll have anywhere from like 500 to 700 people every huddle, just asking questions, sharing, we call the job hunt, the hunt, sharing what's happening on the hunt, how they are negotiating, they'll come up live, we'll help them negotiate offers, they'll talk about an interview that went great or poorly.  and just by showing up to these huddles, you're learning all these, it's so hard to go through life, with everything that you're experiencing, being the first time you've experienced it.  It doesn't have to be that way, specifically with when you have a community that's also doing it.  So the huddles are our way to expose people to the realities of getting a job going and interviewing and actually seeing all this knowledge and so that when you're in that situation, you can experience it too.  We have the huddles twice a week, and then we have a lot of independently generated community things.  So we have Bankie Brunch, shot up Bankie Brunch, which is a group of folks that come together to work through behavioral questions, technical questions, pretty much every single day.  We have groups that are working on projects of which channels are always going.  None of this works without community and a wonderful group of mods.  I'd be remiss to not say, Miriam, Devaker, Mayan Wolfe, Claire, these folks that like blow that make like all this work and for free and volunteering so much of their life to like make this happen.  

Speaker 1: amazing.  Yeah, like free cocaine, similarly, to drop our lives through our organization, very community driven like.  we have tons of mods on the forum on discord.  We open source contributors that are just dropping in and fixing little bugs making sure that our copy is readable as possible to monitor being the speakers making sure that like It's a lot of contributor driven activity and it sounds like you've figured out a way to encourage a lot of people in your community and power them with, you know, you can delegate some degree of, I guess, authority to them so that they can go out and they can just experiment and build out different things.  One of the things that you said that I thought was really interesting, I do want to talk about it.  Let's talk about space repetition and active recall, I believe, of the terms.  Barbara Oakley teaches the learn course.  The most popular MOOC massive open online course ever other than maybe like CS50, which we were talking about earlier, learning how to learn.  It's not just obvious how to learn where tactics are.  Right, there are phenomena that are ingrained in the human brain from, you know, evolution from like the, you know, Savannah's of Africa basically.  Yeah.  That we carry with us today that we can use if we know how to use them.  And one of them you mentioned is space repetition.  What is space repetition?  

Speaker 0: Yeah sure so I guess kind of to set the stage real quick is that a lot of folks that attempt to learn how to code are not successful.  We know that we know the drop-offs.  We know that that's just the reality.  and a lot of times those people feel like that it is them that it's a they.  they do not have the ability to learn how to code they do not have.  there's something about them that would stop them from being successful as a software engineer.  And if someone that's worked with thousands of people, like literally in the classroom, my finger is on their keyboard, I just know fundamentally my heart of hearts, like outside of a cognitive impairment.  that's just not true.  And the thing that I found is it's just that most people don't know how to learn.  And it's almost criminal that our school system doesn't actually teach us how to learn that every textbook doesn't have some very fundamental things at the beginning that help you remember and learn this material.  So the difficult thing about software engineering is that it's a cumulative career.  The things you learn this week, you might need two years from now.  And so there are two really fundamental Learning techniques that Dr.  Barbara Oakley does walk through.  that I really.  it's my favorite one of my favorite courses of all time.  that brings up where as humans we forget stuff very quickly.  So, if I gave you a three letter code, this is called the M&H curve, it was a study of one, it's somewhat been replicated since then.  But basically, this person just tracked a new three letter word, a three letter code every day.  And they found within the first like 30 minutes, there was a 20% chance they'd just forgotten it.  The first 30 minutes, so imagine trying to learn is really complicated coding stuff.  And within the first three minutes, you're going to forget it.  Then if you look at that forgetting curve by the end of the month, there's an 80% chance that you forgot in that very simple thing.  for a lot of folks that are going into coding education, they don't realize that they're forgetting.  curve is very steep.  They learn something a month later, they've completely forgotten it.  Yeah.  Start back over and that's super frustrating.  So space repetition is using a tool that makes the material come back to you when you need it most.  And so a typical tool for this is Ankee or Ankee, how do you want to call it?  That's like Ankee.  

Speaker 1: It means to commit to memory in Japanese.  Yeah.  Ankee, so do.  

Speaker 0: Exactly.  And so it is a flash card tool that has an algorithm behind it.  So that surfaces the information when you need to see it.  So if you're doing good study habits, which is a huge portion of what we teach at 100 devs, it's just like how to study.  You're using this tool so that the things you learned about HTML, you're not forgetting when we're talking about like MongoDB.  Right?  And so that speech repetition is going to help you remember stuff for the long call, which is really important for a cumulative career.  But then the other thing that's even more important in my opinion than spatial rotation is something called active recall.  Coding can be done through like video tutorials can be done through text but it's a lot of information the process and most people just go through it.  That's not active learning.  They feel maybe some sort of productivity from having watched tutorial or having read a blog post, but they didn't actually engage with that material or learn.  And a lot of times, like for me, I teleport through information, like I found reading a book, I'll get through three paragraphs and like what the heck just happened?  I feel like I've just teleported through that.  

Speaker 1: I even heard that expression, but that's a good way to describe the phenomenon, especially, you know, people who have like ADHD and stuff they may just be like, halfway through, you know, a book maybe.  You just, your mind wanders.  And if you're not constantly kind of trying to engage with it, you won't necessarily retain it.  

Speaker 0: Active recall is the way that that helps me as someone that does a VHD like do this.  And so, Active recall is just recalling the things that you just learned or just read or just watched.  And for folks that do have attention issues, I recommend doing that after each paragraph.  I recommend doing after each chapter end.  And you're just literally talking to yourself, what did I just read?  What did I just learn?  And you're saying it out loud.  The research behind it is really shocking, like staggering differences.  You can learn something once, actively recall it once and do better than somebody that re-read it four times.  Like you can do a quarter of the effort and have better results, just with this one technique.  And the fact that that's not like stamped in every single textbook ever made is absurd.  

Speaker 1: Yeah, it's.  I mean, like we could talk all day about like the shortcomings of the US education system, like both both K through 12 and higher ed.  And that would be completely clear.  There are a lot of very smart people who are working very hard to address a lot of these deficiencies.  but the fact that we're having to explain what active recall and, you know, space for a petitioner, when they're, you know, like time-tested phenomenon that you can leverage.  So just a quick note about actually recall, this is one of the reasons why Free Code Camp's entire curriculum is interactive.  It's because you have to grapple with things.  Otherwise, it's just, it could've just blown right past you, right?  Like, everything needs some sort of evaluation criteria, some sort of comprehension check.  And if you're doing something that doesn't have a comprehensive check, if there's not some right or wrong answer, take your moment to summarize what you just learned or relate it to something else you've learned, thinking about it, just grappling with it.  That can absolutely help submit those, you know, synapses, right?  Well, that's the thing that connects the synapses.  Actually, not the synapses.  I can't remember.  But yeah, like, And it's something anybody can do, like when I'm reading a news article or something like that, right?  That's not interactive.  Now, with GPT or something, I can throw it in GPT and say, hey, come up with like a multiple choice question based off the started, but I'll do that sometimes.  And not just for like actual recall, but space for repetition.  right a bunch of notes and then review them a few days later or use a tool like onkey that can systematically do that, we can load a bunch of flashcards.  A lot of learning platforms have space for repetition just built into them.  If you go through the free code can't?  curriculum, it's designed in such a way that we're going to reintroduce concepts over and over and over and you're going to be like, oh yeah, I kind of remember this from like  

Speaker 0: a few  

Speaker 1: hours ago, you know, like, or a few days ago, like, but, but we're intentionally trying to, you know, incorporate that.  And one of the things I think talking about the free cocaine curriculum, let's talk about 100 devs and like what you all are, and is it 100 devs or 100 devs?  

Speaker 0: I could say either.  100 devs.  

Speaker 1: 100 devs is shorter.  Yeah.  It sounds more like easy to say.  So with 100 devs, what is the coursework that you're going through?  Are you using MOOCs?  Are you using open textbooks?  Are you creating a lot of the stuff yourself?  

Speaker 0: Yeah.  I think there's like two important things.  I really don't believe the content matters.  It's all like where jobs program and I think the biggest mistakes people make is like an over-investment and the idea that the thing like that the learning aspect and not all the other things that move the needle.  So we're very much to kind of tracks like we have all this other stuff we're doing outside of the learning and then the learning as well.  So the learning is very simple.  We do full-stack JavaScript and And I do a lot of custom, like I make all the lectures basically with the slides and all the funny stuff that you mentioned on Twitch.  And we move through that material together.  But a lot of it is supplementing with other things that I think are just the best free courses out there.  So in the beginning, our students will use some free codecab.  as they get a little bit further along.  They'll use some things maybe from full stack open that are trying to supplement the things that we're doing in the classroom.  And any time that we're doing something, it's always a free resource.  It always is a free trial.  That's like a free app.  

Speaker 1: Love that.  

Speaker 0: Yeah.  Yeah.  And so we give you the skills to be a full stack web developer.  We do some of the other kind of rounding out to give you the software engineering skills set.  The tooling and things that you might use.  And then as you're getting ready to go in the hunt, the data structures and algorithms, you're going to need to be successful.  But that's kind of like the coding stuff.  outside of that from the very beginning there's pretty stringent requirements in terms of like.  you're networking so you are posted beginning three connections and two coffee chats every single week throughout program.  you're doing things that are going to be opening all these doors to help you get a job and that's kind of another.  really I think that's where our curriculum shines is those things that are really helpful and impactful for helping you get a job actually have a lot of folks that do other boot camps which we love like.  I don't really care where you come from what you do as long as like you're getting to where you want to go and a lot of folks will join us just for like the how to get a job portion which I think we're pretty strong at awesome.  

Speaker 1: So it's so interesting and important that you distinguish yourself as like a not learning coding program, but a get a job program.  And I just want to emphasize like even though we put a great deal of time and energy into our curriculum, it's absolutely like if you took a look at where all the donations we get and things like that go toward its instructional design platform development mainly for the core curriculum.  because for us it is important that there's a really good core curriculum, but I'll be the first to tell you or I guess the second since Leon just said it.  Getting a job as a developer is really three things in my humble opinion.  And if you haven't read my free book that I published about a year ago, learn to code and get a developer job.  I'm not really the name of the book.  Just Google that or Google code book.  And I learned to code book.  I think you should find it pretty quickly.  And by finding it and clicking on it, it's spending a lot of time on the page.  You help ensure that Google can do needs to recommend it to people.  skills are only one leg of the stool.  Network and reputation are the other two.  And we've talked enough about skills.  Let's jump into networking and building your reputation, which are two things that are also instrumental to the 100 devs program.  Yeah.  Like what is the value of a network?  Why is networking worth your time and energy when it's such an awkward thing to do?  

Speaker 0: Yeah, we have.  It's just like we have like a lot of like in jokes and things like that that if like you're not part of the community it's like weird to bring up.  but we refer to most people as clickers.  People that learn how to code and then they just click apply and clickers don't get jobs.  Maybe everyone's.  in a while somebody gets lucky and they click on a button and they magic can get a job.  but especially in this market, clickers don't get jobs and so we do everything in our power to never click apply.  We want to make sure that we're talking to real humans that can see our humanity, that can see our ability and our skills and the things that we can do so that we're not just discarded by some AI, ATS system.  And so from the very beginning of 100 devs, we're asking you with generalized networking.  And networking, I think it's like a scary term that I don't think should be, to me networking is just making friends.  And you want to do things in the beginning that gets you comfortable with making friends.  And so you don't have to start networking by going to your local Python meetup, super hard core.  Like, oh no.  If you like Pokemon, go play Pokemon on at your local league, right?  Or like, if you like hiking, going to join like a hiking group and just like share, passion with some others, get comfortable talking to people.  And then eventually apply those skills that you learn to.  Places where developers are more likely to hang out and turn those acquaintances into friends.  And then by the time you're ready to go on the job point, you ultimately won.  hundreds of people that you've interacted with over the past year, that you could go to and say, hey, you saw me where I was.  Here's where I'm at now.  Who should I talk to?  I'm looking for a job.  And that's really successful for people.  So that's phase one of networking.  Phase two is once you go on the hunt.  It's very targeted.  We call it building our hit list where we identify the companies that are actively hiring.  identify like three to five people in each of those companies and we're doing outreach to getting communication with those folks.  learn more and what we're finding is that a lot of jobs just don't get posted A lot of times folks will be applying for one job that they wind up getting a different one just because they like the person.  We have this idea that tech is this meritocracy where if you know the skills, you get the job, it's not.  So people want to work with people that they like, they want to work with people that they know and trust and you can make that happen for yourself by really kind of going this networking your way in pathway.  

Speaker 1: So the term meritocracy is.  it was like actually like a joke because the author was like.  this doesn't exist.  This is absurd.  Like it's who you know it.  like your skill unless you're I mean even like the most demonstrably good pianists.  for example to talk about pianists we talked about it earlier.  like somebody saw, you know, um, skill in them and like help them get absurd, you know, enrolled in some observatory or they had that time to play piano a lot with all the other kids were working in the few factory, you know, in the, you know, industrial revolution or whatever, like it takes.  So everybody circumstances are different.  So I just want to, like, put the bed, because I've never talked about this on the podcast, but we don't use the word meritocracy on here, except to say that things aren't meritocracy because they are.  It's really good.  It's the thing that they are.  The person who came up with it, I think, in a book was like just joking about it.  Yeah.  But he defined meritocracy is like, I think effort and intelligence.  And how do you build intelligence?  through effort, right?  Some of it may be like, you know, endowed upon you.  But for most part, we all work really hard.  I study, you know, foreign languages like an hour a day.  I play bass an hour a day.  And I'm like, I still suck at those things, but sucking at something is the first step to being good at something.  

Speaker 0: Right.  

Speaker 1: So I also wanted to describe or like define like an acronym.  A T S is applicant tracking system system.  

Speaker 0: Yeah.  

Speaker 1: When you apply through like a web form, you're like applying into some algorithms.  that can be like, OK, we didn't ask if they have a college degree because it's hip to say that we don't look for people who have college degrees, but in reality, our system is going to just filter you out because you don't have a college degree.  We didn't put it on the thing, but you know I think I heard some study that like it was a recent study like 700 job postings that didn't say they required a degree.  like zero people got those jobs for software engineering for those roles even though they didn't say because If you don't have a degree, the ATS just simply filters you out.  No human ever even reviews it, right?  But like the way I got my first job as a developer was through meetup.com, going to like local Ruby developer, meetup.  And I got a job as a Rails developer.  And the interview was very similar.  Maybe you can describe the typical interview, the hundred devs folks go through because it's not like a lead code white board.  Maybe some of them, but a lot of it is like, hey, I've already seen your projects.  I know you can code.  Yeah.  Are you a good fit for our organization, right?  

Speaker 0: It's about 50, 50.  

Speaker 1: Yeah.  

Speaker 0: We're talking across hundreds of people that have gotten jobs that I've literally seen, right?  And people have come and talked about them during our huddle.  So we have a celebrations channel on our discord, where you can go through and see hundreds of people, their stories, how they got the jobs with the interviews we're like.  And so that's really powerful to know that.  But it's about 50, 50.  And it's when they, when they do an interview, We're talking about sometimes there's not going to be like a lead code style portion.  There's still going to be behavioral questions.  There's still going to be technical questions.  There's still going to be walking through a project.  You might do some light like coding together, but for about half the folks that have got jobs, they haven't done like a lead code style question.  The other half you will, and then there's varying degrees of it.  And so so many folks focus on like grinding out lead code until their eyes bleed and they're just like Yeah, if you're going for Fang, sure, that needs to be the thing that you do.  But if you're going for a local health care company in your medium-sized city, They're probably not going to know, like, they're probably not going to go through and do that level of interviewing.  And so one of the things we always say is, like, don't go into interviews like an accident, always ask what you're about to walk into.  They'll tell you, like, almost every single time, if you just say, like, hey, like, I'm putting a lot of time and energy into this application, I would really appreciate just being fully prepared.  What am I about to walk into in this interview?  And they'll tell you, oh, you're just going to meet with so-and-so and talk through a project.  Great.  Now you know how to prep for that interview.  Don't ever go into an interview if you don't know what you're about to walk into.  It's about half of our jobs have been not really needing some of those more aggressive skills, but it's a huge smell test.  It's a sniff test.  We like to say every single person that starts off at 100 dev smells.  There's something about you that's going to stop you from getting the job and it's your job to like figure out what it is.  Get rid of the smell and make sure you come across as a who will confident professional that's done this been there and is ready to get to work.  And if you can do that, you're gonna be really successful getting jobs.  And even folks that wanna go the other more traditional interviews with like the leaked codes and things like that, you're still passing a sniff test.  I have seen folks that I consider just amazing, even done like competitive programming that do well in interviews and don't get the job and they wonder why.  And then you look at the resume and you look at how they present themselves.  They're narrative, all that stuff matters.  It really matters.  You need to invest time and opening that stuff, those doors as well.  

Speaker 1: Yeah, absolutely.  And I just want to emphasize, like, if you can figure out what that smell is, maybe it's that I don't have a degree.  And like, I'm getting filtered out of ATS, or people are just not looking at me as a serious, like, a serious candidate just based on that virtue.  You can absolutely correct for that.  And I have lots of friends, like, like, a lot of people in the free code campaign.  dropped out of college or never went to college, right?  And it's just one of those things where you had to figure out like an empathize with like the HR person, whoever you're talking to and figure out what is their their specific for because usually they're just trying to figure out a way to quickly weed people out.  So to speak, so they're like, why don't you know like?  

Speaker 0: I don't know, one of the things we're trying to really hard to understand is make sure you know all the hacks and the secrets and what's really happening.  and so recruiters are using some sort of like we said ATS, some sort of filter, you know what the adds to your resume to get past those filters.  We use things like CV compiler which is like a website that will tell you what you're missing.  We have like our own resume template.  that's like battle tested.  We follow like the true F shape pattern.  Like if you watch recruiters with eye tracking as a video that's going really popular is done it again where we like watch the way they look they read left the right like most folks that read English.  They're looking for those specific keywords at the front load of the F shape pattern right.  So if you know these things you can.  you can get past these, like, screen segments.  And the other thing is people really need to work on how they talk about themselves.  People go into the hunt too humble.  This is like your one chance in life to talk, your talk, be proud of your previous experience.  I don't care what you've done, having that prior experience, but previous experience makes you a badass and brings different skills to the table than someone that did a four year CS has only ever worked in computer science.  You're different and that difference can be a value add to a lot of companies and so knowing how to craft that into a narrative, like a logical reason from what you were doing to why you're the best software engineer they have in their candidate pool and being able to talk about yourself highly is super important.  So if you're listening, what is your narrative?  What is your story?  Why are you the coolest thing since sliced bread?  walking into that interview?  That's what we do a lot during our huddles and 100 does we have whole nights where we just craft stories, we'll have dozens of people come up to give us their life history and we craft the narrative live and then you just see an instant difference and how they're going through applications.  

Speaker 1: Yeah.  And so first of all, I would love if you can share the links to those, the CD, I'll pull up CD compassion.  Like via resume template.  And like we've talked a lot about 100 and I feel like we could talk a whole lot more.  First of all, I want to make sure you still have a few minutes.  

Speaker 0: I'm gonna finish the go for as long as you have me.  

Speaker 1: Oh, well, that's great news.  The main limit is going to be the fact that I've drifted like literally like two liters of tea while I was sitting here talking with you.  So I think I have to go to the bathroom at some point.  But what we what I really want is just a tease out as many like high level insights that we can get into this podcast like.  I just want to end on as many pieces of actual advice, as you can share, as somebody who has become a developer, it's worked as a software engineer who's even built a successful project.  I guess three or two projects and then you're very actively high up in resilient coders too, which sounds like a really, and I want to tease as many of those out of you as I can, for the benefit of the audience.  And for the benefit of myself, I've been seriously taking notes through this whole thing.  Some questions I have are, I guess, what are some questions I should be asking?  Well, some interesting things that people never ask you that are really helpful, that would be helpful for the many people out there learning the code.  What?  Okay, what is a big mistake?  We can think about that.  Maybe you can think of some other things.  But what are the big mistake that you see developers make other than, you know, over-optimizing on their skills, for example, and not enough on their network of the reputation or figuring out how to empathize with recruiters.  And I don't mean like, you buddies with them, but like, you always want to understand other people's perspectives.  There's no disadvantage to having more perspectives kind of compact in your head, being able to build with more versatility models of other people and how they're approaching the world and what they're looking for, how you can find the job that needs to be done and you can do it for that person, right?  

Speaker 0: You know, I guess I'll gear it towards folks that are like learning how to code and trying to get a job.  I think the biggest mistake outside of the things like not investing early in networking and over investing in things that aren't going to really move the needle in terms of you getting a job is there's.  there's two things that I think lead to most folks not being successful.  And the number one thing is going into your day is like an accident.  If you're going into your day is like an accident and you don't have a game plan for your day, your week, your month and you're trying to commit to a process is going to take years.  You're not going to be successful.  And I've worked from where folks from all different walks of life, the folks that make a plan for what they want, like what do you want for yourself?  What do you want for your family?  What do you want for your loved ones?  Like, what do you want?  And then what are the steps you're going to take to get there?  That plan helps you get through the trough of sorrow, helps you get through the days where you don't have motivation when the discipline is fleeting.  How do you stay true to like what you want?  and you should have it written down.  you should have it on your wall.  you should you should.  there's a reason why I have your photo is like the background of my wall paper every once in a while is because I need to know what I'm shooting for and like.  what do I want?  like what I want for myself but I want for my community and like having that why go, everyone that's trying to learn code needs to go on some long walks with no podcasts, no music, no anything.  And just ask yourself, what do I want?  Like, what's my future?  Like, what do I want for myself?  Because until you have that, it's really hard to push through.  And so I have a lot of people that come and they say they want it, but they only kind of want it, right?  It's like a very famous doctor at Thomas speech, like they just kind of want it.  And until you really want it, and that can come from a lot of different ways, and come from being fucking hungry, it can come from wanting their respect of your family, like it can come from a lot of different places.  But until you have that, you're not gonna, you're not gonna make it through.  And yeah, so having that hammered down and really having it visible, putting it somewhere on the wall, like knowing what it is, and then every day.  Before I go to bed, I write up the three things I want to get done the next day.  Once a month, I would have my goals for the month.  Once a year, like, when I went to every couple of months, like, when am I trying to get done for the year?  And I hold myself to it.  And the last piece I'll say about this is I get buying from the folks that matter most to me.  So it's not something eternal to me.  Like, I know if I want to be successful in this.  I need to get the buying of my wife, right?  Hey, this is the thing I want to do.  It's going to take a lot of time.  It's going to take some nights and weekends away from us being together and with our family and I need you to understand why I'm doing it, why it's important and can I have a little bit of your trust and I'll prove that to you over time that it's worthwhile investment.  but I need you to know why I'm doing this and get that by and Because we don't have that buying, especially if you're like, stay still at home with family.  that doesn't get it.  If you're not being as present with your loved ones, that's going to build up some resentment.  And for a lot of folks, it's another reason why they're not successful.  So yeah, I'm going to go into your days like an accident.  Have a plan for your days.  Know what your why is and get buying from the folks that matter most.  

Speaker 1: Yeah, that getting by and it's so important because learning to cause a long, long journey.  And you get all hyped up, you get all these, you know, probably YouTube ads or ads on the side of your coding tutorials.  Learn to code in just three months and get a job being like, do 100k, like, you know, whatever.  to be fair.  There are plenty of developers who do learn to code very quickly and do get jobs.  I've had lots of friends who transitioned from working on Wall Street and they went to some expensive intensive coding program and they were able to then go get a job in Silicon Valley.  But they already had college degrees.  They already had, you know, like They probably figured out how to plan.  They probably had an understanding of learning techniques that we've been talking about.  Most importantly, they had a lot of money and they were able to focus on it exclusively and attend an intensive in person bootcamp.  That error may have passed.  It may be that it's just a little harder now.  to be able to get a job just because you should learn math, right?  Like, you used to be back in the day, you could just learn some WordPress and you could probably go get some clients new WordPress work.  And it may be that case, but with the global market and the level of competition you're going to get from places like India.  Nigeria, China, like tons of extremely educated, extremely hungry people are coming from all these places and you know frankly they're getting your lunch if you're not putting in the time and effort to.  Benjamin Franklin said few people plan to fail.  most people who fail fail the plan.  That's a paraphrase.  What do you say?  It's not anything that's perfect.  But it is like 100% with Leon's saying here.  And yeah, so I just want to emphasize like getting buy in from your family, like when I learned to code.  Again, I don't want to make this all about me, but like.  I told my wife, like, hey, I've got this job as a school director, right?  And I would like to become a software engineer.  And we had double income, we had insurance, which is a huge deal here in the US through her work.  So even if I left my job, we could continue to have health insurance.  And I just grind it every single day and I ever.  I did precisely what you're talking about planning out.  Okay, what am I gonna accomplish next few days?  Because planning is everything like.  it's so important to have a plan and to stick to a plan and to have goals that are miserable and then are within your control.  That's another mistake I see a lot of people make is people will be like my goal is to get you know 100,000 YouTube subscribers this year or my goal is to get you know a job paying like $1,000 or to get in freelance files.  You know those are not things that you can directly control.  You can't control the outcome, but you can control the input.  My goal is to, my base for an hour a day, or whatever goal I might have at any given moment.  

Speaker 0: James Clear of atomic habits has that very famous quote that I love so much that we don't rise to the level of our goals.  We fall to the levels of our systems.  And so this idea, like we have all these lofty goals, but if you're not putting in the systems, the how do you play the base for an hour each day, study your languages for an hour each day and the process for that, it's just not going to work out for you in the long run.  

Speaker 1: Absolutely.  We've talked a lot in, of course, you and I, we grew up in the U.S.  Europe and Philly, I grew up in Oklahoma City.  And here in the U.S.  even though things are not equal by a long shot, it's very unequal society.  We still have vestiges of, you know, history.  Going back 400 years, right?  Like the warp, essentially the halves and the have knots.  But in the US, we're pretty well off compared to folks in a lot of countries.  For example, like the hyper competition in places like India and China where you've got like so many people getting like CS degrees and trying to compete and so few employers.  or Nigeria, where there are so many amazing developers, like I think it's like the third or fourth largest community in free co-camp, people that use free co-camp is Nigeria.  But if you look at Nigeria, there aren't a lot of big employers.  And the government's kind of a mess.  And as a result, there's not a lot of opportunity, even though there's a lot of talent.  So a lot of those people have to move overseas, so like Europe or to the United States, or wherever they can find opportunity, right?  Like a lot of the What is the proportion of people doing 100 devs who are outside of the US?  And what have you observed about those people that might be helpful for them?  Yeah, and like just a follow-up question will take on is like, do they need to move to the US to be able to be successful in software engineering or other paths that you've seen people succeed with?  

Speaker 0: Yeah, so I would say about half our community is from the US and about half is from everywhere else.  In fact, the first jobs we ever got were not from the US.  They were from Brazil, then Poland, UK, and then a bunch of other places in South America.  And so a lot of our community in folks that have that in jobs haven't been from the US centric.  And so the first thing I always say is whenever somebody from outside the US says I want to get a job, And just tell them bluntly, it's way harder.  Don't let anyone convince you that it's going to be the same pathway, somebody from the US, it's going to be a way more difficult journey.  And there's a very couple of very key things that you have to keep in mind.  One, the visa sponsorship issue in the United States is wild.  It goes to a lottery most years, right?  And so banking on that is like a pathway into an engineering career.  if you're from a area that doesn't have like that strong of a local tech economy is very hard.  The competition for companies that hire remotely is brutal.  It's even more brutal when you look at the companies that hire globally.  So a lot of people think, oh, I'll get a remote tech job.  No, even though they're remote, they only hire folks from the US or from a very specific select countries.  So finding a group of folks that hire globally remotely, that's a very narrow pool.  So the first thing I recommend that you do is build a hit list of those companies.  They're at least you can find online.  There are a couple hundred of those companies.  You need to be best friends with everybody that works at that company.  And you mentioned building your reputation.  This is something I really recommend folks that are coming from a location that has a traditional tech economy.  Is your reputation matters a lot?  We talk about building authority a lot in a hundred dev.  So picking a niche or a topic that you know very very well, generating content around it.  So once somebody thinks about, I don't know, authentication.  They think about you and the blog post you've written and the depth of knowledge that you can bring.  That way when you're applying to these global remote companies, you have something that nobody else really has.  It's like intangible thing that helps set you apart.  And so the first thing I say is harder.  Building authority or reputation is super important and not going into your job search like an accident.  It's not going to happen if you don't have a very strong game plan and you're building the references and helping pass that sniff test that these companies are putting out there.  If you do those things, you'll be successfully filled hundreds of people in that situation and get a job.  It's just a way more difficult pathway.  

Speaker 1: Yeah and just on that note of like building authority like what are some of the most I guess immediate things someone can do let's say you already have.  this goes let's say you've been coding for a long time and you just want to be able to get a job preferably like a multinational company many of which are of course US based.  And you would love over the next five or ten years to eventually get a visa and come to the US where salaries are double what they are in Europe and where we have a high degree of freedom that people in other countries don't necessarily enjoy.  I mean, it is a good place to live, like living in the US.  Right.  I guess it's easy for me to say that it's like a middle class guy who speaks English natively and has US citizenship and doesn't have to deal with like my H1B, you know, being shifted around and like getting companies responsible for me and all that stuff.  But like I can definitely understand the appeal.  I can understand why so many people are trying, you know, to immigrate to the US every day.  But like what would be some practical ways that they can establish authority, as you said?  

Speaker 0: Yeah, so I think when you are trying to stand out amongst lots of other talented individuals, doesn't have to be anything wild, I really do think building a list of companies that are on your targeted range and the H&B processes, I've helped sponsor a lot of H&Bs.  We can talk about, like, that's a whole other beast in it itself.  That's like, you have to be at an exceptional talent.  You have to do these things.  That was your standout.  Like, that's a whole thing.  You're talking about, like, global remote company.  Like, what can you do right now?  Think about somebody that's right now that wants to, to get a job.  My, my process probably wouldn't be the H1B coming to the US right away.  It'd be these, like, global remote companies.  And then maybe expanding the companies that could sponsor.  But a lot of times, you're going to need more more credentials you're going to need like.  the degrees might actually become a thing if you're trying to go that sponsorship route.  so I recommend right now if you're someone in Nigeria or India looking at these global higher and remote companies figuring out what they do building a list of them building a list of all the people that you know that work there adding them to a Twitter list, right?  Like each person, either to a Twitter list, start engaging with their content, just liking stuff at first, don't be spammy, don't be weird, just like engaging with them, liking their content, congratulating them when they get a new project built, right?  Like building that network of folks that know who you are over time, like you become like an acquaintance.  Like you can go from a nobody to like they have no idea who you are to an acquaintance, just by regular interaction on LinkedIn, Twitter, And there's a fine line between being weird with it, right?  I don't know how to do this joke.  It's not stalking.  It's networking.  And so we're going to make sure that you're not crossing that line.  And then starting to realize what these companies have trouble with, right?  Like you're engaging with these content.  You're seeing the things that they're doing.  Are they having trouble implementing, I don't know, AI or LLMs?  Great.  That's the content you just started generating.  Build your authority about How do they integrate these tools into their daily process?  You should have a blog.  You should have a YouTube.  You should have something where you're putting content out there.  You're getting feedback from them and from community of some sort to where you're building up that, hey, I'm not just the way that says I do that.  You can look at my content.  You can look at the things I'm doing.  You can look at the things that I say I've done and be able to see that very clearly.  And also, by doing that, you're practicing how you talk about these and you're practicing, maybe English is your second language, you're getting more comfortable with these things.  that when it comes to hiring the past, the SNF test, you are because these people you've been engaging with for a year plus, they've seen your content, they know who you are, they know what you're capable of, that makes getting into these orgs a little bit easier.  

Speaker 1: Absolutely.  100% agreed.  Based on my limited knowledge, I think it sounds like you owe all my knowledge about that.  So what I would like to ask then is like let's flip this around employers who want to bring in more folks and this can we can.  we can definitely start by talking about folks from overseas.  if you want talent if you want to be able to tap that talent and you don't want to like go to some consultancy or something in some other country and say give me like 20 devs right go to info sister whatever you like.  you want to literally get the best talent from India or from Nigeria just by picking a developer by developer yourself.  You're trying to build out your company or you're a hiring manager and you're trying to build a team, you know, like what strategies, what advice would you give to those people so that they can actually find talented people and what should they be looking for?  Yeah.  

Speaker 0: I think partnerships are really great, so we work with a lot of hard partners.  that was leading at coders.  We sent dozens of folks to Amazon through resilient coders.  We sent, we have these very strong partnerships with a lot of orgs that need a good solid pipeline of talent, and so partnering with communities is a really good way to do that.  If you came to RC it was encoders or you came to 100 devs and you said give me the best of the best.  I would talk to you.  I'd make sure that your job is doing all the things that it needs to be done to be done equitably and I felt that that was the case.  I would give you all the folks.  you would have a pipeline that was full for days of highly qualified, incredibly talented talent from wherever you need them to be from or anywhere you'd want to support as well, like we can make that happen.  And so I think for folks that are looking for a good pipeline, just working with communities.  So I would of course say, working with myself.  You, I always think of Paris Black Tech Pipeline does this work really well where they're able to get you a very strong source of talent from anywhere, from entry level to super senior.  And so figuring out these different orgs that have a surplus of talented engineering talent could be a great way to build those those funnels for you.  

Speaker 1: Yeah absolutely.  and then for organizations that just want to be more representative of the folks in their community let's say like it's not necessarily remote but here in the U.S.  Los Angeles for example like there's a tech startup and they're looking for engineers what I guess general tips would you give to employers so that they can be inclusive and make sure that they're bringing on talent.  That actually represents the local population.  Instead of just bringing in a bunch of Stanford grads, there's a little like that, right?  

Speaker 0: Yeah, I think it takes champions within a company that actually care about these things.  Of course, you can read like the McKinsey reports and more diverse work for us, equals better outcomes, right?  So a lot of companies know these things to be true, but it takes someone on the inside that cares about building an equitable workforce for this to actually happen, especially when things like DI and these initiatives are being contested in the courts.  A lot of companies are becoming a little bit more shy around being tentosed down, right?  And so I think if this is the case, it really doesn't come from top down.  It comes from individuals looking around and saying, you know what?  I live in a community that is 25% black and brown, but only 1% of our workforce is of color.  There's something fundamentally wrong here.  When we looked in Boston where I spent most of my career We had the second largest tech economy but double-digit unemployment rates in our communities of colors.  There's a fundamental mismatch.  And so we had a group of individuals that realized that this is just woefully inequitable and they would go to town, they would go to fight the fight every single day to bring one person along, then to bring two along.  And the thing is It can compound.  Once you have folks in these positions of power, you can turn around and help lift up more along with you.  So I don't think it needs to be like a company, why I think, I think, anyways, listening to this call, has this ability to fight for what they know is right, to turn around and say, you know what?  I want to make an equitable pathway in my company, and I'm going to work really, really hard for the next open rule, for to be someone that deserves to be here, but might not have the opportunity.  

Speaker 1: Yeah, and that's a huge part of 100 devs.  like as far as I can tell from like.  listening to a lot of your episodes and stuff.  like instead of asking people to like necessarily donate to 100 devs or like you tell them send the elevator back down is something you said a few times like try for every one of the 100 devs cohort members the learners they should try to find somebody else who's an alum and bring them on to their company so that they can kind of uh essentially  

Speaker 0: be  

Speaker 1: increasing the number of alumnus within these organizations.  

Speaker 0: and they're free software community.  we have a word grottis right it's not it's not free.  it's grottis meaning that there's like no cost like there's no like monetary cost and so 100 devs is grotesque.  I mean, there's no money.  Nobody should ever come out of your pocket.  I never want to see a dollar come out of your pocket for anything.  There's no way that you can give us that dollar.  we don't want it.  But it's not free.  And the reason why it's not free is because we expect that when you get the job that you turn around and help three more get into the same position that you have, whether it's helping answer questions, whether it is literally helping people apply and get into the pipeline for your company, the expectation is that This community has invested thousands of hours into your success and the thing that we ask is that you turn around and give a little bit of that time back.  And that the reason why 100 does have been so successful is that we have folks that have made it to the upper echelon that are now senior developers at the best tech companies in the world that are still giving up their time every single day on our discord and our huddles to make sure that the next folks are successful.  

Speaker 1: That is a beautiful note to end on just the virtue of this organization that you birth into the world.  But let's not end quite yet.  Because I want to ask what are the future initiatives?  What does the next, what does 2024, the rest of 2024, maybe even 2025, 2025, 2025?  Three-cooking we think literally a decade out like working on this computer science degree program.  that will take another six years to complete all the coursework for plus and another.  five years together, the loans, two-nil data plus probably another five years to have the data approved by a creditors, so we can get the degree program accredited, free computer science, bachelor's degree, free, and mathematics, a associate degree.  

Speaker 0: I was tweeting up a store, I was telling everybody in their mouth, I was running and showing my wife like, look, this is the future.  This is the thing that we need the most in the world right now, and so super happy that that's on your vision.  

Speaker 1: education wants to be free.  

Speaker 0: yeah exactly like this.  is it right?  like doing the work like in?  like we said earlier I think free co-camp is amazing at identifying the real gaps like the things that people really need to be successful and filling them and having a community that's willing to step up and do that work to fill those gaps.  so it's something that.  It's the reason why it's the best donation I make every single week, it's the reason why I always send folks to free poker because I know that they're in safe hands to get the things they need done.  Free is it free for everyone, right?  In terms of time and commitment, a lot of folks that would be extremely successful in a hundred doubts, right?  The cliche line is that like, skill and talent is distributed.  Opportunity is not, right?  And so we have a lot of folks that are extremely talented that that could be phenomenal software engineers, but don't have the opportunity or the privilege of time.  They need to take that time.  they would be spending learning, driving for Uber.  doing that word ash.  They need to take that time to put food on the table for their family.  And when we pulled our collective, we saw that folks really only need it around $200 a week to make this a viable pathway.  So our huge big goal is to build out an agency model where real companies come.  They have work that they need for us to accomplish.  We have super-season professional engineers that lead those projects.  And then we break those projects down into individual issues or tasks.  So that as you're learning, you're also maybe picking up some of these tasks in a real code base, like your skills become intensely practical.  And by the time you graduate or leave 100 devs, you've built real projects for real companies with production level code, And all the money that comes into agency goes directly into those issues so that you're also getting a little bit of money coming in as you're working through it.  And we think that might make our program more equitable for folks that just don't have that last little bit of privilege of free time.  And so Like I said, we talked earlier, we're a group of people that run ahead first and they're really big audacious goals.  Sometimes it works.  Sometimes it doesn't.  Yeah.  We're going to have a lot of mistakes.  A lot of things are going to go wrong, but we're going to figure it out.  And our goal is that when we launched our next cohort, we also have this agency model in place as well, so that you're not only learning, but getting this practical paid experience as well.  

Speaker 1: Yeah, that's so cool.  I mean, that's like we're all about taking away excuses from people.  And it's in like to be fair, like a lot of excuses like if you have young kids or if you're taking care of your folks, if you're working like three jobs to be able to pay exorbitant rent in your city, you know, like those are very  

Speaker 0: reasonable  

Speaker 1: reasons for not being able to spend a lot of time coding, but if there are things you can do to remove some of those barriers to make it easier for people to commit to, and are already archuous process of learning to code, right?  And nobody, anybody who says learning to code is easy is trying to tell you something like, it is hard as heck.  It's getting easier every year.  We're not dealing with punch cards, you know, we're in higher levels of abstraction.  It's becoming easier, but it's not a Star Trek easy.  You just talked to the computer, right?  Uh, eventually won't be, but maybe in the 24th century.  The more immediate problem.  helping people free up their time so they can actually learn.  I just want to commend you on this program.  I love the idea of getting people out there doing a real-world work, getting compensation through some sort of program where they can just, I mean, even $200 a week, it sounds like it's going to be a huge lifeline for a lot of these folks and free up a lot of time and energy.  This is extremely exciting and I would be very excited to have you back on in the future.  see what you learned from running this this new uh... experiment this bold endeavor.  

Speaker 0: all i noticed awesome and well.  

Speaker 1: it's been such a joy learning so much from you not just from this conversation but just you know falling on twitter.  I'm going to add links to a lot of stuff that we talked about.  In here, I'm going to, of course, link to 100 devs.  And I just encourage people to learn more about the work of Leon.  Learn more about 100 devs, resulting in coders.  These organizations that are like, resulting in coders is a charity, like Free Code Camp, 501c3.  And there are lots of charities out there that are doing important work.  I'm going to try to encourage people to do what we've done, the two of us.  And yes, you can create a startup and make a lot of money.  And life changing money, especially if you've got family that are back in a home country that needs support, right?  Or if you have any number of different things, I will never give people a hard time about just wanting to make a whole lot of money.  If you have the means, if you are somebody who's mid-career and wants to do something in the charity space, I hope that the accomplishments of Leon and, and modestly, oh, oh, a free co-camp, like, did I?  

Speaker 0: Yeah, there's no modded, there needs to be had there.  

Speaker 1: Yes, I hope some of this will inspire you to also consider doing work in the public space, right, as a tax-exhib public charity.  And again, I just want to commend the work you're doing, Leon, and I hope everybody has learned a great deal.  

Speaker 0: I appreciate it.  Thank you so much.  Like I said, this is a dream come true.  You've inspired me so much throughout my entire journey into this and I know you do the same for so many other folks each and every single day.  So thank you for the work that you do in our communities, right, that help push this stuff through.  

Speaker 1: Yeah, and to everybody in the Hunter Devs community is watching this.  Hang in there.  Keep it up, man.  And women, you all are doing a long, grueling process, but you're helping one another.  And you know, you're making friends along the way.  So with that, I just wanted to thank everybody for tuning in.  Until next week, happy coding.  