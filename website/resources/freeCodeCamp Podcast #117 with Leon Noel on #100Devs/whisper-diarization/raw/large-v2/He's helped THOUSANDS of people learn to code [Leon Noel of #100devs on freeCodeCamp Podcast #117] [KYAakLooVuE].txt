Speaker 1: do do do.  Welcome back to the FreeCodeCamp podcast.  I'm Quincy Larson, teacher and founder of FreeCodeCamp.org.  Each week, we're bringing you insight from developers, founders, and ambitious people that are getting into tech.  Today, we're talking with Leon Noel, who, I don't know if you've heard of 100Devs, but it's amazing and it's a huge source of inspiration for me personally.  He is the founder of 100Devs and he is head of engineering at Resilient Coders.  Leon, joining us from sunny Los Angeles.  How's everything going with you?  It's a little early.  

Speaker 0: We'll see if the sun comes out.  Things are going well.  This is a surreal experience.  Thank you so much for having me.  And we'll get weird with it real quick.  I always joke that my wife knows how serious I am.  if your face is like the background of my like screens or I've had a picture of you on my desk for a little while.  So she knows if it's go time or not based off of like she's seeing you.  So it's an honor.  It's a huge privilege.  Like this is a dream come true for me.  You're a huge hero of mine and I've done so much to help so many folks and you're who I want to be when I grow up.  So I really appreciate it.  Thanks for having me on.  

Speaker 1: Yeah, well, I just want to say that it's like very kind.  And I want to say that that goes both ways, like often when I'm feeling like a little bit low energy and I was, you know, I don't know if I can get a lot done today.  Maybe I'll just, you know, go and answer a bunch of emails and not do like curriculum design or.  You know, I'll go into like the.  I'm like, what would Leon do?  He would dive in headfirst.  He would have so much energy overflowing and he would just go in there and get things done.  And so, yeah, like I do think about you a lot.  when I'm just feeling low energy, because I've watched your streams, and I've seen the amount of energy, both literal energy, like bursting forth, and the positive energy that you bring to the community.  So thank you for that.  And I'll make a little meme of Wolverine holding the picture frame, and then Leon holding the picture of me.  I won't really do that, but when you said that, that just felt hot to me in my mind, because I love X-Men.  

Speaker 0: So, um, Leon.  Did you see the new announcement?  97?  No.  What's happening?  They're redoing the old school cartoon.  Oh my goodness.  Like post-Professor X. Like the original 90s Saturday morning.  All right.  No more.  Everybody stop the podcast.  We're going to watch the trailer.  It's really good.  It looks really good.  

Speaker 1: I will put a link to the trailer in the show notes.  

Speaker 0: I have a little bit of tears in my eyes when there's a specific catchphrase that is said, but yeah.  

Speaker 1: OK, I'm going to link to that.  Be sure to watch that immediately after you finish watching or listening to this podcast interview, because we've got a ton of advice that's practical and not just, you know, something that you can do to escape from your day to day experience, but to build up your day to day experience and accomplish your goals.  So Leon, before we dive into 100 devs and resilient coders and all the work you've done, I like to always start these interviews with more autobiographical stuff just so people can have context into like who you are, your lived experience, where you're coming from and where you're heading and things like that.  So maybe you could take us back to where you grew up and like what your earliest ambitions were as a kid.  

Speaker 0: Yeah, so I grew up in Philly, definitely 100% a product of Philly.  I was always kind of a very kind of tinkering, wanting to build type of kid.  I grew up with a huge household, a big family, all in one row home in South Philly, which was amazing.  And I was blessed to have amazing libraries where I had access to computers and could Tinker and build and I was really blessed even have a lot of even just computer science education.  early throughout my life I had a Q basic class in middle school where I would get a sailboat to go from one side of the screen to the other.  I thought I had magical powers and yeah, I I was very lucky to have the skill so so early.  We also in Philly have magnet schools or which are kind of like exam schools that you test into and so I went to engineering and science where I had two years of c++.  in high school and this is like 20 years ago.  and so yeah I just I'm very lucky to have grown up in an environment that supported my passions and interests even when I didn't have access to those technologies or knowledge that there was a way for me to get access to it.  so very very thankful for that.  

Speaker 1: That's awesome.  yeah that's it sounds like a really kind of like idyllic upbringing in the sense that like you've got Access to.  what about teachers?  Did you have any teachers as a kid who like really propelled you forward?  I always talked very passionately about my my 7th grade teacher or 8th grade teacher, science teacher, Mr.  Krieger, whom I've failed to track down.  If you know of Mr.  Krieger, who taught at, you know, Hoover Middle School, which was is like now destroyed, bulldozed school in Oklahoma City.  If anybody's heard of that person, let me know.  but did you have anybody like a mr Krieger in your life who?  Was eccentric and interesting but kept giving you like interesting books about space and stuff like that?  

Speaker 0: Yeah, so I've been lucky to have a few.  so miss Francine was my fifth grade teacher that when I was done my coursework would Not let me just sit there twiddling my thumbs but always had like puzzles and things to build and tinker with in the background and I Likewise, I've tried to find them.  I haven't been able to find them, but they really kind of showed me that I could be in control of my learning, that it wasn't a one-way depositing of knowledge, that I could have some sort of control or command over the things I was doing with my free time.  that would enable me to think creatively and to do things I wanted to do.  I had a lot of wonderful folks throughout high school that really helped guide me, that pushed me, that maybe saw something inside of me that I didn't see inside of myself and would try and pull that out.  my, we're talking about like code education, shout out Mr.  Shipper, would push me to learn my C++.  and we had the old school like matrix printers where you'd print out your code on them and I would look through it and take it to them and try to point out bugs or errors.  and You talk about folks in your life that do the small things right, and Mr.  Shipper, every birthday, for years and years, would just send me a happy birthday message.  So talking about folks that just support you long-term, that was there.  And then in university, it was Dr.  Bupieskus, the person that showed me that I could be what I wanted to be and supported my ability to learn, supported what I wanted to do, made sure that I had funding over the summer to live, made sure that I got to do the research I wanted to do, and ultimately gave me the skills that I thought I needed to be the person I wanted to be in life.  And so, yeah, definitely the product of amazing teachers throughout my entire life.  Definitely something that I try to think of with Rizzle Encoders and 100Devs, like.  what was it about those folks that inspired me to do more, to learn, to feel comfortable, and try and bring that into the classroom as well.  

Speaker 1: Yeah.  Yeah.  It's so cool to talk with another teacher because obviously you're a software engineer, but you're also a teacher to many, many people, not necessarily in the conventional way.  Maybe in the conventional way, too.  Maybe you actually give lectures occasionally in person, but like through 100 devs, you're essentially like the classroom teacher that people need, you know, like.  Yeah.  You know, the VAT signals up in the air, the 100 dev signal, and you're answering that call and you're helping people with the not just practical challenges of learning to code, but the motivational challenges as well.  And that's a huge thing I take away from your stream.  It sounds like you went on to do really well academically, I presume, because you went to one of the best universities in the world.  Maybe you could talk a little bit about what that process was like.  What was it like getting into a relatively elite school?  How long did you have that plan?  At what age did you snap to awareness?  I always like to tell people, I kind of snapped to awareness much later in life.  I was maybe like 20, 21.  And that's when I got really into journalism and studying foreign languages and stuff, themes that would kind of run throughout the rest of my life, living abroad.  And ultimately, much later, I had kind of a second thing where I learned like technology is really, really gosh darn useful.  And that's when I learned to code and automated stuff for my school and stuff.  But did you have an early kind of awakening at some point?  Do you remember a distinct period of your life where you're like, hey, I can do a lot more than other people around me are doing, my peers?  Was there such an awakening for you?  

Speaker 0: I wanted to be comfortable.  I wanted to have a good life.  And I think early on, especially as like a kid of color, you're kind of taught this very, it's just like doctor, lawyer, dentist, it comes up over and over and over again.  And it comes from maybe our families and the folks in our community not knowing kind of all of the opportunities that are available, but those are the safe pathways that Dr.  Lurie Dent is.  And so yeah, for 100 years.  Yeah, really?  Yeah.  So it's proven.  So that's kind of the path that I got put on as someone who was successful pretty early academically.  I did well in elementary school.  I used to have to go from my school to another school every week to do other programs.  And I saw how hard my grandparents had to work.  I saw how hard my grandfather worked, specifically, in a boiler room every day.  It was hot.  They were pulling valves.  I saw what hardware could do, and I wanted to do something that would enable me to have a good life, but maybe not be so sweaty, right?  And so that idea led me to look into Dr.  Larry Dentist, Dr.  Larry Dentist.  As I went through middle school, I was very focused on getting into one of our magnet schools.  So Philly has some amazing schools that you kind of test in, and it's more of like a lottery now, too, as well.  And I went to engineering and science.  And engineering and science was geared around getting folks into engineering and science, and had tracks that you could follow, and a really good placement rate into universities.  For a while, my sophomore, junior, senior year, pretty much every lunch period was spent with Ms.  Brown, who's my guidance counselor, and would make sure that I was getting access to everything I needed to do well academically and to get into really good schools.  And coming from a low-income family, it's really expensive, so Ms.  Brown would make sure that I had vouchers for everything that I could take the SAT for free, that I could apply to schools for free, that would get me into all the best summer programs that could help me academically.  I did Upward Bound for a while, made sure I had access to things that I didn't, like calculators and things like that.  And so my school, I owe a lot to in terms of getting me prepared for eventually what I would go to is Yale.  And so for me, I think I've just been really blessed to be the product of a school system that if I wanted it, if I wanted to work hard, if I wanted to put in the hours and I played three sports, I did every club imaginable, but I had really amazing people that guided me through that process.  And then I was able to, make it from from ENS into Yale and then went into hard sciences and was on this track to be a doctor, right?  Dr.  Laura Dentis, I chose doctor.  My mom was an LPN and I got to grow up in doctor's offices and see and talk to folks.  And that was kind of the path I was on.  And it's kind of funny because I was doing computer science, I was in an engineering high school, and I just didn't allow myself to see that as my path or my career, even though that's where eventually I should have been and eventually did make it to.  And so that's kind of the long winding path into, yeah.  

Speaker 1: Awesome, and LPN is Licensed Practitioner, Licensed Practicing Nurse?  

Speaker 0: Yeah, it's like a vocational nurse basically.  So instead of doing, now I guess the track is like your bachelors and you get like your RN, this was a vocational pathway to being a nurse.  

Speaker 1: Yeah.  Yeah.  I just want to make sure I got that right.  And I have like this policy that like, no matter how common the acronym is, I always try to spell it out for especially for our listeners abroad, non native English speaker listeners as well.  Um, uh, so, okay.  So just recapitulate some of that.  I've been taking detailed notices.  You talk just because this is so interesting and I'll, um, I'll email these to myself.  These are not for public consumption, but it's basically the contents of this conversation.  It's public now.  So, um, It sounds like you didn't.  it just didn't even click.  It didn't even really occur to you that software engineering was a field you could go into because like so many people coming from underprivileged backgrounds, so many, you know, second generation immigrants or even first generation immigrants, so many people growing up who are kind of still in the shadow of inequality, like racial inequality that's systemic.  That is the reason one of the reasons why, you know, wealth among black families is like Something like 1 10th of like white families that have been in the US the same duration of time.  I mean, it's like ridiculous, but because of these circumstances You were pushed to do.  Dr.  Lawyer dentist and again like most of my doctors Dentists  

Speaker 0: that  

Speaker 1: I haven't had any lawyers thankfully like over the years have been people that who came from a different country, like their parents came from a different country, or that in many cases as doctors, they literally came from like India, past the USMLE, which is this incredibly stringent test, essentially like recertified as doctors, a very lengthy, costly process, just so they could practice in the US because the US is like, you know, a great place to live.  And it's a great place to work as a physician.  Generally, I guess I shouldn't speak for all that.  there may be some positions in the audience who take issue with that because of regulatory issues and all this other stuff.  My point is, you were so focused on that because that is what success sounded like.  That was like the family's perception of success and software engineering is like a relatively new thing that is not well understood.  And it's not a surprise because software engineering has only existed a few decades, right?  Maybe you could talk about like, what that awakening to software engineering was like and how you went about, okay, I'm going to go much deeper on coding and learning about computer science and math, like all these things that you need to be a successful software engineer.  Oh, no, no, I you may take issue with me saying like you need a whole lot of math, for example, or something like that.  I don't think that's necessarily true for a lot of jobs, but I always tell people like there is no knowledge.  that is not like.  you should definitely learn math if you have the time.  It's probably not the highest priority if you just want to go get a job as a developer.  Sorry, but my question for you, Leon.  Mathematics.  All right.  Complete introduction.  Right on.  OK.  So I'm glad to hear that.  Like, yeah, because a lot of times I hear like, I think one of the pieces of misinformation that's going around is like, oh, you don't need math to be a developer.  Like, I don't know any math.  Like, I just took high school math and I'm a developer.  And like, That is true to an extent, but there is kind of like a ceiling that you're going to hit in your engineering career.  If you don't like at least take some time to learn some mathematics and you can learn mathematics right here on Free Code Camp's YouTube channel.  We have courses on pretty much every engineering math topic that you would learn at like an undergraduate engineering program.  So, you know, it's just investment of time.  And that's a big thing we'll talk about in a little bit is like, is it really free in the sense that you have to invest your time and energy?  And not everybody has equal time and energy.  Some people have all kinds of different circumstances that inform their availability to learn to code.  So we'll talk about that in a minute.  But like, how did you approach this?  And like, maybe how old were you?  Were you still in school when you realized that you wanted to do CS?  

Speaker 0: Yeah, so I was always building.  So when I started in sixth grade, I learned QBasic and I would go to the libraries and tinker and build.  When I was in high school, Upward Bound got me a TI-83 Plus calculator, which I still have.  It's like in my drawer over here somewhere.  And you could write code for that calculator.  And I remember swapping.  I felt like it was like old school, you know, like how people used to swap floppies.  I would swap the games and programs from the calculator and go to the library.  And like, I remember the thing I wanted for one Christmas was like the cable that connected the calculator to the computer so that I could like put my code on it.  And so I remember very early working on calculator games and other fun stuff that I just wanted to bring into the world or modify and hack on.  And so that was always really fun.  And then I had that kind of formal C++ in high school.  And then when I got to university, it all went out the window.  I was doing hard biology.  I was doing eventually biological anthropology.  I was looking at hormones, testosterone and stuff like that.  But this entire time I'd always been building, tinkering, I really liked entrepreneurship.  I was always trying to start ideas, small companies, things like that.  And I had started one kind of simple project that went pretty viral in New Haven, New York area.  And that kind of really showed me some of the power of these skills that I've been kind of accumulating.  But the real kind of awakening for me for computer science was every summer I was doing lab work and I had figured out how to like survive.  When you're low income going into like an Ivy League school, basically they give you a full ride right off the rip.  And so I had figured out that if I didn't live on campus, they would give me whatever the amount of money was to stay on campus, they would give me.  And I was able to use that to do stuff.  I would pay rent and food, but I was happy eating pasta and pasta sauce.  And so I actually had money to live and do all the things that all my fellow students were doing because I had figured out this way of doing it.  But I ran out of money one summer, and it was getting pretty dicey pretty quickly.  I really didn't have any money for food left, literally hungry.  And I realized that I could do things like.  I was looking up like quick jobs.  And then I was like, wait a minute, let me, let me see if I can build somebody a website.  I know how to do it.  I've been building all these like landing pages and small things with code before.  So I put on Craigslist, Hey, I'll build you a site.  I can get it done today.  And somebody responded and they paid a deposit.  and My life changed from that moment.  I skipped all the way to the grocery store.  I bought my pasta.  I bought my pasta sauce for the month.  I built in the site.  And in that moment, something very clear happened in my brain that I had a real skill, a skill that could provide, that could put food on the table, a skill that would make it.  so I was never fucking hungry again.  Sorry, oops, sorry, Chris.  

Speaker 1: It's cool.  

Speaker 0: Again, again.  

Speaker 1: Yeah, if anybody like, we don't edit this podcast at all, so I'm not gonna edit out the swear words.  That's like a, unless there's like something really bad that happens, like I had a coughing fit once.  

Speaker 0: And so that changed everything.  Until this day, I still freelance and I, that's the reason why a lot of the things I do today, the resilient coders, the 100 devs is like, I want anybody that's ever felt that way to know that there is this option, this ability to develop skills that no one can take away from you, that can put legitimate food on the table.  And so that's when I kind of went all in on more of the engineering piece.  

Speaker 1: Awesome.  Yeah, well, um, that sounds like an amazing discovery of like powers that you just had latent within you.  that necessity brought forth, you know, necessity is the mother of invention, right?  You were forced to basically by your circumstance to like, think outside the proverbial box, come up with a way to get money to buy your pasta.  Um, I, you know, I definitely, uh, remember the lean college.  Here's some sissing off pasta.  We got the smack ramen.  If anybody, like, not the good, like, ramyun, like Korean ramen, but like, it was just called smack.  We'd always joke about it.  Like when you're hungry enough, it's almost like, you know, like a drug because it's just like, you feel so sated afterward.  It's terrible for you.  But what kind of pasta?  Did you have a particular build of pasta that you liked?  

Speaker 0: This is way back.  Whatever the cheapest was, I was going to survive.  I didn't care.  Nowadays, I probably have some preferences.  But back then, whatever was on sale, whatever was the cheapest, the supermarket nearest had this clearance aisle.  And in that clearance aisle, they would put the stuff they couldn't sell.  And so whatever was on that rack is what I would grab.  Yeah.  

Speaker 1: Yeah.  And to this day, by the way, like a lot of grocery stores like Walmart, like they'll take their baked goods and put them on a rack like right by the exit, like the staff only place where they have like the garbage compactor where they compact the boxes.  Like I worked in grocery stores for a few years.  So basically back where they keep all the mobs and they keep all the, you know, inventory.  There will be like a little rack and sometimes they'll have baked goods.  They're like, it's still good, but we can't really sell it because it's going to expire in like a day or two.  So like I stole snacks and bargains from there.  But but yeah, just pro tip, if you're going to a U.S.  grocery store, you can often find like food that's about to expire that you can get like at a heavy discount.  So that's really cool.  So how did things unfold from there?  So how did you go from that first contract work, essentially, that client that you landed through Craigslist, which is how I landed, I think I landed some early clients through Craigslist.  Craigslist, amazing tool.  I'm not sure if it's still amazing today, like 12 years since I last used it.  But yeah, like a lot of early gigs were found on Craigslist.  How did you go from that to, the deciding, I am a dev, like taking that identity, if you will, and going deeper with it.  

Speaker 0: Yeah, sure.  So my junior year at Yale, I started a small website called Listful of Hope.  It was kind of like a reverse Craigslist, where if you needed something, you could say what you needed.  So if you needed a jacket and someone in the area had a jacket, you would meet up and they would give you a jacket.  So it was kind of like a gift economy.  It was a very simple site that was just enabling folks to help others in their community.  And it really kind of popped off in New Haven.  And so there was the one winter where it was really popular.  I remember people getting Christmas presents, jackets, gloves, anything you needed.  And I could really see that transition from something that was just a raw skill to me having to build an actual application and having real users.  I was hooked.  I saw the power.  I saw that it could help so many people.  And I knew that these skills would be really advantageous to keep going.  So my junior year, I kind of slowly stopped.  kind of really wanting to do coursework.  Senior year, it became an even bigger problem, and I was trying to finish my thesis to graduate, and I had to get, like, 300 men to spit in a tube, tell me about their sexual histories so I could correlate it to their testosterone levels.  I was trying to, like, show that or find something about BPA in relation to testosterone.  So we drank a lot of plastic water bottles.  And so I was trying to do that before it became really popular, like something people would actually think about.  

Speaker 1: BPA-free plastic, which would be good for the kids.  Just in case, BPA does have deleterious effects.  We don't want our kids to be drinking from BPA water bottles.  

Speaker 0: really hard time running that that experiment and apparently people didn't want to you know spit in a tube and tell me about their sexual history for like a bottle of Gatorade and like a pack of gum or something.  and so I wasn't able to recruit enough people for that experiment and I decided to use my coding skills to set up a landing page where a lot of students were always trying to find studies or experiments to participate in because one, they were a lot of fun sometimes and you actually got paid pretty well to do the experiments.  There is one really famous one that people loved where you basically went to a lab, they got you drunk and you played poker, and they're just watching you, how you make risky decisions and things like that.  You got paid a couple hundred dollars to do it.  Wow.  So I made a landing page that had all the studies from Yale, Harvard, Princeton that were trying to get people to come, and I just slipped mine in there.  And it took off because we had all these professors that were promoting it, we had all these students that got real value, they went to the site, they found something fun to do, they got money, and I dropped out my senior year to turn that into a business.  which became SocialSci, and we wound up building academic surveying tools.  We had over 4,000 different universities that used our tools to power their academic research.  And even though that company has been wrapped up for a long time now, we still have research that gets published based off of the data that they collected.  I needed to know more.  My engineers had these magical powers, and I needed to learn that skill for myself.  And so I took my coding education more seriously.  Eventually, I was building other products, other startups as well, and started teaching at General Assembly, helping others acquire these skills too.  So that was the journey.  

Speaker 1: It's interesting.  So first of all, congratulations on building something that 4,000 universities Yeah, it's not easy to get universities to use your stuff like there's like this notorious like sales cycle adoption cycle among universities.  They're they're very like slow to adopt new tools.  Yeah, I mean that's that's phenomenal to go from basically like mechanical Turk for being a human test subject to having like an actual project that is getting wide usage.  That's really amazing.  

Speaker 0: It's funny that you bring up Mechanical Turk.  That was the reason why we were able to raise VC funding, was because MTurk was becoming more popular.  And what Social Science solved was not just the survey creation, but the participants taking the surveys.  And so part of my pitch deck, and I'll never forget it, was I decided to get my mom a Christmas card.  And I had people on MTurk.  just like hold up the Merry Christmas sign.  And what we had was this one person with a hundred different, like not a hundred, but like a lot of different accounts.  that was just like changing their hat, putting on a different shirt.  But it was like clearly the same person.  And so at this point, Mechanical Turk hadn't solved the like identity online and like how do you stop?  like false participants and that was kind of why we were able to be able to raise money and why we were able to have so many universities trust and use our service because we were solving that problem specifically.  

Speaker 1: So it was your mom like, who is this person?  And why are they so passionate about wishing me a happy birthday?  It was cool.  

Speaker 0: There was like 100 people from all over the world with different backgrounds, different cities, different places.  And they all were saying Merry Christmas.  Nowadays, you can probably facilitate that.  But back when we did it, it was pretty cool.  

Speaker 1: Yeah, and Mechanical Turk, just for people that are unfamiliar with it, they call it artificial intelligence.  Obviously, nowadays, a lot of things you would pay someone on Mechanical Turk to do, you just form out to an LLM or something.  But it was like, hey, I need you.  Early on, it was like, hey, I need you to solve a capture for me.  Or hey, I need you to create a Facebook account and like this Facebook group or something like that.  It was basically getting around.  the restrictions that different platforms might have in place.  But in the good, as designed use, would be, for example, getting people to do precisely what Leon said.  So everybody would get maybe just a few pennies.  Or doing a hit, I think, or a job or something.  I can't remember what they were called.  But yeah, you would do those.  Is that accurate?  I haven't actually used it.  

Speaker 0: Yeah, no, that's pretty close.  It's this whole subfield called human computation, right?  

Speaker 1: Human computation.  

Speaker 0: Some things that computers can't yet do that humans can still do, but figuring out how to do them at scale is really important.  And so Mechanical Turk, you can take a task, break it down into a very small subtask and have thousands and thousands of people do it.  Need for human computation is like labeling data.  Think of like AI training and things like that.  Who are the people?  Like there had to be real people that said that was a a fire hose, or that was a car, or that was a bicycle.  

Speaker 1: That's a chihuahua and not a muffin.  

Speaker 0: Exactly.  

Speaker 1: Chihuahuas look a lot like muffins to a computer.  

Speaker 0: And so figuring out all of that was necessary for a lot of the advancements that we're seeing now.  And there are still things that humans can do very quickly that machines just can't do yet.  And so MTurk still has a good place.  There are other companies that do similar things nowadays, of course, but that labeling and small tasks done at scale.  And there are other cool things you can do too.  So where it's like Instead of giving it to just one person, you give it to five, and if four out of the five do one thing, you know that you can probably trust that thing as opposed to the one person that did it.  

Speaker 1: As opposed to the minority report.  Yeah.  The dissenting opinion.  Yeah, that's a good kind of consensus mechanism.  So, um, okay cool.  So you built this project.  we could talk about that a lot more but we have so much more to talk about.  Yeah, where do you go from there?  You you basically had a successful project, right?  Like everybody's dream, especially at this point.  It sounds like you're pretty young like yeah, like had you finished college at this point like I.  

Speaker 0: so I dropped out and never finished.  Oh, wow In my senior year at Yale, I had this idea for Social Sci.  I dropped out.  I did Techstars.  

Speaker 1: Techstars, an accelerator.  

Speaker 0: Yeah.  

Speaker 1: Popular, like they give you some seed money and then you're in like a program where they kind of coach you?  

Speaker 0: Exactly.  

Speaker 1: Is that accurate?  

Speaker 0: Yeah, exactly.  They help you lay the foundation for a company and all the skills you might need to know to do that effectively.  TechStars really changed my life.  It really gave me a lot of the skills that I was missing.  Gave me my initial network outside of university and the initial seed funding and then helped me go on to raise more funds for SocialSci.  yeah, while I was running Social Sci, I started teaching at General Assembly, and so General Assembly is one of the first like really big coding boot camp programs, and I was doing their part-time courses for a very long time.  I'm a distinguished faculty with GA even until today, and I was having just hundreds, if not thousands of people be successful, like learning these new skills, learning how to code, getting great jobs.  And at one point it kind of just got overwhelming that I didn't notice anyone that looked like me taking advantage of this program.  One, because it costs a lot of money.  It also costs a lot of time.  And so I started looking for orgs near me in Boston that I could help or support, and I came across Resilient Coders, which at that time, our founder, David Delmar, was really trying to work with court-involved youth and show them, hey, there are these things you could be doing, like coding or things like that, that might help you long-term in life.  And so, I started just going to, we had what are called community hours, where it was just myself, a few other mentors, and a bunch of young folks that were typically court involved or a returning citizen, and just trying to give them these skills.  And then we had the idea of starting a boot camp.  And our founder, David Delmar, said, hey, you've been running these other boot camp programs.  Could you do it for RC?  Said yes.  And then for the past six years, we've built a program that can help folks traditionally of color that have Particularly not completed a degree, go from zero to employable as a software engineer and we've been pretty successful at it.  we've helped hundreds of folks get jobs.  And what starting salaries?  around $92,000.  and for us that's huge because.  for each person we can get from those communities, we're talking about millions and millions of dollars back into those communities over the lifespan of their career.  So started doing resilient coders.  that eventually led me to 100 devs.  

Speaker 1: And that's kind of the way forward.  I want to dive a little more into because we're going to talk a lot about 100 devs, but like resilient coders, you said court involved youth.  I'm not familiar with the term, but like, you know, I have lots of friends who are like convicted felons and I'm not sure if that if that is essentially like people who early on in life get into trouble maybe because they actually did something wrong or maybe they were profiled and like the very unequal justice system in the United States didn't do its job very well and you know gave them much harsher penalty than a kid should probably have in many cases.  but Uh, is that like accurate?  It's like, yeah.  

Speaker 0: So we had a lot of individuals that we say court involved because exactly the things that you brought up, a lot of the folks that we were working with, they didn't do anything wrong and they were just the wrong place, the wrong time.  We did have folks that had gone down a different path in life to do the things they needed to do, provide for themselves and their families.  And so we wanted to give them a clear path forward to do the the thing with their loved ones.  And so we're trying to get them skills, just skills that they can put into practice to get to a point to where they had a strong, stable, high growth career.  And then that's kind of the birth of RC.  And our dirty little secret that I guess some folks know is that the first dollars we ever took in were from the Boston Police Department because they saw our program as, hey, we're going to spend all this money on incarceration, rehabilitation.  Why not get ahead of it?  And they gave us some funding to help run our first boot camp.  

Speaker 1: Yeah, that's awesome.  Well, it sounds like it was money well spent, given the impact you all have had over the past six years, I think you said.  So you've got resilient coders going.  You're teaching there, and it sounds like you're having a big impact, but was there a moment where you're like, I can have an even bigger impact by leveraging the power of the internet?  Like, what was the process that, and maybe I can back up a second and just say, what is 100 devs?  

Speaker 0: Yeah, sure.  So 100Devs is a collection of engineers that help build a completely free, live software engineering training program for anyone, anywhere.  That was kind of our genesis.  Now we're also building, and we're going to be piloting this year, a full-service digital agency where real clients come to us to build products.  and get to tap into our amazing alumni that have gone on to work at some of the best tech companies in the world.  We're talking Amazon, LinkedIn, Slack, you name it.  We have an alumni there.  They come back to work on these projects.  Each project is getting broken down into individual tasks.  And then as you're learning, you're also building real code for real companies and getting paid actual money to do it.  We mentioned early on that free isn't always free because it requires you to have an extreme privilege of time to work through all this material to give up your nights and weekends, and we want to do something that helps soften the blow for folks that are going through our program.  Our program is entirely free.  Every resource I have ever given out is always free.  I don't work with anybody that doesn't have a free version or something that we can have access to.  But we did a poll not too long ago that said, hey, we realize a lot of you can't commit the time or take the time away from putting food on the table.  What would it take?  for you to be able to focus.  And it was $200 a week was the average.  We can make that happen.  We can figure out a way to get folks those funds so that they can focus and get through a program like 100 Devs.  And yeah, so now we're a global community.  Our Discord is 60,000 plus strong.  We have alumni all around the world.  And we're just trying to figure out a way for folks to be able to unlock a stable, high growth career put food on the table, support themselves and their family and their loved ones, and luckily we found a lot of folks that believe in that idea in mission  

Speaker 1: 2 and we built  

Speaker 0: a wonderful community around  

Speaker 1: it.  Yeah, and so the mechanics of the community, like.  first of all, it goes without saying that I'm in awe of what you all are accomplishing with HunterDevs and I've had so many positive interactions with people who are both using like the free CodeCamp curriculum and in the 100 devs, I guess you'd call it like a cohort or an intake.  Like basically a bunch of people working together through a set kind of like week-to-week program.  And I, you know, free CodeCamp, we have experimented with like cohorted programs and like, let's see if we can get all these people.  But what we found is like, it's a lot of work to organize.  very aware of and like free code camp philosophy is like, let's just build the resources at scale, put them out there.  Yes.  Lots of kids who are the, you know, the son or daughter of like software engineers in Palo Alto are going to use free code camp and they're going to use it for free.  And they, you know, probably could have paid a bunch of money to have a computer science student, like tutor them or something.  Right.  But also a lot of kids who are in like a village in rural India or in like kind of like a failed state, which a lot of people have smartphones and can't get on the Internet, even in places like Somalia.  Right.  North Korea.  Right.  People in North Korea use free code camp sometimes.  And essentially they can.  they can learn.  even though it would be normally prohibitively expensive for them to buy a $20 course on a course website, for example.  And so our philosophy is we need to make sure that there is a baseline, that everybody has access to comprehensive math, programming, computer science, and English education.  So that everybody, regardless of their circumstances, if they have time, which not everybody does, but if they have time or they can figure out techniques to make  

Speaker 0: time,  

Speaker 1: to learn even a little each day, then they can make steady forward progress toward the eventual goal of working as a software engineer.  Right?  So, so that is kind of like our philosophy is like, let's just make tons of really high quality, free stuff that's essentially subsidized by the community, like the people who are able to give the alumni.  Sometimes, like we got a gift for $250,000 the other day from CompTIA.  The CEO of CompTIA is a fan of FreeCodeCamp and uses FreeCodeCamp to expand his JavaScript knowledge.  Super chill dude.  You know, Daryl Silver, founder of Thinkful, kicked in $150,000.  And then, of course, we're getting grants from, like, you know, Linux Foundation and MongoDB and Google and a lot of other organizations.  But a vast majority of our support comes directly from the community, from people who donate.  So, freecodegame.org slash donate.  

Speaker 0: All right, but my point is.  

Speaker 1: Oh, yeah, and thank you.  Thank you for supporting our charity.  I didn't even realize, I apologize.  But maybe you're getting my periodic donor email, like I said, a donor email.  Yeah.  My point in all this little tangent is to say that Free Code Camp, we don't have the bandwidth to do things that don't scale.  And you are doing things that don't scale at all, really.  Maybe you figured out some techniques to get cohorts to scale.  Because you mentioned your Discord has 60,000 people in it.  actually getting on stream and like teaching for like a marathon three five hours like however long you go.  it's really inspiring.  uh definitely catch some of the live streams if you can or i've watched.  i watch everything at double speed so i watch like the video on demand.  yeah that.  but uh like I guess you saw from coming from the like intensive program where you're teaching folks like you saw the merit of quality not just quantity or like.  I guess like content.  like I'm not like doing things that don't scale really.  And helping people individually doesn't really scale, but that's not necessarily the idea.  The idea is to give a whole lot of attention to a smaller number of people and to really make sure that those people can ramp up to, you know, an impressive, he said like, what was the figure?  you said was like the median income of people who graduated?  

Speaker 0: $19,000 for first time coders, yeah.  

Speaker 1: That's a lot more than I made in my first developer job, given if it is in Boston, like the cost of living might be higher.  But I mean, that's a lot of freaking money for people that like.  I imagine some of these people don't have university degrees.  I didn't even know that you hadn't completed your degree, although dropping out of Yale is probably very different from dropping out of like, you know, Central State University, right?  Yeah.  But sorry, I've been talking for the last three minutes.  I'm just very excited about how you approach this.  And I want to make sure our audience appreciates the, I guess, counterintuitiveness of what you've done.  And how you've been able to like, people weren't doing this because it was perhaps counterintuitive to do so.  It was probably very daunting.  

Speaker 0: It's a bad idea.  Don't do it.  Yeah.  

Speaker 1: So maybe you can talk about that, how you have to do stuff that doesn't scale, and ways that it doesn't scale, and then ways, techniques you figured out to scale it a little bit.  

Speaker 0: Sure.  Yeah, happy to.  I think the first thing, though, is just shout out Free Code Camp.  You all laid the foundation for so many folks to learn.  And one of the things I am always hyping, especially in 100,000, our Discord is, I think a lot of folks that go into this space don't put in the work to do the things that really matter the most.  And so one of the things I've always admired about free code camp is like this commitment to filling the gaps.  And so realizing that most people don't have the privilege of speaking English.  So we're gonna build a full, like, how do you speak English?  course, right?  That's huge.  It's like very progressively thinking about what do our folks going through our program absolutely need.  And so that's why I'm so happy that Free Code Camp exists.  It's why it's one of the first things I always recommend to new folks getting into tech and why I think you all will continue to be so successful.  because it's just like this relentless pursuit of making tech more equitable to everyone.  That's why I said really early on in this conversation, I look up to you so much, and a lot of that ethos is what I've tried to bring to 100Devs.  For 100Devs, we got started during the pandemic, and the pandemic hit.  things got really bad really quickly.  So people always like to talk in Boston about like a 2% unemployment rate, but I knew just from looking at the actual data, we looked in our communities of color is already at 12%.  This is pre-pandemic.  If you look during the pandemic, it jumped from 12 to like 33% in some communities.  And so it got real bad real quick.  And I just, if you are already in tech or if you already come from a privileged background, I don't think people really understand what that means when right now, like if you look at the most recent like labor data, like the median income, median, median is 56,000 in the US.  And so if we have, that percent of folks under it, and we're seeing 33 percent unemployment, and then labor data actually includes eligible workers.  It just got real bad real quick and it continues to be a really rough situation for folks.  I'm not a doctor.  I didn't have a skill that I thought that could be helpful to folks that were being affected by the pandemic, but I had been teaching for a while and I knew that I could get folks skills to make them more employable.  100 Devs started as a way of getting 100 folks into software engineering jobs.  We're way beyond that now.  And I wanted to make a live cohort where we would meet twice a week on the internet.  And I really thought it would be, like you said, just a handful of folks, maybe 5, 10 people.  We did a pilot that was really successful.  Our first cohort was about 300 people every single class.  That was successful.  We did another cohort that was like 3,000 people every single live, every single class.  And so we kind of just built slowly.  We were able to kind of jump from zero to 300, 300 to 3,000.  And we always joke that we're baddies.  Like we're baddies writing bad code.  Like it doesn't matter.  It's about getting the skills that we need.  It's about figuring out things on the fly.  And we just live up to being kind always to ourselves, to others.  And as long as you're willing to say, you know what?  we gotta figure this out, we gotta figure out how do we do this at scale, how do we have 3,000 people live in a class getting help and not feeling lost.  We had to figure systems and ways of doing that and building community that wanted to support that number of folks.  

Speaker 1: Awesome.  What you said there, first of all, I just want to call it that particular insight.  We're baddies writing bad code.  It doesn't matter.  So when I was a teenager, really interested in writing and reading lots of fiction and literary journalism and stuff like that.  I would always hang out at Denny's like till 2 a.m.  just talking to random people and learning from them and just writing and stuff.  And one time like our server, he was kind of a grizzled looking dude.  Like he would not look at a place in like a bullpen in a newspaper newsroom, if such things even exist in 2024.  But his advice to me, I'll never forget what he said.  He said, throw away your first million words.  

Speaker 0: And I was like, damn, a million words.  

Speaker 1: That's like years of writing.  But just accept that it's gonna suck.  And the same thing with your code projects, and really the same with any endeavor you take.  I've been trying to get better at base for the past three or four years, and it takes me forever to record the base intros.  

Speaker 0: One of the videos I watched, you did it and then sat down.  So I'm telling you that's what I was expecting for today.  So I'm a little sad that I didn't get the base intro live just for me.  

Speaker 1: I didn't want to bother you with like watching me screw it up several times.  

Speaker 0: Yeah, I love it.  

Speaker 1: But but yeah, like you just have to accept that the first few thousand hours you spend with an instrument or with like a programming language or with anything is going to be not ready for prime time.  You know, my wife, she grew up in China.  We met in grad school and she's now a U.S.  citizen.  We brought her over and naturalized her after grad school.  After we got married, we've been married 19 years and she loved playing piano, right?  And one of the things that she says in China, people take piano extremely seriously, and they have this saying in Chinese, which is basically, you spend thousands of hours behind the stage practicing for five minutes on the stage.  That's just the nature of the game.  And with code, if you're writing some serious system that's gonna, code that's gonna be run millions of times, If you're making an open source contribution to FreeCodeCamp's code base, and it's in the platform itself, and this component is going to be rendered 50,000 times a day or something like that, it's okay that it took you a whole lot of work to get that code into the shape, and it's okay that it took a lot of practice and trial and error before you got the skills to be able to create that code.  That code is just going to keep going.  you know, uh, when Elvis goes up on the stage and he's being filmed, uh, and he's playing, I use Elvis because I love Elvis.  I'm sure he's overrated or whatever, but he's, he's the man.  So, I mean, like that guy practiced like crazy.  That's definitely the same with, uh, for example, like James Jamerson, the greatest bassist of all time, basically.  Uh, or, um, You know, like pretty much any musician, they're going to practice like crazy.  They're going to rehearse obsessively and they're not going to be satisfied.  But once that recording is made, once that record is cut, if you there's a great documentary about Thelonious Monk, the jazz pianist.  Right.  And he would only do like two takes.  And he's just like after two takes.  whatever I do is gonna be garbage.  I'm done like use one of those takes.  but how we got how he got so good that he could actually Nail it in one or two takes.  was he practiced like a maniac and he spent so much time at the piano Where a lot of you know, I guess amateurs would just be like good enough.  He was not done with that and so I feel the same way about like any undertaking, but certainly with coding, it may seem like coding is not like a synchronous performative event, like where you're having to sit down and perform in that regard.  You can go and you can edit your code.  You can iterate on it.  The tools have gotten so much better.  Like Free Code Camp, every millisecond or two, you're going to get the tests telling you whether you've met all the test conditions or whether you need to keep tweaking your code, right?  So you have all these tools to iterate, but at the end of the day, you should still try to approach it like a performance.  You'll get a lot better if you don't rely so much on the tools catching what you're doing.  But anyway, I'm kind of going on a tangent, but I just wanted to riff on the insight that it is.  We're all baddies.  We're writing bad code.  It doesn't matter, because you throw away your first million words.  You spent thousands of hours at the piano before you're playing anything that's worth anybody listening to.  You just have to accept that this is the nature of reality.  This is the nature of doing anything that's hard.  is it's going to be hard.  You're going to have to work hard and you have to just have that mental fortitude and that's something that comes through in your.  your video is like it's so supportive.  Like.  I love the way that you're just like it's all good.  Like just this happens to everybody.  Everybody has to go through this.  I always like to say, some people may be slightly better at programming aptitude-wise, or they may have some intrinsic quirk that makes them marginally better at programming.  But those people have probably just forgotten how much time they spent at the keyboard when they were a kid.  They were privileged enough to grow up with computers.  When you hear Bill Gates talk about how, oh, I don't actually write out the code until I've figured everything out in my head.  And then I said, that's nonsense.  Bill Gates does not just sit down and like write basic from memory because he'd like been moving everything around his head.  People can't do that.  I don't believe that.  Maybe there are some people that have like some extreme form of like, like extreme brains.  They could do something like that, but I don't believe that Bill Gates could do that sort of stuff.  I think he's just talking up the mythos.  You know, he's trying to build up hype for himself.  And like it's this old kind of like old school elitism that a lot of the early devs, the old guard have.  And just don't buy that hype is all I want to say.  And I want to thank you for like dispelling a lot of that, whether you're intentionally dispelling it or not.  Just telling people like coding is hard, right?  Like not sugarcoating it.  

Speaker 0: We call it the trough of sorrow which actually comes from like startup worlds is one of the things.  there's this very classic graph of like Just like really big hill that you go up when you're really excited about something like yeah I'm gonna learn the code on you buy a thousand demi courses cuz buying stuff feels good even though you're not gonna do them and at the very top and then you start like day one of any actual coding program and then you just plummet once you realize how long it's going to take and then you spend all that time going through the trough of sorrow.  and then the most like sick thing about this is that I shouldn't say that but the most twisted thing about this is at the very end there's an even further dip that you have to go through.  yeah where you it's the and then you get into what they call the wiggles of false hope.  so even after you've gone through you've learned everything you needed to learn.  you start actually interviewing to get the job and you're just getting rejected, rejected, rejected.  And so there's just this huge curve, long trough of sorrow that for a lot of folks takes years to get through.  Then once you get to the end where you're like trying to actually get something out of it, it gets even worse and then slowly, slowly gets better.  So I think the big thing for what we do, like you mentioned at 100Devs is just helping folks manage that frustration.  We kind of have like three key things that we just say every class almost.  Manage your frustration, be consistent, and take care of yourself.  When you look at how adults learn, the reason why adults kind of probably don't learn as well as they think they could is because they don't manage that frustration piece.  When they look at Language fluency and like language acquisition.  Yeah, they thought that we probably lost the ability to be fluent in our teenage years But they found that that probably isn't true.  It's just once you get out of those years your time is entirely your own and so would you rather do this thing that sucks for two years or would you actually Sit down and do it.  And so yeah folks that can manage that frustration to actually be get through the things they want to do.  And so that's a big part and it's also why we're live.  when you look at other programs.  I love Dr.  Malan out of Harvard, CS50.  I love that.  CS50 is now on FreeCodeCamp.  I read every single article they've ever put out.  And one of the ones that are really interesting is they actually published all of their data for CS50 in the beginning, which was really cool to read through.  And you notice that They had like 150,000 people that signed up for like the first run of the course.  They said like 100,000 people that engaged, but only like 1% completed it, right?  And so that was something that really kind of stuck in my brain because when you looked at the like in-person program, like the live in-person program, it was like 99% completion.  So there's something there, and I think being live, being with a cohort of other individuals, being with real people, being with community can help you ease that frustration, get help when you need it, and be a little bit more consistent and actually get to the end.  

Speaker 1: Yeah, absolutely.  There's positive peer pressure, essentially, of having your peers go into it with you.  That's the beauty of cohorted models, that it's difficult to reproduce.  But if you can reproduce it, like Leon Noel has, then bam, you've got like... lighting in a bottle, like you've got people who are going to have each other's backs.  And like when you're down, they're up and they'll help you get back up.  Right.  So you help one another.  So that's kind of the genius of 100 devs.  Maybe you can talk a little about the mechanics of it.  Obviously, you've got the discord, you've got the twice weekly streams when classes in session, so to speak.  And they are.  high energy streams, man.  I just have to comment like that.  You got like the like the cool astronaut background.  It's like watching like a gamer on Twitch, like like watching somebody play and like, you know, see us go at a high level or something.  But it's education, right?  Like in my mind, like you're pioneering kind of a new approach to education that is.  based off of like people are already familiar with like games and anime and all the other cultural kind of touchstones and you're just like hey let's let's relate this to software engineering.  right and so you're doing a great job of that.  but maybe you can talk about in addition to the stream in addition to the discord what are the other aspects of 100 devs?  what are the other instruments?  

Speaker 0: Sure.  So we do a live cohort model.  We basically do a cohort a year.  And when that cohort is live, we're live on Twitch twice a week for about three hours for a class.  We take about an hour to do review, spaced repetition, active recall is super important.  So we spend that first hour just like reviewing, and then about two hours of something new, we do that twice a week.  And then we have office hours on Sunday, which is another stream, typically on Twitch or on Discord.  But it's just people asking questions and getting things answered.  Outside of that, there are so many other expectations and things that you're working on.  that's about 10 to 20 hours outside of that twice a week class.  Networking, all the things that are going to actually move the needle for you to get a job.  Our joke is that we're not really a coding program, we're a getting a job program.  And so all the things we get to be doing to get a job have to be happening when we're not live.  Then for folks that can't participate in a live experience, we have our illustrious catch up crew, which is a group of folks that are working through the classes at maybe a little bit more of their own pace.  We have a lot of folks that are around the world that can't make that live time work for them.  So they get together, they're on our discord working through the classes together.  You'll often see like 20 people just in a voice channel watching a class together that they've just, they've, Come together to do and so you can move through the material at your own pace.  when we're outside of a cohort like right now We have we have our huddles twice a week and the huddles are just like a traditional stand-up.  We're just trying to move away from that.  I think it's a slightly ableist term.  So we introduce them as huddles  

Speaker 1: and yeah, I never thought about stand-up as an ableist term,  

Speaker 0: but it  

Speaker 1: is a lot of people can't stand up  

Speaker 0: and so we We'll have anywhere from like 500 to 700 people every huddle, just asking questions, sharing, we call the job hunt, the hunt, sharing what's happening on the hunt, how they are negotiating.  They'll come up live, we'll help them negotiate offers.  They'll talk about an interview that went great or poorly.  And just by showing up to these huddles, you're learning all these, like, it's so hard to go through life with everything that you're experiencing being the first time you've experienced it, it doesn't have to be that way, specifically when you have a community that's also doing it.  So the huddles are our way to expose people to the realities of getting a job, going and interviewing and actually seeing all this knowledge.  And so that when you're in that situation, you can experience it too.  We have the huddles twice a week, and then we have a lot of independently generated community things.  So we have Banky Brunch, shout out Banky Brunch, which is a group of folks that come together to work through behavioral questions, technical questions pretty much every single day.  We have groups that are working on projects, our voice channels are always going.  None of this works without community and a wonderful group of mods.  I'd be remiss to not say Miriam, Diviker, MayanWolf, Claire, these folks that make all this work and for free and volunteering so much of their life to make this happen.  

Speaker 1: amazing yeah like free code camp.  similarly to draw parallels to our organization very community driven like.  we have tons of mods on the forum on discord and we have open source contributors that are just dropping in.  and like fixing little bugs making sure that like our copy is as readable as possible to non-native english speakers.  making sure that like It's a lot of contributor driven activity and it sounds like you've figured out a way to encourage a lot of people in your community, empower them with like, you know, you can delegate some degree of, I guess, authority to them so that they can go out and they can just experiment and build out different things.  One of the things that you said that I thought was really interesting, I do want to talk about, let's talk about spaced repetition and active recall, I believe are the terms.  Barbara Oakley teaches the learn course, the most popular MOOC, massive open online course ever, other than maybe like CS50, which we were talking about earlier.  Learning how to learn, it's not just obvious how to learn their tactics.  Right?  There are phenomena that are ingrained in the human brain from evolution, from the savannas of Africa, basically, that we carry with us today, that we can use if we know how to use them.  And one of them, you mentioned, is space repetition.  What is space repetition?  

Speaker 0: Yeah, sure.  So I guess kind of to set the stage real quick is that a lot of folks that attempt to learn how to code are not successful.  We know that, we know the drop-offs, we know that that's just a reality.  And a lot of time those people feel like that it is them, that it's a, they, they do not have the ability to learn how to code.  They do not have, there's something about them that would stop them from being successful as a software engineer.  And as someone that's worked with thousands of people, like literally in the classroom, my finger is on their keyboard.  I just know fundamentally my heart of hearts, like outside of a cognitive impairment.  that's just not true.  And the thing that I found is it's just that most people don't know how to learn.  And it's almost criminal that our school system doesn't actually teach us how to learn, that every textbook doesn't have some very fundamental things at the beginning that help you remember and learn this material.  So the difficult thing about software engineering is that it's a cumulative career.  The things you learn this week, you might need two years from now.  And so there are two really fundamental learning techniques that Dr.  Barbara Oakley does walk through.  that I really it's my favorite one of my favorite courses of all time.  that brings up where as humans.  we forget stuff very quickly.  So if I gave you a three-letter code, this is called the Evan-Haas curve, it was a study of one, it's somewhat been replicated since then, but basically this person just tracked a new three-letter word, a three-letter code every day, and they found within the first like 30 minutes, there was a 20% chance they'd just forgotten it.  the first 30 minutes.  So imagine trying to learn this really complicated coding stuff.  And within the first 30 minutes, you're going to forget it.  Then if you look at that forgetting curve by the end of the month, there's an 80% chance that you've forgotten that very simple thing.  And so For a lot of folks that are going into coding education, they just don't realize that the forgetting curve is very steep.  They'll learn something, a month later, they've completely forgotten it, and they have to start back over, and that's super frustrating.  So spaced repetition is using a tool that makes the material come back to you when you need it most.  And so a typical tool for this is Anki or Anki, however you want to call it.  

Speaker 1: Yeah, Anki, it means to commit to memory in Japanese.  Yeah.  Anki suru.  

Speaker 0: Exactly.  And so it is a flashcard tool that has an algorithm behind it, so that surfaces the information when you need to see it.  So if you're doing good study habits, which is a huge portion of what we teach at 100Devs, it's just like how to study, you're using this tool so that the things you learned about HTML, you're not forgetting when we're talking about like MongoDB, right?  And so that spaced repetition is going to help you remember stuff for the long haul, which is really important for a cumulative career.  But then the other thing that's even more important, in my opinion, than spatial repetition is something called active recall.  Coding can be done through video tutorials, it can be done through text, but it's a lot of information to process, and most people just go through it.  that's not active learning.  They feel maybe some sort of productivity from having watched a tutorial or having read a blog post, but they didn't actually engage with that material or learn.  And a lot of times, like for me, I teleport through information.  Like if I'm reading a book, I'll get through three paragraphs and I'm like, what the heck just happened?  I feel like I've just teleported through that.  

Speaker 1: I haven't heard that expression, but that's a good way to describe the phenomenon, especially, you know, people who have like ADHD and stuff, they may just be like, halfway through a book, maybe.  Your mind wanders.  And if you're not constantly trying to engage with it, you won't necessarily retain it.  

Speaker 0: So active recall is the way that helps me as someone that does have ADHD do this.  And so active recall is just recalling the things that you just learned or just read or just watched.  And for folks that do have attention issues, I recommend doing that after each paragraph.  I recommend doing it after each chapter end.  And you're just literally talking to yourself, what did I just read?  What did I just learn?  And you're saying it out loud.  The research behind it is really shocking, like staggering differences.  You can learn something once, actively recall it once, and do better than somebody that reread it four times.  

Speaker 1: Yeah.  

Speaker 0: Like you can do a quarter of the effort and have better results just with this one technique.  And the fact that that's not like stamped in every single textbook ever made is absurd.  

Speaker 1: Yeah, it's, I mean, like we could talk all day about like the shortcomings of the U.S.  education system, like both K through 12 and higher ed.  And to be completely clear, there are a lot of very smart people who are working very hard to address a lot of these deficiencies.  But the fact that we're having to explain what active recall and space repetition are when they're time-tested phenomena that you can leverage.  So just a quick note about active recall.  This is one of the reasons why Free Code Camp's entire curriculum is interactive.  It's because you have to grapple with things.  Otherwise, it could have just blown right past you, right?  Everything needs some sort of evaluation criteria, some sort of comprehension check.  And if you're doing something that doesn't have comprehensive check, if there's not some right or wrong answer, taking a moment to summarize what you just learned or relate it to something else you've learned, thinking about  

Speaker 0: it, just grappling with it,  

Speaker 1: that can absolutely help cement those, you know, synapses, right?  What's the thing that connects synapse axioms, not axioms, dendrites?  I can't remember.  Sorry.  You probably know.  But yeah, like, And it's something anybody can do.  When I'm reading a news article or something like that, that's not interactive.  Now with GPT or something, I can throw it in GPT and say, hey, come up with a multiple choice question based off this article.  And I'll do that sometimes.  Not just for active recall, but spaced repetition.  write a bunch of notes, and then review them a few days later.  Or use a tool like Anki that can systematically do that, where you can like load a bunch of flashcards.  A lot of learning platforms have spaced repetition just built into them.  If you go through the Free Code Camp curriculum, it's designed in such a way that we're going to reintroduce concepts over and over, and you're going to be like, oh yeah, I kind of remember this from like  

Speaker 0: A few  

Speaker 1: hours ago, you know, it was like, or a few days ago, like, but but we're intentionally trying to, you know, incorporate that.  And one of the things I think talking about the free cocaine curriculum, let's talk about 100 devs and like what you all are, is it 100 devs or 100 devs?  

Speaker 0: I can say either 100 devs.  

Speaker 1: 100 devs is shorter.  Yeah.  Yeah.  That's more, uh, more like easy to say.  So with 100 devs, like what is the coursework that you're going through?  Like, are you, are you using MOOCs?  Are you using open textbooks?  Are you creating a lot of the stuff yourself?  

Speaker 0: Yeah.  So I think there's like two important things.  One, I really don't believe the content matters.  We're a jobs program.  I think one of the biggest mistakes people make is an overinvestment in the idea that the learning aspect and not all the other things that move the needle.  We're very much two tracks.  We have all this other stuff we're doing outside of the learning and then the learning as well.  The learning is very simple.  We do full stack JavaScript.  And I do a lot of like custom, like I make all the lectures basically with the slides and all the funny stuff that you mentioned on Twitch.  And we move through that material together.  But a lot of it is supplementing with other things that I think are just the best free courses out there.  So in the beginning, our students will use some free code camp.  As they get a little bit further along, they'll use some things maybe from full stack open that are trying to supplement the things that we're doing in the classroom.  And anytime that we're doing something, it's always a free resource.  It always has a free trial or not trial, like a free level of access.  Yeah.  And so we give you the skills to be a full stack web developer.  We do some of the other kind of rounding out to give you the software engineering skill set, the tooling and things that you might use.  And then as you're getting ready to go on the hunt, the data structures and algorithms, you're going to need to be successful.  But that's kind of like the coding stuff.  Outside of that, from the very beginning, there's pretty stringent requirements in terms of your networking.  So you are supposed to be getting three connections and two coffee chats every single week throughout program.  You're doing things that are going to be opening all these doors to help you get a job.  And that's kind of another.  really, I think that's where our curriculum shines is those things that are really helpful and impactful for helping you get a job.  We actually have a lot of folks that do other boot camps, which we love.  I don't really care where you come from, what you do, as long as you're getting to where you want to go.  And a lot of folks will join us just for the how to get a job portion, which I think we're pretty strong at.  

Speaker 1: Awesome.  So it's so interesting and important that you distinguish yourself as not a learn coding program, but a get a job program.  And I just want to emphasize, even though we put a great deal of time and energy into our curriculum, it's absolutely like if you look at where all the donations we get and things like that go toward, it's instructional design, platform development, mainly for the core curriculum.  Because for us it is important that there's a really good core curriculum, but I'll be the first to tell you or I guess the second since Leon just said it.  Getting a job as a developer is really three things, in my humble opinion.  And if you haven't read my free book that I published about a year ago, Learn to Code and Get a Developer Job, literally the name of the book.  Just Google that, or Google code book, or learn to code book, I think you should find it pretty quickly.  And by finding it, and clicking on it, and spending a lot of time on the webpage, you help ensure that Google continues to recommend it to other people.  Skills are only one leg of the stool.  Network and reputation are the other two.  And we've talked enough about skills.  Let's jump into networking and building your reputation, which are two things that are also instrumental to the 100 Devs program.  Yeah.  Yeah.  Like what is the value of a network?  Why is networking worth your time and energy when it's such an awkward thing to do?  

Speaker 0: Yeah, we have.  It's just like we have a lot of in jokes and things like that, that if you're not part of the community, it's kind of weird to bring up.  But we refer to most people as clickers.  People that learn how to code and then they just click apply.  And clickers don't get jobs.  Maybe every once in a while, somebody gets lucky and they click on a button and they magically get a job.  But especially in this market, clickers don't get jobs.  And so we do everything in our power to never click apply.  We want to make sure that we're talking to like real humans that can see our humanity that can see our ability and our skills and the things that we can do so that we're not just.  discarded by some AI ATS system.  And so from the very beginning of 100 devs, we're tasking you with generalized networking.  And networking, I think it's like a scary term that I don't think should be, to me, networking is just making friends.  And you want to do things.  in the beginning that gets you comfortable with making friends.  And so you don't have to start networking by going to like your local Python meetup.  that's like super hardcore, like no.  if you like Pokemon, go play Pokemon at your local league, right?  Or like, if you like hiking, join like a hiking group and just like share passion with some others, get comfortable talking to people.  And then eventually apply those skills that you learn to places where developers are more likely to hang out and turn those acquaintances into friends.  And then by the time you're ready to go on the job hunt, you ultimately want hundreds of people that you've interacted with over the past year that you could go to and say, hey, you saw me where I was.  Here's where I'm at now.  Who should I talk to?  I'm looking for a job.  And that's really successful for people.  So that's phase one of networking.  Phase two is once you go on the hunt, it's very targeted.  We call it building our hit list where we identify the companies that are actively hiring.  We identify like three to five people at each of those companies, and we're doing outreach to get in communication with those folks, learn more.  And what we're finding is that a lot of jobs just don't get posted.  a lot of times folks will be applying for one job that they wind up getting a different one just because they like the person.  We have this idea that tech is this meritocracy where if you know the skills, you get the job, it's not.  People want to work with people that they like, they want to work with people that they know and trust, and you can make that happen for yourself by really going this networking your way in pathway.  

Speaker 1: So the term meritocracy is, it was actually like a joke because the author was like, this doesn't exist.  This is absurd.  It's who you know.  You're a skill unless you're, I mean, even the most demonstrably good pianists, for example, to talk about pianists as we talked about it earlier.  like somebody saw you know um skill in them and like help them get observed.  you know enrolled in some observatory or they had the time to play piano a lot with all.  the other.  kids were working in the shoe factory.  you know in the.  you know industrial revolution or whatever right like it takes.  So everybody's circumstances are different.  So I just want to like put the bed because I've never talked about this on the podcast, but we don't use the word meritocracy on here except to say that things aren't a meritocracy because they aren't.  It's ridiculous to think that they are.  The person who came up with it, I think, in a book was like just joking about it.  Yeah.  Yeah, but there's like He defined meritocracy is like I think effort and intelligence.  and how do you build intelligence through effort, right?  Some of it may be like, you know endowed upon you But for most part we all work really hard.  I study You know foreign languages like an hour a day.  I play bass an hour a day you know.  and like I still suck at those things.  but sucking at something is the first step to being good at something and Right.  So I also wanted to describe or like define like an acronym.  ATS is Applicant Tracking System.  

Speaker 0: System.  Yeah.  Yeah.  

Speaker 1: When you apply through like a web form, you're like applying into some algorithm.  that's going to be like, OK, we didn't ask if they have a college degree because it's hip to say that we don't look for people who have college degrees.  But in reality, our system is going to just filter you out because you don't have a college degree.  We didn't put it on the thing.  You know, I think I heard some study that like.  it was a recent study like 700 job postings that didn't say they required a degree like zero.  people got those jobs for software engineering for those roles, even though they didn't say because.  if you don't have a degree, the ATS just simply filters you out.  No human ever even reviews it, right?  But the way I got my first job as a developer was through meetup.com, going to local Ruby developer meetup.  And I got a job as a Rails developer, and the interview was very similar.  Maybe you can describe the typical interview that 100 devs folks go through, because it's not like a leak code whiteboard.  Maybe for some of them, but a lot of it is like, hey, I've already seen your projects.  I know you can code.  Are you a good fit for our organization, right?  

Speaker 0: It's about 50 50.  Yeah, we're talking across hundreds of people that have gotten jobs that I've like literally seen right and people have come and talked about them during our huddles.  so we have a celebrations channel on our discord where you can like go through and see hundreds of people their stories how they got the jobs what the interviews were like and so that's really powerful to know that.  but it's about 50 50 and it's when they when they do an interview we're talking about sometimes there's not gonna be like a LeetCode style portion.  There's still gonna be behavioral questions.  There's still gonna be technical questions.  You're still gonna be walking through a project.  You might do some light like coding together, but for about half the folks that have gotten jobs, they haven't done like a LeetCode style question.  The other half you will, and then there's varying degrees of it.  And so, so many folks focus on like grinding out LeetCode until their eyes bleed and it's like, Yeah, if you're going for Fang, sure, that needs to be the thing that you do.  But if you're going for a local healthcare company in your medium-sized city, they're probably not going to know, like they're probably not gonna go through and do that level of interviewing.  And so one of the things we always say is like, don't go into your interviews like an accident.  Always ask what you're about to walk into.  They'll tell you, like almost every single time, if you just say like, hey, like I'm putting a lot of time and energy into this application, I would really appreciate just being fully prepared.  What am I about to walk into in this interview?  And they'll tell you, oh, you're just gonna meet with so-and-so and talk through a project, great.  Now you know how to prep for that interview.  Don't ever go into an interview if you don't know what you're about to walk into.  It's about half of our jobs have been not really needing some of those more aggressive skills, but it's a huge smell test.  It's a sniff test.  We like to say every single person that starts off at 100 dev smells.  There's something about you that's going to stop you from getting the job.  And it's your job to figure out what it is, get rid of the smell, and make sure you come across as a cool, confident professional that's done this, been there and is ready to get to work.  And if you can do that, you're going to be really successful getting jobs.  And even folks that want to go the other more traditional interviews with like the leet codes and things like that, you're still passing a sniff test.  I have seen folks that I consider just amazing, even done like competitive programming that do well in interviews and don't get the job and they wonder why.  And then you look at their resume and you look at how they present themselves.  their narrative, all that stuff matters.  It really matters.  You need to invest time in opening those doors as well.  

Speaker 1: Yeah, absolutely.  And I just want to emphasize, if you can figure out what that smell is, maybe it's that I don't have a degree and I'm getting filtered out of ATS or people are just not looking at me as a serious candidate just based on that virtue.  You can absolutely correct for that.  And I have lots of friends, lots of people on the Free Code Camp team.  dropped out of college or never even went to college, right?  And it's just one of those things where you have to figure out and empathize with the HR person, whoever you're talking to, and figure out what it is they're sniffing for, because usually they're just trying to figure out a way to quickly weed people out, so to speak.  So they're not the entertainment people, right?  

Speaker 0: I don't know.  One of the things we try really hard at 100 Days is make sure you know all the hacks and the secrets and what's really happening.  Recruiters are using some sort of, like we said, ATS, some sort of filter.  You know what to add to your resume to get past those filters.  We use things like CV Compiler, which is a website that'll tell you what you're missing.  We have our own resume template that's battle-tested.  We follow the true F-shape pattern.  If you watch recruiters with eye tracking, there's a video that's going really popular, it's done it again, where you watch the way they look, they read left to right, like most folks that read English.  They're looking for those specific keywords at the front load of the F-shape pattern.  If you know these things, you can get past these screen segments.  And the other thing is people really need to work on how they talk about themselves.  People go into the hunt too humble.  This is your one chance in life to talk your talk, be proud of your previous experience.  I don't care what you've done, having that previous experience makes you a badass and brings different skills to the table than someone that did.  a four-year CS has only ever worked in computer science.  you're different and that difference can be a value add to a lot of companies.  And so knowing how to craft that into a narrative, like a logical reason from what you were doing to why you're the best software engineer they have in their candidate pool and being able to talk about yourself highly is super important.  So if you're listening, what is your narrative?  What is your story?  Why are you the coolest thing since sliced bread?  walking into that interview?  And that's what we do a lot during like our huddles and at 100 does we have whole nights where we just craft stories.  We'll have Dozens of people come up, they give us their life history, and we craft the narrative live.  And then you just see an instant difference in how they're going through applications.  

Speaker 1: Yeah.  And so, first of all, I would love if you can share the links to those, the CV, I'll pull up CV compiler, like if you have a resume template.  And like, we've talked a lot about 100 devs, and I feel like we could talk a whole lot more.  First of all, I want to make sure you still have a few minutes.  

Speaker 0: I'm good to go for as long as you'll have me.  Awesome.  

Speaker 1: Well, that's great news.  The main limiter is going to be the fact that I've drinked literally two liters of tea while I was sitting here talking with you.  So I may have to go to the bathroom at some point.  But what I really want is just to tease out as many high-level insights that we can get into this podcast.  I just want to end on as many pieces of actionable advice as you can share as somebody who has become a developer, who's worked as a software engineer, who's even built a successful project, I guess three or two projects, and then you're very actively high up in Resilient Coders too, which sounds like a really, and I want to tease as many of those out of you as I can.  For the benefit of the audience, and for the benefit of myself, I've been furiously taking notes through this whole thing.  Some questions I have are, I guess, what are some questions I should be asking?  What are some interesting things that people never ask you that are really helpful, that would be helpful for the many people out there learning the code?  Okay, what is a big mistake?  We can think about that.  Maybe you can think of some other things.  But what is a big mistake that you see developers make, other than over-optimizing on their skills, for example, and not enough on their network or their reputation, or figuring out how to empathize with recruiters?  And I don't mean be buddies with them, but you always want to understand other people's perspectives.  There's no disadvantage to having more perspectives compacted in your head, being able to build with more verisimilitude models of other people and how they're approaching the world and what they're looking for, how you can find the job that needs to be done and you can do it for that person, right?  Yeah.  

Speaker 0: I guess I'll, I'll gear it towards folks that are like learning how to code and trying to get a job.  I think the biggest mistake outside of the things like not investing early in networking and, um, over investing and things that aren't going to really move the needle in terms of you getting a job is there's, there's two things that I think.  lead to most folks not being successful.  And the number one thing is going into your days like an accident.  If you're going into your days like an accident, and you don't have a game plan for your day, your week, your month, and you're trying to commit to a process that's gonna take years, you're not gonna be successful.  And I've worked for folks from all different walks of life, the folks that make a plan for what they want, like, what do you want for yourself?  What do you want for your family?  What do you want for your loved ones?  Like, what do you want?  And then what are the steps you're going to take to get there?  That plan helps you get through the trough of sorrow.  It helps you get through the days where you don't have motivation, when the discipline is fleeting.  how do you stay true to what you want?  And you should have it written down.  You should have it on your wall.  There's a reason why I have your photo as the background of my wallpaper every once in a while.  It's because I need to know what I'm shooting for and what do I want?  What do I want for myself?  What do I want for my community?  And having that why, everyone that's trying to learn code needs to go on some long walks with no podcast, no music, no anything, and just ask yourself, what do I want?  Like, what's my future?  Like, what do I want for myself?  Because until you have that, it's really hard to push through.  And so I have a lot of people that come and they say they want it, but they only kind of want it, right?  It's like a very famous Dr.  Thomas speech.  Like, they just kind of want it.  And until you really want it, and that can come from a lot of different ways.  It can come from being fucking hungry.  It can come from wanting the respect of your family.  It can come from a lot of different places.  But until you have that, you're not gonna make it through.  So having that hammered down and really having it visible, putting it somewhere on the wall, knowing what it is, and then every day, Before I go to bed, I write out the three things I wanna get done the next day.  Once a month, what are my goals for the month?  Once a year, not once a year, every couple of months, what am I trying to get done for the year?  And I hold myself to it.  And the last piece I'll say about this is I get buy-in from the folks that matter most to me.  So it's not something internal to me.  I know if I wanna be successful in this, I need to get the buy-in of my wife, right?  Hey, this is the thing I wanna do.  It's gonna take a lot of time.  It's gonna take some nights and weekends away from us being together and with our family, and I need you to understand why I'm doing it, why it's important, and can I have a little bit of your trust, and I'll prove that to you over time that it's a worthwhile investment, but I need you to know why I'm doing this and get that buy-in.  Because if you don't have that buy-in, especially if you stay still at home with family that doesn't get it, if you're not being as present with your loved ones, that's going to build up some resentment.  And for a lot of folks, that's another reason why they're not successful.  So don't go into your days like an accident.  Have a plan for your days.  Know what your why is and get buy-in from the folks that matter most.  

Speaker 1: Yeah, that giving buy-in is so important because learning to code is a long, long journey.  And you get all hyped up.  You get like these, you know, probably YouTube ads or, you know, ads on the side of your coding tutorials.  Learn to code in just three months and get a job paying like 200K.  Like, you know, whatever, you know, and.  To be fair, there are plenty of developers who do learn to code very quickly and do get jobs.  I've had lots of friends who transitioned from working on Wall Street and they went to some expensive, intensive coding program and they were able to then go get a job in Silicon Valley.  But they already had college degrees.  They already had, you know, like, Probably figured out how to plan.  they probably had an understanding of like a lot of the you know learning Techniques that we've been talking about and most importantly they had a lot of money and they were able to just focus on it exclusively and Attend an intensive in-person boot camp like and that era may have passed.  it may be that it's just a little harder now to to be able to get a job just because you should learn math, right?  Like it used to be back in the day, you could just learn some WordPress and you could probably go get some clients do WordPress work.  And it may be that case, but with the global market and the level of competition you're going to get from places like India, Nigeria China like tons of extremely educated extremely hungry people are coming from all these places and You know, frankly, they're gonna eat your lunch if you're not putting in the time and effort.  Benjamin Franklin said few people plan to fail.  most people who fail are fail to plan.  That's a paraphrase of what he said.  It's not an exact note.  But it is like 100% what Leon's saying here.  And yeah, so I just want to emphasize, like, getting buy-in from your family.  Like, when I learned to code, again, I don't want to make this all about me, but like, I told my wife, like, hey, like, I've got this job as a soft as a school director.  Right.  And I would like to become a software engineer.  And we had double income.  We had insurance, which is a huge deal here in the U.S.  through her work.  So even if I left my job, we could continue to have health insurance.  And I just grinded every single day and I ever.  I didn't precisely what you're talking about planning out.  Okay, what am I going to accomplish the next few days?  because planning is everything like.  it's so important to have a plan and to stick to plan and to have goals that are Measurable and that are within your control.  That's another mistake.  I see a lot of people make is People be like?  my goal is to get you know 100,000 YouTube subscribers this year or my goal is to get you know a job paying like N thousand dollars or to get in freelance clients, you know, those are not things that you can directly control and You can't control the outcome, but you can control the input.  My goal is to play bass for an hour a day or whatever goal I might have at a given moment.  

Speaker 0: James Clear of Atomic Habits has a very famous quote that I love so much that says, we don't rise to the level of our goals, we fall to the levels of our systems.  And so this idea that we have all these lofty goals, but if you're not putting in the systems, how you're going to play the bass for an hour each day, study your languages for an hour each day, and the process for that, it's just not going to work out for you in the long run.  

Speaker 1: Yeah, absolutely.  We've talked a lot, and of course you and I, we grew up in the U.S.  You grew up in Philly, I grew up in Oklahoma City.  And here in the  U.S.,  even though things are not equal by a long shot, it's a very unequal society, we still have vestiges of, you know, history, going back 400 years, right?  Like the warp, essentially the haves and the have-nots.  But in the US, we're pretty well off compared to folks in a lot of countries.  For example, like the hyper-competition in places like India and China, where you've got so many people getting CS degrees and trying to compete and so few employers.  Or Nigeria, where there are so many amazing developers, like, I think it's like the third or fourth largest community in Free Code Camp, people that use Free Code Camp is Nigeria.  But if you look at Nigeria, there aren't a lot of big employers.  And the government's kind of a mess.  And as a result, there's not a lot of opportunity, even though there's a lot of talent.  So a lot of those people have to move overseas to like Europe or to the United States or wherever they can find opportunity, right?  Like, a lot of the, What is the proportion of people doing 100 devs who are outside of the U.S.  and how?  what have you observed about those people that might be helpful for them?  Yeah.  And like just a follow up question I'll tack on is like, do they need to move to the U.S.  to be able to be successful in software engineering?  or are there other paths you've seen people succeed with?  Yeah.  

Speaker 0: So I would say about half our community is from the U.S.  and about half is from everywhere else.  In fact, the first jobs we ever got were not from the U.S They were from Brazil, then Poland, UK, and then a bunch of other places in South America.  And so a lot of our community and folks that have gotten jobs haven't been from the U.S.  centric.  And so the first thing I always say is whenever somebody from outside the U.S.  says I want to get a job, I just tell them bluntly, it's way harder.  Don't let anyone convince you that it's going to be the same pathway as somebody from the US.  It's going to be a way more difficult journey.  And there's a very couple of like very key things that you have to keep in mind.  One, the visa sponsorship issue in the United States is wild.  It goes to a lottery most years, right?  And so banking on that is like a pathway into an engineering career.  if you're from a area that doesn't have like that strong of a local tech economy is very hard.  The competition for companies that hire remotely is brutal.  It's even more brutal when you look at the companies that hire globally.  So a lot of people think, oh, I'll get a remote tech job.  No, even though they're remote, they only hire folks from the US or from a very specific select countries.  So finding a group of folks that hire globally, remotely, that's a very narrow pool.  So the first thing I would recommend that you do is build a hit list of those companies.  There are lists you can find online.  There are a couple hundred of those companies.  You need to be best friends with everybody that works at that company.  And you mentioned building your reputation.  This is something I really recommend.  folks that are coming from a location that doesn't have a traditional tech economy, is your reputation matters a lot.  We talk about building authority a lot in 100Dev, so picking a niche or a topic that you know very, very well, generating content around it.  So when somebody thinks about, I don't know, authentication, they think about you and the blog post that you've written and the depth of knowledge that you can bring.  That way, when you're applying to these global remote companies, you have something that nobody else really has, this intangible thing that helps set you apart.  And so the first thing I say, it's harder.  Building authority or reputation is super important and not going into your job search like an accident, it's not gonna happen if you don't have a very strong game plan and you're building the references and helping pass that sniff test that these companies are putting out there.  If you do those things, you'll be successful.  We've helped hundreds of people in that situation get a job.  It's just a way more difficult pathway.  

Speaker 1: Yeah.  And just on that note of building authority, what are some of the most, I guess, immediate things someone can do?  Let's say you already have the skills.  Let's say you've been coding for a long time and you just want to be able to get a job, preferably at a multinational company, many of which are, of course, US-based.  And you would love over the next five or ten years to eventually get a visa and come to the US where salaries are double what they are in Europe and where we have a high degree of freedom that people in other countries don't necessarily enjoy.  I mean, it is a good place to live.  I like living in the US.  I guess it's easy for me to say that as a middle class guy who speaks English natively and has US citizenship and doesn't have to deal with my H1B being shifted around and getting companies to sponsor me and all that stuff.  But I can definitely understand the appeal.  I can understand why so many people are trying to immigrate to the US every day.  But what would be some practical ways that they can establish authority, as you said?  

Speaker 0: Yeah, so I think when you are trying to stand out amongst lots of other talented individuals, it doesn't have to be anything wild.  I really do think building a list of companies that are on your targeted range, and the H1B processes, I've helped sponsor a lot of H1Bs.  

Speaker 1: Oh, okay, cool.  

Speaker 0: We can talk about like, that's a whole other beast in and of itself.  That's like, you have to be an exceptional talent.  You have to do these things that will just stand out.  Like that's a whole other thing.  You're talking about like global remote company.  Like what can you do right now?  I'm thinking about somebody right now that wants to get a job.  My process probably wouldn't be the H1B coming to the US right away.  It'd be these like global remote companies and then maybe expanding to companies that could sponsor.  But a lot of times you're gonna need more, more credentials you're going to need, like degrees might actually become a thing if you're trying to go that sponsorship route.  So I recommend right now, if you're someone in Nigeria or India, looking at these global hire and remote companies, figuring out what they do, building a list of them, building a list of all the people that you know that work there, adding them to a Twitter list, right?  Like each person added to a Twitter list, start engaging with their content, just liking stuff at first, don't be spammy, don't be weird, just like engaging with them, liking their content, congratulating them when they get a new project built, right?  Like building that network of folks that know who you are over time, like you become like an acquaintance, like you can go from a nobody to like, they have no idea who you are to an acquaintance just by regular interaction on LinkedIn, Twitter, And there's a fine line between being weird with it, right?  We at 100 Dozen always joke, it's not stalking, it's networking.  And so you wanna make sure that you're not crossing that line.  And then starting to realize what these companies have trouble with, right?  You're engaging with these content, you're seeing the things that they're doing.  Are they having trouble implementing, I don't know, AI or LLMs?  Great, that's the content you need to start regenerating.  Build your authority about, How do they integrate these tools into their daily process?  You should have a blog.  You should have a YouTube.  You should have something where you're putting content out there.  You're getting feedback from them and from community of some sort to where you're building up that, hey, I'm not just somebody that says I do this.  You can look at my content.  You can look at the things I'm doing.  You can look at the things that I say I've done and be able to see that very clearly.  And also, by doing that, you're practicing how you talk about these things.  You're practicing, maybe if English is your second language, you're getting more comfortable with these things that when it comes time to pass the sniff test, you are, because these people you've been engaging with for a year plus, they've seen your content, they know who you are, they know what you're capable of.  That makes getting into these orgs a little bit easier.  

Speaker 1: Absolutely.  100% agreed.  Based on my limited knowledge.  I think it sounds like you have a lot more knowledge about that.  So what I would like to ask then is like, let's flip this around.  Employers who want to bring in more folks and this can, we can definitely start by talking about folks from overseas.  If you want talent, if you want to be able to tap that talent and you don't want to like go to some consultancy or something in some other country and say, give me like 20 devs, right, go to Infosys or whatever, like you want to literally get the best talent  

Speaker 0: from  

Speaker 1: India or from Nigeria just by picking developer by developer yourself.  You're trying to build out your company or you're a hiring manager and you're just trying to build a team.  What strategies, what advice would you give to those people so that they can actually find talented people and what should they be looking for?  

Speaker 0: I think partnerships are really great.  So we work with a lot of hiring partners at Resilient Coders.  We've sent dozens of folks to Amazon through Resilient Coders.  We have these very strong partnerships with a lot of orgs that need a good solid pipeline of talent.  And so partnering with communities is a really good way to do that.  If you came to RC, it was encoders, or you came to 100 devs, and you said, give me the best of the best, I would talk to you.  I'd make sure that your job is doing all the things that it needs to be done to be done equitably.  And if I felt that that was the case, I would give you all the folks, you would have a pipeline that was full for days of highly, qualified, incredibly talented talent from wherever you need them to be from or anywhere you'd want to support as well, like we can make that happen.  And so I think for folks that are looking for a good pipeline, just working with communities.  So I would of course say Working with myself you, I always think of Paris black tech pipeline does this work really well where they're able to get you a very strong source of talent from anywhere from entry level to super senior.  And so, figuring out these different orgs that have.  a surplus of talented engineering talent could be a great way to build those funnels for you.  

Speaker 1: Yeah, absolutely.  And then for organizations that just want to be more representative of the folks in their community, let's say like it's not necessarily remote, but here in the US, Los Angeles, for example, like there's a tech startup and they're looking for engineers.  What I guess, general tips would you give to employers so that they can be inclusive and they can make sure that they're bringing on talent that actually represents the local population instead of just bringing in a bunch of, you know, Stanford grads or something like that, right?  

Speaker 0: Yeah, I think it takes champions within a company that actually care about these things.  Of course, you can read like the McKinsey reports, a more diverse workforce equals better outcomes, right?  So a lot of companies know these things to be true, but it takes someone on the inside that cares about building an equitable workforce for this to actually happen, especially when things like DEI and these initiatives are being contested in the courts.  A lot of companies are becoming a little bit more shy around being 10 toes down, right?  And so I think if this is the case, it really doesn't come from top down.  It comes from individuals looking around and saying, you know what?  I live in a community that is 25% black and brown, but only 1% of our workforce is of color.  There's something fundamentally wrong here.  When we looked in Boston, where I spent most of my career, We had the second largest tech economy, but double-digit unemployment rates in our communities of color.  There's a fundamental mismatch.  And so we had a group of individuals that realized that this is just woefully inequitable, and they would go to town, they would go to fight the fight every single day to bring one person along, then to bring two along.  And the thing is, it can compound.  Once you have folks in these positions of power, you can turn around and help lift up more along with you.  So I don't think it needs to be like, like a company-wide thing.  I think anybody that's listening to this call has this ability to fight for what they know is right, to turn around and say, you know what, I want to make an equitable pathway in my company.  And I'm going to work really, really hard for the next open role for it to be someone that deserves to be here, but might not have the opportunity.  

Speaker 1: yeah and that's a huge part of 100 devs like as far as i can tell from like.  listening to a lot of your episodes and stuff like instead of asking people to like necessarily donate to 100 devs or uh like you tell them send the elevator back down is something you've said a few times like like try for every one of the 100 devs cohort members, the learners, they should try to find somebody else who's an alum and bring them onto their company so that they can kind of essentially  

Speaker 0: be  

Speaker 1: increasing the number of alumni within these organizations.  

Speaker 0: So in the free software community, we have a word gratis, right?  It's not free, it's gratis, meaning that there's like no cost, like there's no like monetary cost.  And so 100 devs is gratis.  I mean, there's no money.  No money should ever come out of your pocket.  I never want to see a dollar come out of your pocket for anything.  There's no way that you can give us that dollar.  We don't want it.  But it's not free.  And the reason why it's not free is because we expect that when you get the job, that you turn around and help three more get into the same position that you have, whether it's helping answer questions, whether it is literally helping people apply and get into the pipeline for your company.  The expectation is that this community has invested thousands of hours into your success.  And the thing that we ask is that you turn around and give a little bit of that time back.  And that's the reason why 100Devs has been so successful is that we have folks that have made it to the upper echelon that are now senior developers at the best tech companies in the world that are still giving up their time every single day on our discord and our huddles to make sure that the next folks are successful.  

Speaker 1: That is a beautiful note to end on, just the virtue of this organization that you've birthed into the world.  But let's not end quite yet, because I want to ask, what are the future initiatives?  What does 2024, the rest of 2024, maybe even 2025, 2026?  Free Code Camp, we think, literally a decade out, like working on this computer science degree program that will take another six years to complete all the coursework for, plus another.  Five years together longitudinal data plus probably another five years to have the data, you know Approved by a creditor so we can get the degree program accredited.  free computer science bachelor's degree free.  

Speaker 0: I was tweeting up a storehouse telling everybody in their mom.  I was running and showing my way like look this is this is the future like this is.  this is the thing that We need the most in the world right now.  And so yeah, I'm super happy that that's like on your your vision.  

Speaker 1: Education wants to be free.  

Speaker 0: Yeah, exactly like this is it right like doing the work like and like we said earlier I think free co-camp is amazing at identifying the real gaps like the things that people really need to be successful and Filling them and having a community that's willing to step up and do that work to fill those gaps.  so it's something I've.  It's the reason why it's the best donation I make every single week.  It's the reason why I always send folks to free code camps, because I know that they're in safe hands to get the things they need done.  Free isn't free for everyone, right?  In terms of time and commitment, a lot of folks that would be extremely successful at 100 devs, right?  The cliche line is that Skill and talent is distributed, opportunity is not, right?  And so we have a lot of folks that are extremely talented that could be phenomenal software engineers, but don't have the opportunity or the privilege of time.  They need to take that time.  they would be spending learning, driving for Uber.  doing DoorDash.  They need to take that time to put food on the table for their family.  And when we polled our collective, we saw that folks really only needed around $200 a week to make this a viable pathway.  So our huge, big goal is to build out an agency model where real companies come.  They have work that they need for us to accomplish.  We have super seasoned professional engineers that lead those projects, and then we break those projects down into individual issues or tasks, so that as you're learning, you're also maybe picking up some of these tasks in a real code base, like your skills become intensely practical.  By the time you graduate or leave 100 Devs, you've built real projects for real companies with production level code, And all the money that comes into agency goes directly into those issues, so that you're also getting a little bit of money coming in as you're working through it.  And we think that might make our program more equitable for folks that just don't have that last little bit of privilege of free time.  And so Like I said, we talked about earlier, we're a group of people that run ahead first into really big audacious goals.  Sometimes it works, sometimes it doesn't.  We're going to have a lot of mistakes, a lot of things are going to go wrong, but we're going to figure it out.  And our goal is that when we launch our next cohort, we also have this agency model in place as well, so that you're not only learning, but getting this practical paid experience as well.  

Speaker 1: Yeah, that's so cool.  

Speaker 0: I mean, that's like  

Speaker 1: we're all about taking away excuses from people like it is in like to be fair, like a lot of excuses, like if you have young kids or you're taking care of your folks, if you're working like three jobs to be able to pay exorbitant rent in your city, you know, like those are very.  reasonable reasons for not being able to spend a lot of time coding.  But if there are things you can do to remove some of those barriers, to make it easier for people to commit to an already arduous process of learning to code, right?  And nobody, anybody who says learning to code is easy is trying to tell you something like, it is hard as heck.  It's getting easier every year.  We're not dealing with punch cards.  We're getting higher levels of abstraction.  It is becoming easier, but it's not Star Trek easy where you just talk to the computer, right?  Eventually it will be, but maybe in the 24th century.  The more immediate problem... helping people free up their time so they can actually learn.  I just want to commend you on this program.  Like, I love the idea of getting people out there doing real world work, getting compensation through some sort of program where they can just, I mean, even $200 a week, it sounds like it's going to be a huge lifeline for a lot of these folks and free up a lot of time and energy.  This is extremely exciting and I would be very excited to have you back on in the future to catch up and like, see what you learned from running this this new uh experiment that you're running this bold endeavor.  

Speaker 0: i'll let you know how it goes.  

Speaker 1: awesome man.  well it's been such a joy learning so much from you not just from this conversation but just you know following you on twitter I'm going to add links to a lot of stuff that we've talked about in here.  I'm going to, of course, link to 100Devs.  And I just encourage people to learn more about the work of Leon, learn more about 100Devs, Resilient Coders, these organizations that, you know, like Resilient Coders is a charity, like Free Code Camp, 501C3.  And, you know, like there are lots of charities out there that are doing important work.  I'm going to try to encourage people to do what we've done, the two of us.  And yes, you can create a startup and make a lot of money and life-changing money, especially if you've got family that are back in a home country that needs support.  I will never give people a hard time about just wanting to make a whole lot of money.  If you have the means, if you are somebody who's mid-career and wants to do something in the charity space, I hope that the accomplishments of Leon and Modestly, Free Co-Camp, and the project that I...  

Speaker 0: Not so Modestly.  There's no Modesty that needs to be had there.  

Speaker 1: Yes.  I hope some of this will inspire you to also consider, you know, doing work in the public space, right, as a tax exempt public charity.  And again, I just want to commend the work you're doing, Leon, and I hope everybody has learned a great deal.  

Speaker 0: I appreciate it.  Thank you so much.  Like I said, this is a dream come true.  You've inspired me so much throughout my entire journey into this.  And I know you do the same for so many other folks each and every single day.  So thank you for the work that you do and in our communities, right, that help push this stuff through.  

Speaker 1: Yeah.  And to everybody in the 100 devs community that's watching this, hang in there.  Keep it up, man and woman.  You all are doing a long, grueling process, but you're helping one another, and you're making friends along the way.  So with that, I just want to thank everybody for tuning in.  Until next week, happy coding.  